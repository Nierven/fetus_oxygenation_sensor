<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SciChart.Charting3D</name>
    </assembly>
    <members>
        <member name="T:SciChart.Charting3D.StringToVector3TypeConverter">
            <summary>
            TypeConverter to allow conversion of a string value to <see cref="T:SciChart.Charting3D.Vector3"/>. Used to allow succinct Markup syntax e.g. 
            
            &lt;SciChart3DSurface WorldDimensions=&quot;10, 20, 30&quot;/&gt;
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.StringToVector3TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.StringToVector3TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the intended conversion type of the converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>
            The converted value.
            </returns>
            <exception cref="T:System.FormatException">Unable to convert the string {0} into a DoubleRange. Please use the format '1.234,5.678'</exception>
        </member>
        <member name="M:SciChart.Charting3D.Common.Extensions.AxisBinding.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Common.Extensions.SeriesBinding"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Common.Extensions.AxisBinding.Mode">
            <summary> 
            Update type 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Common.Extensions.AxisBinding.UpdateSourceTrigger">
            <summary> 
            Binding mode 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Common.Extensions.AxisBinding.RelativeSource">
            <summary>
            Description of the object to use as the source, relative to the target element.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Common.Extensions.AxisBinding.Path">
            <summary>
            Gets or sets the path to the collection of IRenderableSeriesViewModels
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Common.Extensions.SeriesBinding.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Common.Extensions.SeriesBinding"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Common.Extensions.SeriesBinding.Mode">
            <summary> 
            Update type 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Common.Extensions.SeriesBinding.UpdateSourceTrigger">
            <summary> 
            Binding mode 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Common.Extensions.SeriesBinding.RelativeSource">
            <summary>
            Description of the object to use as the source, relative to the target element.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Common.Extensions.SeriesBinding.Path">
            <summary>
            Gets or sets the path to the collection of IRenderableSeriesViewModels
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Common.Extensions.TooltipTemplateSelector">
            <summary>
            Provides class for choosing proper DataTemplate according to a <see cref="T:System.Type"/> of <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Common.Extensions.TooltipTemplateSelector.XyzSeriesTooltipTemplate">
            <summary>
            Data template used for renderable series with <see cref="T:SciChart.Charting3D.Model.IXyzDataSeries3D"/> type
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Common.Extensions.TooltipTemplateSelector.UniformGridSeriesTooltipTemplate">
            <summary>
            Data template used for renderable series with <see cref="!:IUniformGridDataSeries3D"/> type
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Common.Extensions.TooltipTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            Contains the logic for choosing a proper DataTemplate
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Common.Helpers.ResourceHelper.GetLocationUri(System.String,System.Reflection.Assembly)">
            <summary>
            The resource should be defined as 'Resource' not as 'Embedded resource'.
            </summary>
            <param name="resourcePath">The resource path</param>
            <param name="assembly">If null, then use calling assembly to find the resource</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Common.Helpers.ResourceHelper.LoadResourceFromUri(System.Uri,System.Reflection.Assembly)">
            <summary>
            Will load resource from any assembly that is part of the application.
            It does not rely on Application which is specific to a (UI) frameowrk.
            </summary>
            <param name="uri"></param>
            <param name="asm"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Common.Helpers.ResourceHelper.GetAssemblyResourceStream(System.Reflection.Assembly,System.String)">
            <summary>
            The path separator is '/'.  The path should not start with '/'.
            </summary>
            <param name="asm"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Charting3D.Common.Helpers.IWorldClipPlanesCalculator">
            <summary>
            Hold functionality for world clip planes calculation.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Common.Helpers.WorldClipPlanesCalculator">
            <summary>
            Hold functionality for world clip planes calculation.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Common.Helpers.WorldClipPlanesCalculator.Calculate(SciChart.Charting3D.Axis.IAxis3D,SciChart.Charting3D.Axis.IAxis3D,SciChart.Charting3D.Axis.IAxis3D,SciChart.Charting3D.Primitives.IAxisCubeDescriptor)">
            <summary>
            Calculates world clip planes.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Vector3ComponentConverter">
            <summary>
            A <see cref="T:System.Windows.Data.IValueConverter"/> which accepts a <see cref="T:SciChart.Charting3D.Vector3"/> then depending on ConverterParameter = 'X', 'Y', 'Z' returns the component for the vector
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Vector3ComponentConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Vector3ComponentConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:SciChart.Charting3D.Vector3StringConverter">
            <summary>
            A <see cref="T:System.Windows.Data.IValueConverter"/> which accepts a <see cref="T:SciChart.Charting3D.Vector3"/> then depending on <see cref="P:SciChart.Charting3D.Vector3StringConverter.StringFormat"/> formats the string
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Vector3StringConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Vector3StringConverter"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Vector3StringConverter.StringFormat">
            <summary>
            Gets or sets the string format. Default is 'n2'
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Vector3StringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Vector3StringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SciChart.Charting3D.Extensions.AxisDescriptorExtensions.ToSCRTAxisDescriptor(SciChart.Charting3D.Primitives.IAxisDescriptor,SciChart.Charting3D.Interop.SCRTAxisDescriptor)">
            <summary>
            Wrapper func which converts a C# <see cref="T:SciChart.Charting3D.Primitives.IAxisDescriptor"/> to <see cref="T:SciChart.Charting3D.Interop.SCRTAxisDescriptor"/> which is passed over the wire to C++ layer
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Extensions.ColorExtensions">
            <summary>
            Extension methods to convert <see cref="T:System.Windows.Media.Color"/> to SciChart3D types
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Extensions.ColorExtensions.ToTsrVector4(System.Windows.Media.Color,SciChart.Charting3D.Interop.TSRVector4)">
            <summary>
            Converts a <see cref="T:System.Windows.Media.Color"/> to <see cref="T:SciChart.Charting3D.Interop.TSRVector4"/> which has A,R,G,B components ranging from 0.0 - 1.0
            </summary>
            <param name="color"></param>
            <param name="tsrColor"></param>
        </member>
        <member name="M:SciChart.Charting3D.Extensions.ColorExtensions.ToTsrVector4(System.Windows.Media.Color)">
            <summary>
            Converts a <see cref="T:System.Windows.Media.Color"/> to <see cref="T:SciChart.Charting3D.Interop.TSRVector4"/> which has A,R,G,B components ranging from 0.0 - 1.0
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:SciChart.Charting3D.Extensions.ColorExtensions.ToArgb(System.Windows.Media.Color)">
            <summary>
            Converts a <see cref="T:System.Windows.Media.Color"/> to uint returning all four color components A,R,G,B in a single 32-bit value
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:SciChart.Charting3D.Extensions.ColorExtensions.ToAbgr(System.Windows.Media.Color)">
            <summary>
            Converts a <see cref="T:System.Windows.Media.Color"/> to uint returning all four color components A,B,G,R in a single 32-bit value
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:SciChart.Charting3D.Extensions.ListExtensions.ToVectorstr(System.Collections.Generic.IList{System.String},SciChart.Charting3D.Interop.Vectorstr)">
            <summary>
            Wrapper func which converts a C# <see cref="T:System.Collections.Generic.IList`1"/> to <see cref="T:SciChart.Charting3D.Interop.Vectorstr"/> which is passed over the wire to C++ layer
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Extensions.ListExtensions.ToVectorwstr(System.Collections.Generic.IList{System.String},SciChart.Charting3D.Interop.Vectorwstr)">
            <summary>
            Wrapper func which converts a C# <see cref="T:System.Collections.Generic.IList`1"/> to <see cref="T:SciChart.Charting3D.Interop.Vectorstr"/> which is passed over the wire to C++ layer
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Extensions.ListExtensions.ToVectorf(System.Collections.Generic.IList{System.Single},SciChart.Charting3D.Interop.Vectorf)">
            <summary>
            Wrapper func which converts a C# <see cref="T:System.Collections.Generic.IList`1"/> to <see cref="T:SciChart.Charting3D.Interop.Vectorf"/> which is passed over the wire to C++ layer
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Extensions.VectorExtensions.ToTsrVector3(SciChart.Charting3D.Vector3)">
            <summary>
            Converts a <see cref="T:SciChart.Charting3D.Vector3"/> to <see cref="T:SciChart.Charting3D.Interop.TSRVector3"/>
            </summary>
            <param name="vector3"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Extensions.VectorExtensions.ToVector3(SciChart.Charting3D.Interop.TSRVector3)">
            <summary>
            Converts a <see cref="T:SciChart.Charting3D.Interop.TSRVector3"/> to <see cref="T:SciChart.Charting3D.Vector3"/>
            </summary>
            <param name="tsrVector3"></param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Charting3D.BoundingBox">
            <summary>
            Defines a Bounding Box in 3D space
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.BoundingBox.Vec0">
            <summary>
            One corner of the bounding box in 3D space
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.BoundingBox.Vec1">
            <summary>
            Another corner of the bounding box in 3D space
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.BoundingBox.#ctor(SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.BoundingBox"/> struct.
            </summary>
            <param name="vec0">The vec0.</param>
            <param name="vec1">The vec1.</param>
        </member>
        <member name="P:SciChart.Charting3D.BoundingBox.Center">
            <summary>
            Computes the center of the bounding box in 3D space
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.BoundingBox.Max">
            <summary>
            Gets the Maximums of the bounding box, e.g. Max.X is the maximum X value in the bounding box
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.BoundingBox.Min">
            <summary>
            Gets the Minimums of the bounding box, e.g. Min.X is the minimum X value in the bounding box
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.BoundingBox.Corners">
            <summary>
            Computes a list of 8 corners of the Bounding box in 3D Space
            </summary>        
        </member>
        <member name="M:SciChart.Charting3D.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.BoundingBox.Equals(SciChart.Charting3D.BoundingBox)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.BoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:SciChart.Charting3D.Matrix4">
            <summary>
            Defines a three-component Vector with <see cref="T:System.Single">32-bit floating point</see> precision
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Matrix4.TransformCoordinate(SciChart.Charting3D.Vector3)">
            <summary>
            Transform a coordinate.
            </summary>
            <param name="vector">Vector to transform.</param>
            <returns>Transformed vector.</returns>
        </member>
        <member name="T:SciChart.Charting3D.Plane">
            <summary>
            Plane data type declaration represents a plane in 3d and has various different functions.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Plane.NormalX">
            <summary>
            X component of the plane normal.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Plane.NormalY">
            <summary>
            Y component of the plane normal.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Plane.NormalZ">
            <summary>
            Z component of the plane normal.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Plane.Distance">
            <summary>
            Distance along the normal to the origin.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Plane.op_Equality(SciChart.Charting3D.Plane,SciChart.Charting3D.Plane)">
            <summary>
            Implements the == equality operator
            </summary>
            <param name="a">The first plane.</param>
            <param name="b">The second plane.</param>
            <returns>
            The result of the operator = a == b
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Plane.op_Inequality(SciChart.Charting3D.Plane,SciChart.Charting3D.Plane)">
            <summary>
            Implements the != negative equality operator
            </summary>
            <param name="a">The first plane.</param>
            <param name="b">The second plane.</param>
            <returns>
            The result of the operator = a != b
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Plane.Equals(SciChart.Charting3D.Plane)">
            <summary>
            Implements the Equality operator
            </summary>
            <param name="other">The other.</param>
            <returns>True, if equals</returns>
        </member>
        <member name="M:SciChart.Charting3D.Plane.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Plane.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Plane.Assign(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Assigns a value from passed arguments.
            </summary>
            <param name="normalX">X-component of plane normal</param>
            <param name="normalY">Y-component of plane normal</param>
            <param name="normalZ">Z-component of plane normal</param>
            <param name="distance">Distance to plane from origin</param>
        </member>
        <member name="M:SciChart.Charting3D.Plane.Assign(SciChart.Charting3D.Plane)">
            <summary>
            Assigns a value from passed plane.
            </summary>
            <param name="plane">Plane from which value applies.</param>
        </member>
        <member name="M:SciChart.Charting3D.Plane.Apply(SciChart.Charting3D.Plane)">
            <summary>
            Applies a value to passed plane.
            </summary>
            <param name="plane">Plane to which value applies.</param>
        </member>
        <member name="T:SciChart.Charting3D.Vector3">
            <summary>
            Defines a three-component Vector with <see cref="T:System.Single">32-bit floating point</see> precision
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Vector3"/> struct.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.#ctor(SciChart.Charting3D.Interop.TSRVector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Vector3"/> struct.
            </summary>
            <param name="tsrVector3">The internal tsrvector3 value.</param>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Vector3"/> struct.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Vector3.X">
            <summary>
            access x value as X
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Vector3.Y">
            <summary>
            access y value as Y
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Vector3.Z">
            <summary>
            access z value as Z
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Vector3.Zero">
            <summary>
            Gets a Zero Vector
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Vector3.Length">
            <summary>
            Computes the length of the vector
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Vector3.LengthSquared">
            <summary>
            Computes the length squared of the vector
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.Distance(SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3)">
            <summary>
            Gets the distance as a scalar between two vectors
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.op_Subtraction(SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3)">
            <summary>
            Implements the - operator, which subtracts one vector from another
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>
            The result of the operator = a - b
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.op_Addition(SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3)">
            <summary>
            Implements the + operator, which adds one vector to another
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>
            The result of the operator = a + b
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.op_Addition(SciChart.Charting3D.Vector3,System.Single)">
            <summary>
            Implements the + operator, which adds a scalar to a vector
            </summary>
            <param name="a">The first vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>
            The result of the operator = a + b
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.op_Addition(SciChart.Charting3D.Vector3,System.Double)">
            <summary>
            Implements the + operator, which adds a double-precision scalar to a vector
            </summary>
            <param name="a">The first vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>
            The result of the operator = a + b
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.op_Multiply(SciChart.Charting3D.Vector3,System.Single)">
            <summary>
            Implements the * operator, which multiplies a vector by a scalar
            </summary>
            <param name="a">The first vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>
            The result of the operator = a * b
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.op_Multiply(SciChart.Charting3D.Vector3,System.Double)">
            <summary>
            Implements the * operator, which multiplies a vector by a double-precision scalar
            </summary>
            <param name="a">The first vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>
            The result of the operator = a * b
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.op_ExclusiveOr(SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3)">
            <summary>
            Implements the ^ cross product operator
            </summary>
            <param name="lhs">The first vector.</param>
            <param name="rhs">The second vector.</param>
            <returns>
            The result of the operator = a CROSS b
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.DotProduct(SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3)">
            <summary>
            Vector dot product.
            </summary>
            <param name="vector1">First vector.</param>
            <param name="vector2">Second vector.</param>
            <returns>Dot product of two vectors.</returns>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.Lerp(SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3,System.Single)">
            <summary>
            Linear interpolation between two vectors given a factor from 0.0 (equals from) to 1.0 (equals to)
            </summary>
            <param name="from">The From vector.</param>
            <param name="to">The too vector.</param>
            <param name="factor">The linear interpolation factor.</param>
            <returns>The linearly interpolated vector</returns>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.op_Equality(SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3)">
            <summary>
            Implements the == equality operator
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>
            The result of the operator = a == b
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.op_Inequality(SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3)">
            <summary>
            Implements the != negative equality operator
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>
            The result of the operator = a != b
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.Equals(SciChart.Charting3D.Vector3)">
            <summary>
            Implements the Equality operator
            </summary>
            <param name="other">The other.</param>
            <returns>True, if equals</returns>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Vector3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:SciChart.Charting3D.Model.ChartData.ChartDataObject3D">
            <summary>
            Provides a ViewModel containing info about chart series, which can be bound to.
            See <see cref="P:SciChart.Charting3D.Modifiers.LegendModifier3D.LegendData"/>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.ChartData.ChartDataObject3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.ChartData.ChartDataObject3D"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.Model.ChartData.ChartDataObject3D.#ctor(System.Collections.Generic.IEnumerable{SciChart.Charting3D.Model.ChartData.SeriesInfo3D})">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.ChartData.ChartDataObject3D"/> class.
            </summary>
            <param name="seriesInfos">The series infos.</param>
            <remarks></remarks>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartData.ChartDataObject3D.SeriesInfo">
            <summary>
            Gets or sets a collection of <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D"/> instances.
            </summary>
            <value>The series info.</value>
            <remarks></remarks>
        </member>
        <member name="T:SciChart.Charting3D.Model.ChartData.WaterfallSeriesInfo3D">
            <summary>
            <para> Provides a ViewModel containing info about a <see cref="T:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D"/>, such as name, value, color. <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D"/> types are
            produced by the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D"/> as well as other modifiers. They are  consumed by legend controls and may be consumed 
            by a custom <see cref="T:System.Windows.Controls.ItemsControl"/> binding to collection  of <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D"/>. </para>
            <para> See the examples suite, specifically RolloverModifier, SciTrader and Legends examples for more information. </para>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.ChartData.WaterfallSeriesInfo3D.#ctor(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D,System.UInt32,SciChart.Charting3D.RenderableSeries.HitTestInfo3D)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.ChartData.WaterfallSeriesInfo3D"/> class.
            </summary>
            <param name="rSeries">The <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/> instance to wrap.</param>
            <param name="entityId">The scene entity Id that corresponds to the series.</param>
            <param name="hitTestInfo">The <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D"/> containing information about a hit-test operation.</param>
        </member>
        <member name="T:SciChart.Charting3D.Model.ChartData.BaseXyzSeriesInfo3D">
            <summary>
            <para> Provides a ViewModel containing info about a <see cref="T:SciChart.Charting3D.Model.ChartData.BaseXyzSeriesInfo3D"/>, such as name, value, color. <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D"/> types are
            produced by the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D"/> as well as other modifiers. They are consumed by legend controls and may be consumed 
            by a custom <see cref="T:System.Windows.Controls.ItemsControl"/> binding to collection of <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D"/>. </para>
            <para> See the examples suite, specifically RolloverModifier, SciTrader and Legends examples for more information. </para>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.ChartData.BaseXyzSeriesInfo3D.#ctor(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D,System.UInt32,SciChart.Charting3D.RenderableSeries.HitTestInfo3D)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.ChartData.SurfaceMeshSeriesInfo3D"/> class.
            </summary>
            <param name="rSeries">The <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/> instance to wrap.</param>
            <param name="entityId">The scene entity Id that corresponds to the series.</param>
            <param name="hitTestInfo">The <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D"/> containing information about a hit-test operation.</param>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartData.BaseXyzSeriesInfo3D.VertexId">
            <summary>
            Gets or sets the vertex id at the hit-test site
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D">
            <summary>
            <para> Provides a ViewModel containing info about a <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>, such as name, value, color. <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D"/> types are
            produced by the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D"/> as well as other modifiers. They are  consumed by legend controls and may be consumed
            by a custom <see cref="T:System.Windows.Controls.ItemsControl"/> binding to collection  of <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D"/>. </para>
            <para> See the examples suite, specifically RolloverModifier, SciTrader and Legends examples for more information.</para>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.ChartData.SeriesInfo3D.#ctor(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D,System.UInt32,SciChart.Charting3D.RenderableSeries.HitTestInfo3D)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D"/> class.
            </summary>
            <param name="rSeries">The r series.</param>
            <param name="entityId">The scene entity Id that corresponds to the series.</param>
            <param name="hitTestInfo">The hit test information.</param>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartData.SeriesInfo3D.PointMetadata">
            <summary>
            Gets the metadata associated with the point at the hit-test site.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartData.SeriesInfo3D.Fill">
            <summary>
            Gets or sets the brush of the series.
            </summary>
            <value>The brush of the series.</value>
            <remarks></remarks>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartData.SeriesInfo3D.RenderableSeries">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/> instance which this <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D"/> wraps
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartData.SeriesInfo3D.SeriesName">
            <summary>
            Gets or sets the name of the series.
            </summary>
            <value>The name of the series.</value>
            <remarks></remarks>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartData.SeriesInfo3D.HitVertex">
            <summary>
            Gets or sets <see cref="T:SciChart.Charting3D.Vector3"/> in world coordinates that was at the hit-test site
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartData.SeriesInfo3D.IsHit">
            <summary>
            Get or sets whether the HitTest operation was a hit or not
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartData.SeriesInfo3D.IsVisible">
            <summary>
            Gets or sets whether the <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/> that this <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D"/> represents is visible or not. 
            NOTE: Setting this value will show or hide the associated <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/> and may be data-bound to
            </summary>
            <value>
            <c>true</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartData.SeriesInfo3D.Stroke">
            <summary>
            Gets or sets the color of the series.
            </summary>
            <value>The color of the series.</value>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartData.SeriesInfo3D.HitVertexCoords">
            <summary>
            Gets or sets <see cref="T:SciChart.Charting3D.Vector3"/> in world coordinates that was at the hit-test site
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.ChartData.SeriesInfo3D.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:SciChart.Charting3D.Model.ChartData.SurfaceMeshSeriesInfo3D">
            <summary>
            <para> Provides a ViewModel containing info about a <see cref="T:SciChart.Charting3D.Model.ChartData.SurfaceMeshSeriesInfo3D"/>, such as name, value, color. <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D"/> types are
            produced by the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D"/> as well as other modifiers. They are  consumed by legend controls and may be consumed 
            by a custom <see cref="T:System.Windows.Controls.ItemsControl"/> binding to collection  of <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D"/>. </para>
            <para> See the examples suite, specifically RolloverModifier, SciTrader and Legends examples for more information. </para>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.ChartData.SurfaceMeshSeriesInfo3D.#ctor(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D,System.UInt32,SciChart.Charting3D.RenderableSeries.HitTestInfo3D)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.ChartData.SurfaceMeshSeriesInfo3D"/> class.
            </summary>
            <param name="rSeries">The <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/> instance to wrap.</param>
            <param name="entityId">The scene entity Id that corresponds to the series.</param>
            <param name="hitTestInfo">The <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D"/> containing information about a hit-test operation.</param>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartData.SurfaceMeshSeriesInfo3D.Z">
            <summary>
            Gets or sets the Z index at the hit-test site
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartData.SurfaceMeshSeriesInfo3D.X">
            <summary>
            Gets or sets the J index at the hit-test site
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.ChartSeries.BaseRenderableSeries3DViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.BaseRenderableSeries3DViewModel.IsVisible">
            <summary>
            Gets or sets whether the series is visible when drawn
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.BaseRenderableSeries3DViewModel.Opacity">
            <summary>
            
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.BaseRenderableSeries3DViewModel.Stroke">
            <summary>
            Gets or sets the Stroke.
            </summary>
            <value>The color of the series.</value>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.BaseRenderableSeries3DViewModel.IsSelected">
            <summary>
            
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.BaseRenderableSeries3DViewModel.DataSeries">
            <summary>
            
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.BaseRenderableSeries3DViewModel.PaletteProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.BaseRenderableSeries3DViewModel.PointMarker">
            <summary>
            
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.ChartSeries.ColumnRenderableSeries3DViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.ColumnRenderableSeries3DViewModel.Fill">
            <summary>
            Gets or sets the Fill Color for columns
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.ColumnRenderableSeries3DViewModel.SelectedDataPointFill">
            <summary>
            Gets or sets the Fill Color for selected data points 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.ColumnRenderableSeries3DViewModel.ColumnShape">
            <summary>
            Gets or sets the Shape of the colums. Should be of <see cref="T:SciChart.Charting3D.PointMarkers.BaseMeshPointMarker3D"/> type
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.ColumnRenderableSeries3DViewModel.DataPointWidth">
            <summary>
            Gets or sets the DataPointWidth, a value between 0.0 and 1.0 which defines the fraction of available space each column should occupy in X and Z dimension
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.ColumnRenderableSeries3DViewModel.DataPointWidthX">
            <summary>
            Gets or sets the DataPointWidthX, a value between 0.0 and 1.0 which defines the fraction of available space each column should occupy in X dimension
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.ColumnRenderableSeries3DViewModel.DataPointWidthZ">
            <summary>
            Gets or sets the DataPointWidthZ, a value between 0.0 and 1.0 which defines the fraction of available space each column should occupy in Z dimension
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.ColumnRenderableSeries3DViewModel.ViewType">
            <summary>
            Gets the RenderableSeries3D Type to which this ViewModel will be associated
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.ChartSeries.ImpulseRenderableSeries3DViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.ChartSeries.ImpulseRenderableSeries3DViewModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.ImpulseRenderableSeries3DViewModel.StrokeThickness">
            <summary>
            Gets or sets the StrokeThickness of the lines. 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.ImpulseRenderableSeries3DViewModel.SelectedDataPointStroke">
            <summary>
            Gets or sets the Stroke Color for selected data points 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.ImpulseRenderableSeries3DViewModel.ViewType">
            <summary>
            Gets the RenderableSeries3D Type to which this ViewModel will be associated
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.ChartSeries.PointLineRenderableSeries3DViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.ChartSeries.PointLineRenderableSeries3DViewModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.PointLineRenderableSeries3DViewModel.StrokeThickness">
            <summary>
            Gets or sets the StrokeThickness of the lines. 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.PointLineRenderableSeries3DViewModel.SelectedDataPointStroke">
            <summary>
            Gets or sets the Stroke Color for selected data points 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.PointLineRenderableSeries3DViewModel.IsLineStrips">
            <summary>
            Gets or sets the IsLineStrips
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.PointLineRenderableSeries3DViewModel.IsAntialiased">
            <summary>
            Gets or sets whether the Lines are antialiased (default FALSE). 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.PointLineRenderableSeries3DViewModel.ViewType">
            <summary>
            Gets the RenderableSeries3D Type to which this ViewModel will be associated
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.ChartSeries.ScatterRenderableSeries3DViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.ScatterRenderableSeries3DViewModel.ViewType">
            <summary>
            Gets the RenderableSeries3D Type to which this ViewModel will be associated
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness to apply to the wireframe. Used when <see cref="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.DrawMeshAs"/> is WireFrame or SolidWireFrame
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.HeightScaleFactor">
            <summary>
            Gets or sets the height scale factor. Default is 1.0f. Value of 0.0f will render a flat Uniform Surface Mesh. Value of 1.0f will use the scaling of the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> YAxis
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.MeshResolution">
            <summary>
            Gets or sets the mesh resolution. By default for each point in the <see cref="T:SciChart.Charting3D.Model.UniformGridDataSeries3D`1"/>, there will be one vertex in the resulting mesh. To increase the resolution, use <see cref="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.MeshResolution"/> x2 or <see cref="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.MeshResolution"/> x4
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.DrawMeshAs">
            <summary>
            Gets or sets how to draw the mesh
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.DrawSkirt">
            <summary>
            Gets or sets whether to draw the skirt (geometry from the edges of the surface mesh to the zero line in Y)
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.MeshColorPalette">
            <summary>
            Gets or sets the MeshColorPalette which is used to calculate color from data value
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.Minimum">
            <summary>
            Gets or sets value which corresponds to min color
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.Maximum">
            <summary>
            Gets or sets value which corresponds to max color
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.MeshPaletteMode">
            <summary>
            Gets or sets the <see cref="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.MeshPaletteMode"/>, which defines how to apply the <see cref="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.ColorMapTexture"/>
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.ColorMapTexture">
            <summary>
            Gets or sets the ColorMapTexture generated when the <see cref="T:System.Drawing.Imaging.ColorPalette"/> property changes. Alternatively, this property may be set by the user if a custom texture is required. 
            Also see <see cref="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.MeshPaletteMode"/>, which defines how the <see cref="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.ColorMapTexture"/> is applied to the surface mesh geometry
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.ColorMapTextureSize">
            <summary>
            Gets or sets the Size of the texture to create when the <see cref="T:System.Drawing.Imaging.ColorPalette"/> property is set. If the user sets the <see cref="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.ColorMapTexture"/> directly, this property is ignored
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.SurfaceMeshRenderableSeries3DViewModel.ViewType">
            <summary>
            Gets the RenderableSeries3D Type to which this ViewModel will be associated
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.ChartSeries.MountainRenderableSeries3DViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.MountainRenderableSeries3DViewModel.StrokeThickness">
            <summary>
            Gets or sets the StrokeThickness of the lines. 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.MountainRenderableSeries3DViewModel.Fill">
            <summary>
            
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.MountainRenderableSeries3DViewModel.ViewType">
            <summary>
            Gets the RenderableSeries3D Type to which this ViewModel will be associated
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.ChartSeries.WaterfallRenderableSeries3DViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.WaterfallRenderableSeries3DViewModel.ClipMode">
            <summary>
            Gets or sets how a Waterfall Chart renders its data.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.WaterfallRenderableSeries3DViewModel.YColorMapping">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.RenderableSeries.BrushColorPalette"/> for filling slices of a waterfall chart.
            The slices will be painted along Y axis.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.WaterfallRenderableSeries3DViewModel.ZColorMapping">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.RenderableSeries.BrushColorPalette"/> for filling slices of a waterfall chart.
            The slices will be painted along Z axis.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.WaterfallRenderableSeries3DViewModel.SelectedColorMapping">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.RenderableSeries.BrushColorPalette"/> for filling selected slices of a waterfall chart.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.WaterfallRenderableSeries3DViewModel.SelectedStroke">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.RenderableSeries.BrushColorPalette"/> for paining outlines of selected slices of a waterfall chart.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.WaterfallRenderableSeries3DViewModel.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness of waterfall chart slices.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.WaterfallRenderableSeries3DViewModel.SliceThickness">
            <summary>
            Gets or sets the thickness of waterfall chart slices.
            Produces volumetric slices if set to a value > 0.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.ChartSeries.WaterfallRenderableSeries3DViewModel.ViewType">
            <summary>
            Gets the RenderableSeries3D Type to which this ViewModel will be associated
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.DataBoundingBox">
            <summary>
            Provides a bounding box in Data-coordinates
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Model.DataBoundingBox.XRange">
            <summary>
            The X-Range
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Model.DataBoundingBox.YRange">
            <summary>
            The Y-Range
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Model.DataBoundingBox.ZRange">
            <summary>
            The Z-Range
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataBoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataBoundingBox.Equals(SciChart.Charting3D.Model.DataBoundingBox)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataBoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:SciChart.Charting3D.Model.DisplacementAxis3D">
            <summary>
            Enumerates 3D axes along which displacement map is applied.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Model.DisplacementAxis3D.XAxis">
            <summary>
            X axis.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Model.DisplacementAxis3D.YAxis">
            <summary>
            Y axis.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Model.DisplacementAxis3D.ZAxis">
            <summary>
            Z axis.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.IDisplaceableFreeSurfacePointSeries">
            <summary>
            Interface of Free Surface data series with the Displacement Map, applied to its points displacing them along X and/or Y and/or Z axes.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IDisplaceableFreeSurfacePointSeries.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets Displacement Map value as double at the UV index.
            </summary>
            <param name="uIndex">The U index.</param>
            <param name="vIndex">The V index.</param>
            <returns>The item at this index</returns>
        </member>
        <member name="P:SciChart.Charting3D.Model.IDisplaceableFreeSurfacePointSeries.IsAxesPropagationAbsolute">
            <summary>
            Gets value determining whether the displacement is absolute.
            This means that surface is displaced by a value from the displacement map
            by specified displacement axes absolutely, ignoring its relative direction
            from the origin.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IDisplaceableFreeSurfacePointSeries.DisplacementAxes">
            <summary>
            Gets axes by which surface can be displaced.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.XyzDisplaceableFreeSurfaceDataSeries`1">
            <summary>
            Free Surface data series with the grid data, applied to its points displacing them along the XYZ axes.
            </summary>
            <typeparam name="TXYZ">Type of X, Y, and Z axes.</typeparam>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDisplaceableFreeSurfaceDataSeries`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets Displacement Map value at the UV index.
            </summary>
            <param name="uIndex">The U index.</param>
            <param name="vIndex">The V index.</param>
            <returns>The item at this index</returns>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDisplaceableFreeSurfaceDataSeries`1.InternalArray">
            <summary>
            Accesses the internal array.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDisplaceableFreeSurfaceDataSeries`1.ToPointSeries``1">
            <summary>
            Converts a DataSeries to a <see cref="T:SciChart.Charting3D.Model.IPointSeries3D" /> derived type, for use during the render pass
            </summary>
            <typeparam name="TPointSeries">The type of <see cref="T:SciChart.Charting3D.Model.IPointSeries3D" /></typeparam>
            <returns>
            The PointSeries, which may be used for drawing
            </returns>
            <exception cref="T:System.InvalidOperationException">Expected TPointSeries generic constraint to be ISurfaceDataSeries3D</exception>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDisplaceableFreeSurfaceDataSeries`1.GetDataDisplacement(`0,System.Double,System.Double,`0@,`0@,`0@)">
            <summary>
            Gets the displacement along the XZ axes in regards to Displacement Map data and UV coordinates.
            </summary>
            <param name="dataValue">Value of an element of the grid data data grid.</param>
            <param name="u">The U coordinate of the surface.</param>
            <param name="v">The V coordinate of the surface.</param>
            <param name="x">When method returns, contains the the Displacement Map value along the X axis.</param>
            <param name="y">When method returns, contains the the Displacement Map value along the Y axis.</param>
            <param name="z">When method returns, contains the the Displacement Map value along the Z axis.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDisplaceableFreeSurfaceDataSeries`1.GetRowAt(System.Int32)">
            <summary>
            Returns the row at the specified Z Index
            </summary>
            <param name="zIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDisplaceableFreeSurfaceDataSeries`1.CopyFrom(SciChart.Data.Model.GridData{`0})">
            <summary>
            Fills the ScalableXZFreeSurfaceDataSeries from a <see cref="T:SciChart.Data.Model.GridData`1"/> type.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDisplaceableFreeSurfaceDataSeries`1.CopyFrom(`0[][])">
            <summary>
            Fills the ScalableXZFreeSurfaceDataSeries from a two dimensional array. Assumes the array is rectangular
            </summary>
            <param name="innerArray">The inner array.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDisplaceableFreeSurfaceDataSeries`1.SetRowAt(System.Int32,`0[])">
            <summary>
            Sets the row at the specified Z index
            </summary>
            <param name="zIndex">Index of the z.</param>
            <param name="row">The row.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDisplaceableFreeSurfaceDataSeries`1.PushRow(`0[])">
            <summary>
            Pushes a row into the array, which discards one old row in a First In First Out fashion. use this method to scroll the GridData in the Z-direction
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDisplaceableFreeSurfaceDataSeries`1.GetDisplacedDataValue(System.Int32,System.Int32,System.Double,System.Double,`0@,`0@,`0@)">
            <summary>
            Gets the 3-Dimensional data value with the Displacement Map value applied.
            </summary>
            <param name="uIndex">The index of U coordinate in the 2D grid space.</param>
            <param name="vIndex">The index of V coordinate in the 2D grid space.</param>
            <param name="u">The U coordinate in the 2D grid space.</param>
            <param name="v">The V coordinate in the 2D grid space.</param>
            <param name="x">When method returns, contains a value of the X coordinate.</param>
            <param name="y">When method returns, contains a value of the Y coordinate.</param>
            <param name="z">When method returns, contains a value of the Z coordinate.</param>
        </member>
        <member name="T:SciChart.Charting3D.Model.XyzDisplaceableFreeSurfacePointSeries`1">
            <summary>
            This contains the result of resampling or conversion from <see cref="T:SciChart.Charting3D.Model.XyzDisplaceableFreeSurfaceDataSeries`1"/> 
            to a render-loop compatible collection
            </summary>
            <typeparam name="TXYZ">Type of X, Y, and Z Axes.</typeparam>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDisplaceableFreeSurfacePointSeries`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets Displacement Map value as double at the UV index.
            </summary>
            <param name="uIndex">The U index.</param>
            <param name="vIndex">The V index.</param>
            <returns>The item at this index</returns>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDisplaceableFreeSurfacePointSeries`1.IsAxesPropagationAbsolute">
            <summary>
            Gets value determining whether the displacement is absolute.
            This means that surface is displaced by a value from the displacement map
            by specified displacement axes absolutely, ignoring its relative direction
            from the origin.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDisplaceableFreeSurfacePointSeries`1.DisplacementAxes">
            <summary>
            Gets axes by which surface can be displaced.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.YDisplaceableFreeSurfaceDataSeries`3">
            <summary>
            Free Surface data series with the grid data, applied to its points displacing them along the Y axis.
            </summary>
            <typeparam name="TX">Type of the X Axis.</typeparam>
            <typeparam name="TY">Type of the Y Axis.</typeparam>
            <typeparam name="TZ">Type of the Z Axis.</typeparam>
        </member>
        <member name="P:SciChart.Charting3D.Model.YDisplaceableFreeSurfaceDataSeries`3.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets Displacement Map value at the UV index.
            </summary>
            <param name="uIndex">The U index.</param>
            <param name="vIndex">The V index.</param>
            <returns>The item at this index</returns>
        </member>
        <member name="P:SciChart.Charting3D.Model.YDisplaceableFreeSurfaceDataSeries`3.InternalArray">
            <summary>
            Accesses the internal array.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.YDisplaceableFreeSurfaceDataSeries`3.ToPointSeries``1">
            <summary>
            Converts a DataSeries to a <see cref="T:SciChart.Charting3D.Model.IPointSeries3D" /> derived type, for use during the render pass
            </summary>
            <typeparam name="TPointSeries">The type of <see cref="T:SciChart.Charting3D.Model.IPointSeries3D" /></typeparam>
            <returns>
            The PointSeries, which may be used for drawing
            </returns>
            <exception cref="T:System.InvalidOperationException">Expected TPointSeries generic constraint to be ISurfaceDataSeries3D</exception>
        </member>
        <member name="M:SciChart.Charting3D.Model.YDisplaceableFreeSurfaceDataSeries`3.GetRowAt(System.Int32)">
            <summary>
            Returns the row at the specified Z Index
            </summary>
            <param name="zIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.YDisplaceableFreeSurfaceDataSeries`3.CopyFrom(SciChart.Data.Model.GridData{`1})">
            <summary>
            Fills the ScalableXZFreeSurfaceDataSeries from a <see cref="T:SciChart.Data.Model.GridData`1"/> type.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.YDisplaceableFreeSurfaceDataSeries`3.CopyFrom(`1[][])">
            <summary>
            Fills the ScalableXZFreeSurfaceDataSeries from a two dimensional array. Assumes the array is rectangular
            </summary>
            <param name="innerArray">The inner array.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.YDisplaceableFreeSurfaceDataSeries`3.SetRowAt(System.Int32,`1[])">
            <summary>
            Sets the row at the specified Z index
            </summary>
            <param name="zIndex">Index of the z.</param>
            <param name="row">The row.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.YDisplaceableFreeSurfaceDataSeries`3.PushRow(`1[])">
            <summary>
            Pushes a row into the array, which discards one old row in a First In First Out fashion. use this method to scroll the GridData in the Z-direction
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.YDisplaceableFreeSurfaceDataSeries`3.GetDisplacedDataValue(System.Int32,System.Int32,System.Double,System.Double,`0@,`1@,`2@)">
            <summary>
            Gets the 3-Dimensional data value with applied displacement by specified UV index of the 2D grid in the surface.
            </summary>
            <param name="uIndex">The index of U coordinate in the 2D grid space.</param>
            <param name="vIndex">The index of V coordinate in the 2D grid space.</param>
            <param name="u">The U coordinate in the 2D grid space.</param>
            <param name="v">The V coordinate in the 2D grid space.</param>
            <param name="x">When method returns, contains a value of the X coordinate.</param>
            <param name="y">When method returns, contains a value of the Y coordinate.</param>
            <param name="z">When method returns, contains a value of the Z coordinate.</param>
        </member>
        <member name="T:SciChart.Charting3D.Model.YDisplaceableFreeSurfacePointSeries`3">
            <summary>
            This contains the result of resampling or conversion from <see cref="T:SciChart.Charting3D.Model.YDisplaceableFreeSurfaceDataSeries`3"/> 
            to a render-loop compatible collection
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.YDisplaceableFreeSurfacePointSeries`3.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets Displacement Map value as double at the UV index.
            </summary>
            <param name="uIndex">The U index.</param>
            <param name="vIndex">The V index.</param>
            <returns>The item at this index</returns>
        </member>
        <member name="P:SciChart.Charting3D.Model.YDisplaceableFreeSurfacePointSeries`3.IsAxesPropagationAbsolute">
            <summary>
            Gets value determining whether the displacement is absolute.
            This means that surface is displaced by a value from the displacement map
            by specified displacement axes absolutely, ignoring its relative direction
            from the origin.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.YDisplaceableFreeSurfacePointSeries`3.DisplacementAxes">
            <summary>
            Gets axes by which surface can be displaced.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.IBaseGridDataSeries3D">
            <summary>
            Defines the base interface to a <see cref="T:SciChart.Charting3D.Model.BaseGridDataSeries3D`3"/>, the data source for various 3D RenderableSeries 
            such as <see cref="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IBaseGridDataSeries3D.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.IComparable">item</see> at the i,j index
            </summary>
            <param name="i">The i index.</param>
            <param name="j">The j index.</param>
            <returns>The item at this index</returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.IBaseGridDataSeries3D.GetX(System.Int32)">
            <summary>
            Gets the <see cref="T:System.IComparable">item</see> at the X index
            </summary>
            <param name="i">The i index.</param>
            <returns>The item at this index</returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.IBaseGridDataSeries3D.GetZ(System.Int32)">
            <summary>
            Gets the <see cref="T:System.IComparable">item</see> at the Z index
            </summary>
            <param name="j">The j index.</param>
            <returns>The item at this index</returns>
        </member>
        <member name="T:SciChart.Charting3D.Model.BaseGridDataSeries3D`3">
            <summary>
            <para>The BaseGridDataSeries3D wraps a 2D array of type <typeparamref name="TY"/> which become the Y-values (heights) in various RenderableSeries</para>
            <para>For instance, in the <see cref="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D"/> the Y-values map to the heights, whereas the <see cref="!:StartX"/>, <see cref="!:StepX"/>, <see cref="!:StartZ"/>, <see cref="!:StepZ"/> defines the X and Z values</para>
            </summary>
            <typeparam name="TX">The type of the x.</typeparam>
            <typeparam name="TY">The type of the y.</typeparam>
            <typeparam name="TZ">The type of the z.</typeparam>
        </member>
        <member name="M:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="!:BaseGridDataSeries3D&lt;T&gt;"/> class.
            </summary>
            <param name="xSize">Size of the x.</param>
            <param name="zSize">Size of the z.</param>
        </member>
        <member name="P:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.InternalArray">
            <summary>
            Accesses the internal array, which is a rectangular array indexed by Z then X
            </summary>
            <example>
            <code language="csharp">
            int xSize = 10;
            int zSize = 20;
            var data = new BaseGridDataSeries3D&lt;double&gt;(xSize, zSize);
            
            double value = data.InternalArray[z][x];
            </code>
            </example>
        </member>
        <member name="P:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.XSize">
            <summary>
            Gets the X-Size of the Grid
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.ZSize">
            <summary>
            Gets the Y-Size of the grid
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.SyncRoot">
            <summary>
            Gets an object for thread synchronization purposes
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.SciChart#Charting3D#Model#IBaseGridDataSeries3D#Item(System.Int32,System.Int32)">
            <summary>
            Returns the Y-value at index z,x
            </summary>
            <param name="x">The XIndex</param>
            <param name="z">The ZIndex</param>
            <returns></returns>
        </member>
        <member name="P:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.XRange">
            <summary>
            Gets the total extents of the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> in the X direction.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.YRange">
            <summary>
            Gets the total extents of the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> in the Y direction.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.ZRange">
            <summary>
            Gets the total extents of the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> in the Z direction.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.Item(System.Int32,System.Int32)">
            <summary>
            Returns the Y-value at index Z,X
            </summary>
            <param name="x">The XIndex</param>
            <param name="z">The ZIndex</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.Clear">
            <summary>
            Clears the DataSeries, resetting to an empty array of XSize,ZSize
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.Clear(System.Int32,System.Int32)">
            <summary>
            Clears the <see cref="T:SciChart.Charting3D.Model.BaseGridDataSeries3D`3"/>, resetting its X,Z size
            </summary>
            <param name="xSize">The new XSize</param>
            <param name="zSize">The new ZSize</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.SciChart#Charting3D#Model#IBaseGridDataSeries3D#GetX(System.Int32)">
            <summary>
            Computes the X data-value at the specified index 
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.SciChart#Charting3D#Model#IBaseGridDataSeries3D#GetZ(System.Int32)">
            <summary>
            Computes the Z data-value at the specified index 
            </summary>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.GetX(System.Int32)">
            <summary>
            Computes the X data-value at the specified index 
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.GetZ(System.Int32)">
            <summary>
            Computes the Z data-value at the specified index 
            </summary>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.GetRowAt(System.Int32)">
            <summary>
            Returns the row at the specified Z Index
            </summary>
            <param name="zIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.CopyFrom(SciChart.Data.Model.GridData{`1})">
            <summary>
            Fills the BaseGridDataSeries3D from a <see cref="T:SciChart.Data.Model.GridData`1"/> type.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.CopyFrom(`1[][])">
            <summary>
            Fills the BaseGridDataSeries3D from a two dimensional array. Assumes the array is rectangular
            </summary>
            <param name="innerArray">The inner array.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.SetRowAt(System.Int32,`1[])">
            <summary>
            Sets the row at the specified Z index
            </summary>
            <param name="zIndex">Index of the z.</param>
            <param name="row">The row.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.PushRow(`1[])">
            <summary>
            Pushes a row into the array, which discards one old row in a First In First Out fashion. use this method to scroll the GridData in the Z-direction
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="P:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.IsDirty">
            <summary>
            Gets or sets a value indicating whether this instance is dirty. If dirty, any cached data must be re-calculated. You can set this value = true to force recalculation of caches 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.ToPointSeries``1">
            <summary>
            Converts a DataSeries to a <see cref="T:SciChart.Charting3D.Model.IPointSeries3D" /> derived type, for use during the render pass
            </summary>
            <typeparam name="TPointSeries">The type of <see cref="T:SciChart.Charting3D.Model.IPointSeries3D" /></typeparam>
            <returns>
            The PointSeries, which may be used for drawing
            </returns>
            <exception cref="T:System.InvalidOperationException">Expected TPointSeries generic constraint to be IGridPointSeries3D</exception>
        </member>
        <member name="M:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.To2DArray">
            <summary>
            Creates a new 2-Dimensional array and fills with values. This can be used for debugging purposes or for interop with other types. Changing the values here does *not* change the GridPointSeries3D
            </summary>
            <returns>The 2-Dimensional array representation of the GridPointSeries3D in Z,X orientation</returns>
        </member>
        <member name="P:SciChart.Charting3D.Model.BaseGridDataSeries3D`3.CachedYRange">
            <summary>
            Internal access to the cached YRange for testing.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.NonUniformGridDataSeries3D`1">
            <summary>
            <para>The NonUniformGridDataSeries3D wraps a 2D array of type <typeparamref name="TAllPoints"/> which become the Y-values (heights) in various RenderableSeries</para>
            <para>For instance, in the <see cref="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D"/> the Y-values map to the heights, whereas the 
            <see cref="!:NonUniformGridDataSeries3D&lt;TX,TY,TZ&gt;.StartX"/>, <see cref="!:NonUniformGridDataSeries3D&lt;TX,TY,TZ&gt;.StepX"/>, 
            <see cref="!:NonUniformGridDataSeries3D&lt;TX,TY,TZ&gt;.StartZ"/>, <see cref="!:NonUniformGridDataSeries3D&lt;TX,TY,TZ&gt;.StepZ"/> defines the X and Z values</para>
            </summary>
            <typeparam name="TAllPoints">The X,Y,Z type.</typeparam>
        </member>
        <member name="M:SciChart.Charting3D.Model.NonUniformGridDataSeries3D`1.#ctor(System.Int32,System.Int32,System.Func{System.Int32,`0},System.Func{System.Int32,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.NonUniformGridDataSeries3D`1"/> class.
            </summary>
            <param name="xSize">Size in the X direction.</param>
            <param name="zSize">Size in the Z direction.</param>
            <param name="xMapping">Defines the grid mapping to X data range.</param>
            <param name="zMapping">Defines the grid mapping to Y data range.</param>
        </member>
        <member name="T:SciChart.Charting3D.Model.NonUniformGridDataSeries3D`3">
            <summary>
            <para>The NonUniformGridDataSeries3D wraps a 2D array of type <typeparamref name="TY"/> which become the Y-values (heights) in various RenderableSeries</para>
            <para>For instance, in the <see cref="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D"/> the Y-values map to the heights, whereas the <see cref="!:StartX"/>, <see cref="!:StepX"/>, <see cref="!:StartZ"/>, <see cref="!:StepZ"/> defines the X and Z values</para>
            </summary>
            <typeparam name="TX">The type of the x.</typeparam>
            <typeparam name="TY">The type of the y.</typeparam>
            <typeparam name="TZ">The type of the z.</typeparam>
        </member>
        <member name="M:SciChart.Charting3D.Model.NonUniformGridDataSeries3D`3.#ctor(System.Int32,System.Int32,System.Func{System.Int32,`0},System.Func{System.Int32,`2})">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.NonUniformGridDataSeries3D`3"/> class.
            </summary>
            <param name="xSize">Size in the X direction.</param>
            <param name="zSize">Size in the Z direction.</param>
            <param name="xMapping">Defines the grid mapping to X data range.</param>
            <param name="zMapping">Defines the grid mapping to Y data range.</param>
        </member>
        <member name="P:SciChart.Charting3D.Model.NonUniformGridDataSeries3D`3.XRange">
            <summary>
            Gets the total extents of the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> in the X direction.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.NonUniformGridDataSeries3D`3.ZRange">
            <summary>
            Gets the total extents of the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> in the Z direction.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.NonUniformGridDataSeries3D`3.GetX(System.Int32)">
            <summary>
            Computes the X data-value at the specified index 
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.NonUniformGridDataSeries3D`3.GetZ(System.Int32)">
            <summary>
            Computes the Z data-value at the specified index 
            </summary>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Charting3D.Model.CustomFreeSurfaceDataSeries3D`1">
            <summary>
            The mesh data series defined by parametrized in regards to spherical coordinates system: Radius, Pole, Azimuth.
            </summary>
            <typeparam name="TAllPoints">The X,Y,Z type.</typeparam>
        </member>
        <member name="M:SciChart.Charting3D.Model.CustomFreeSurfaceDataSeries3D`1.#ctor(System.Int32,System.Int32,System.Func{System.Double,System.Double,System.Double},System.Func{System.Double,System.Double,System.Double},System.Func{System.Double,System.Double,System.Double},System.Func{System.Double,System.Double,System.Double,`0},System.Func{System.Double,System.Double,System.Double,`0},System.Func{System.Double,System.Double,System.Double,`0},System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.CustomFreeSurfaceDataSeries3D`1"/> class.
            </summary>
            <param name="uCount">The U dimension of the 2D grid.</param>
            <param name="vCount">The V dimension of the 2D grid.</param>
            <param name="radialDistanceFunction">Custom function that provides a value, treated as radius argument in X/Y/Z custom functions.</param>
            <param name="azimuthalAngleFunction">Custom function that provides a value, treated as azimuth argument in X/Y/Z custom functions.</param>
            <param name="polarAngleFunction">Custom function that provides a value, treated as pole argument in X/Y/Z custom functions.</param>
            <param name="xFunction">Custom function that provides the position X value, based on passed radius, azimuth and pole arguments.</param>
            <param name="yFunction">Custom function that provides the position Y value, based on passed radius, azimuth and pole arguments.</param>
            <param name="zFunction">Custom function that provides the position Z value, based on passed radius, azimuth and pole arguments.</param>
            <param name="uMin">The minimum value of U component of the 2D grid.</param>
            <param name="uMax">The maximum value of U component of the 2D grid.</param>
            <param name="vMin">The minimum value of V component of the 2D grid.</param>
            <param name="vMax">The maximum value of V component of the 2D grid.</param>
        </member>
        <member name="T:SciChart.Charting3D.Model.CustomFreeSurfaceDataSeries3D`3">
            <summary>
            The mesh data series defined by parametrized in regards to spherical coordinates system: Radius, Pole, Azimuth.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.CustomFreeSurfaceDataSeries3D`3.#ctor(System.Int32,System.Int32,System.Func{System.Double,System.Double,System.Double},System.Func{System.Double,System.Double,System.Double},System.Func{System.Double,System.Double,System.Double},System.Func{System.Double,System.Double,System.Double,`0},System.Func{System.Double,System.Double,System.Double,`1},System.Func{System.Double,System.Double,System.Double,`2},System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.CustomFreeSurfaceDataSeries3D`3"/> class.
            </summary>
            <param name="uCount">The U dimension of the 2D grid.</param>
            <param name="vCount">The V dimension of the 2D grid.</param>
            <param name="radialDistanceFunction">Custom function that provides a value, treated as radius argument in X/Y/Z custom functions.</param>
            <param name="azimuthalAngleFunction">Custom function that provides a value, treated as azimuth argument in X/Y/Z custom functions.</param>
            <param name="polarAngleFunction">Custom function that provides a value, treated as pole argument in X/Y/Z custom functions.</param>
            <param name="xFunction">Custom function that provides the position X value, based on passed radius, azimuth and pole arguments.</param>
            <param name="yFunction">Custom function that provides the position Y value, based on passed radius, azimuth and pole arguments.</param>
            <param name="zFunction">Custom function that provides the position Z value, based on passed radius, azimuth and pole arguments.</param>
            <param name="uMin">The minimum value of U component of the 2D grid.</param>
            <param name="uMax">The maximum value of U component of the 2D grid.</param>
            <param name="vMin">The minimum value of V component of the 2D grid.</param>
            <param name="vMax">The maximum value of V component of the 2D grid.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.CustomFreeSurfaceDataSeries3D`3.GetDataValue(System.Double,System.Double,`0@,`1@,`2@)">
            <summary>
            Gets the 3-Dimensional data value by specified UV index of the 2D grid in the surface.
            </summary>
            <param name="u">The U coordinate in the 2D grid space.</param>
            <param name="v">The V coordinate in the 2D grid space.</param>
            <param name="x">When method returns, contains a value of the X coordinate.</param>
            <param name="y">When method returns, contains a value of the Y coordinate.</param>
            <param name="z">When method returns, contains a value of the Z coordinate.</param>
        </member>
        <member name="T:SciChart.Charting3D.Model.CylindroidDataSeries3D`1">
            <summary>
            Data Series that defines the Cylindroid in 3-Dimensional space ( see: https://en.wikipedia.org/wiki/Cylinder#Cylindrical_surfaces ).
            </summary>
            <typeparam name="TAllPoints">The XZ and Y type.</typeparam>
        </member>
        <member name="M:SciChart.Charting3D.Model.CylindroidDataSeries3D`1.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.CylindroidDataSeries3D`1"/> class.
            </summary>
            <param name="uCount">The U dimension of the 2D grid.</param>
            <param name="vCount">The V dimension of the 2D grid.</param>
            <param name="uMin">The minimum value of U component of the 2D grid.</param>
            <param name="uMax">The maximum value of U component of the 2D grid.</param>
            <param name="vMin">The minimum value of V component of the 2D grid.</param>
            <param name="vMax">The maximum value of V component of the 2D grid.</param>
        </member>
        <member name="T:SciChart.Charting3D.Model.CylindroidDataSeries3D`2">
            <summary>
            Data Series that defines the Cylindroid in 3-Dimensional space ( see: https://en.wikipedia.org/wiki/Cylinder#Cylindrical_surfaces ).
            </summary>
            <typeparam name="TXZ">The type of the X and the Z.</typeparam>
            <typeparam name="TY">The type of the Y.</typeparam>
        </member>
        <member name="M:SciChart.Charting3D.Model.CylindroidDataSeries3D`2.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.CylindroidDataSeries3D`2"/> class.
            </summary>
            <param name="uCount">The U dimension of the 2D grid.</param>
            <param name="vCount">The V dimension of the 2D grid.</param>
            <param name="uMin">The minimum value of U component of the 2D grid.</param>
            <param name="uMax">The maximum value of U component of the 2D grid.</param>
            <param name="vMin">The minimum value of V component of the 2D grid.</param>
            <param name="vMax">The maximum value of V component of the 2D grid.</param>
        </member>
        <member name="P:SciChart.Charting3D.Model.CylindroidDataSeries3D`2.A">
            <summary>
            The A component of the Cylindroid.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.CylindroidDataSeries3D`2.B">
            <summary>
            The B component of the Cylindroid.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.CylindroidDataSeries3D`2.H">
            <summary>
            The height of the Cylindroid.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.CylindroidDataSeries3D`2.GetDataValue(System.Double,System.Double,`0@,`1@,`0@)">
            <summary>
            Gets the 3-Dimensional data value by specified UV index of the 2D grid in the surface.
            </summary>
            <param name="u">The U coordinate in the 2D grid space.</param>
            <param name="v">The V coordinate in the 2D grid space.</param>
            <param name="x">When method returns, contains a value of the X coordinate.</param>
            <param name="y">When method returns, contains a value of the Y coordinate.</param>
            <param name="z">When method returns, contains a value of the Z coordinate.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.CylindroidDataSeries3D`2.GetDataDisplacement(`0,System.Double,System.Double,`0@,`0@)">
            <summary>
            Gets X and Z offsets in regards to passed scale value and UV coordinates.
            </summary>
            <param name="dataValue">Value from the Height Map.</param>
            <param name="u">The U coordinate.</param>
            <param name="v">The V coordinate.</param>
            <param name="x">When method returns, contains a value of the X coordinate.</param>
            <param name="z">When method returns, contains a value of the Z coordinate.</param>
            <param name="y">When method returns, contains a value of the Y coordinate.</param>
        </member>
        <member name="T:SciChart.Charting3D.Model.XzDisplaceableFreeSurfaceDataSeries`2">
            <summary>
            Free Surface data series with the grid data, applied to its points displacing them along the XZ axes.
            </summary>
            <typeparam name="TXZ">Type of X and Z axes.</typeparam>
            <typeparam name="TY">Type of the Y axis.</typeparam>
        </member>
        <member name="P:SciChart.Charting3D.Model.XzDisplaceableFreeSurfaceDataSeries`2.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets Displacement Map value at the UV index.
            </summary>
            <param name="uIndex">The U index.</param>
            <param name="vIndex">The V index.</param>
            <returns>The item at this index</returns>
        </member>
        <member name="P:SciChart.Charting3D.Model.XzDisplaceableFreeSurfaceDataSeries`2.InternalArray">
            <summary>
            Accesses the internal array.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.XzDisplaceableFreeSurfaceDataSeries`2.ToPointSeries``1">
            <summary>
            Converts a DataSeries to a <see cref="T:SciChart.Charting3D.Model.IPointSeries3D" /> derived type, for use during the render pass
            </summary>
            <typeparam name="TPointSeries">The type of <see cref="T:SciChart.Charting3D.Model.IPointSeries3D" /></typeparam>
            <returns>
            The PointSeries, which may be used for drawing
            </returns>
            <exception cref="T:System.InvalidOperationException">Expected TPointSeries generic constraint to be ISurfaceDataSeries3D</exception>
        </member>
        <member name="M:SciChart.Charting3D.Model.XzDisplaceableFreeSurfaceDataSeries`2.GetDataDisplacement(`0,System.Double,System.Double,`0@,`0@)">
            <summary>
            Gets the displacement along the XZ axes in regards to Displacement Map data and UV coordinates.
            </summary>
            <param name="dataValue">Value of an element of the grid data data grid.</param>
            <param name="u">The U coordinate of the surface.</param>
            <param name="v">The V coordinate of the surface.</param>
            <param name="x">When method returns, contains the Displacement Map value along the X axis.</param>
            <param name="z">When method returns, contains the Displacement Map value along the Z axis.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.XzDisplaceableFreeSurfaceDataSeries`2.GetRowAt(System.Int32)">
            <summary>
            Returns the row at the specified Z Index
            </summary>
            <param name="zIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.XzDisplaceableFreeSurfaceDataSeries`2.CopyFrom(SciChart.Data.Model.GridData{`0})">
            <summary>
            Fills the ScalableXZFreeSurfaceDataSeries from a <see cref="T:SciChart.Data.Model.GridData`1"/> type.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.XzDisplaceableFreeSurfaceDataSeries`2.CopyFrom(`0[][])">
            <summary>
            Fills the ScalableXZFreeSurfaceDataSeries from a two dimensional array. Assumes the array is rectangular
            </summary>
            <param name="innerArray">The inner array.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.XzDisplaceableFreeSurfaceDataSeries`2.SetRowAt(System.Int32,`0[])">
            <summary>
            Sets the row at the specified Z index
            </summary>
            <param name="zIndex">Index of the z.</param>
            <param name="row">The row.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.XzDisplaceableFreeSurfaceDataSeries`2.PushRow(`0[])">
            <summary>
            Pushes a row into the array, which discards one old row in a First In First Out fashion. use this method to scroll the GridData in the Z-direction
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.XzDisplaceableFreeSurfaceDataSeries`2.GetDisplacedDataValue(System.Int32,System.Int32,System.Double,System.Double,`0@,`1@,`0@)">
            <summary>
            Gets the 3-Dimensional data value with the Displacement Map value applied.
            </summary>
            <param name="uIndex">The index of U coordinate in the 2D grid space.</param>
            <param name="vIndex">The index of V coordinate in the 2D grid space.</param>
            <param name="u">The U coordinate in the 2D grid space.</param>
            <param name="v">The V coordinate in the 2D grid space.</param>
            <param name="x">When method returns, contains a value of the X coordinate.</param>
            <param name="y">When method returns, contains a value of the Y coordinate.</param>
            <param name="z">When method returns, contains a value of the Z coordinate.</param>
        </member>
        <member name="T:SciChart.Charting3D.Model.PolarDataSeries3D`1">
            <summary>
            Data Series that defines the polar chart in 3D space.
            </summary>
            <typeparam name="TAllPoints">The type of the x.</typeparam>
        </member>
        <member name="M:SciChart.Charting3D.Model.PolarDataSeries3D`1.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.PolarDataSeries3D`1"/> class.
            </summary>
            <param name="uCount">The U dimension of the 2D grid.</param>
            <param name="vCount">The V dimension of the 2D grid.</param>
            <param name="uMin">The minimum value of U component of the 2D grid.</param>
            <param name="uMax">The maximum value of U component of the 2D grid.</param>
        </member>
        <member name="T:SciChart.Charting3D.Model.PolarDataSeries3D`2">
            <summary>
            Data Series that defines the polar chart in 3D space.
            </summary>
            <typeparam name="TPolar">The type of the x.</typeparam>
            <typeparam name="THeight">The type of the y.</typeparam>
        </member>
        <member name="M:SciChart.Charting3D.Model.PolarDataSeries3D`2.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.PolarDataSeries3D`2"/> class.
            </summary>
            <param name="uCount">The U dimension of the 2D grid.</param>
            <param name="vCount">The V dimension of the 2D grid.</param>
            <param name="uMin">The minimum value of U component of the 2D grid.</param>
            <param name="uMax">The maximum value of U component of the 2D grid.</param>
        </member>
        <member name="P:SciChart.Charting3D.Model.PolarDataSeries3D`2.A">
            <summary>
            The A component of ...
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.PolarDataSeries3D`2.B">
            <summary>
            The B component of ...
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.PolarDataSeries3D`2.GetDataValue(System.Double,System.Double,`0@,`1@,`0@)">
            <summary>
            Gets the 3-Dimensional data value by specified UV index of the 2D grid in the surface.
            </summary>
            <param name="u">The U coordinate in the 2D grid space.</param>
            <param name="v">The V coordinate in the 2D grid space.</param>
            <param name="x">When method returns, contains a value of the X coordinate.</param>
            <param name="y">When method returns, contains a value of the Y coordinate.</param>
            <param name="z">When method returns, contains a value of the Z coordinate.</param>
        </member>
        <member name="T:SciChart.Charting3D.Model.EllipsoidDataSeries3D`1">
            <summary>
            Data Series that defines the Ellipsoid in 3-Dimensional space by the Standard equation ( see: https://en.wikipedia.org/wiki/Ellipsoid#Standard_equation ).
            </summary>
            <typeparam name="TXYZ">The type of the X, Y, and Z axes.</typeparam>
        </member>
        <member name="M:SciChart.Charting3D.Model.EllipsoidDataSeries3D`1.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.EllipsoidDataSeries3D`1"/> class.
            </summary>
            <param name="uCount">The U dimension of the 2D grid.</param>
            <param name="vCount">The V dimension of the 2D grid.</param>
            <param name="uMin">The minimum value of U component of the 2D grid.</param>
            <param name="uMax">The maximum value of U component of the 2D grid.</param>
            <param name="vMin">The minimum value of V component of the 2D grid.</param>
            <param name="vMax">The maximum value of V component of the 2D grid.</param>
        </member>
        <member name="P:SciChart.Charting3D.Model.EllipsoidDataSeries3D`1.A">
            <summary>
            The A component of the Standard ellipsoid equation.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.EllipsoidDataSeries3D`1.B">
            <summary>
            The B component of the Standard ellipsoid equation.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.EllipsoidDataSeries3D`1.C">
            <summary>
            The C component of the Standard ellipsoid equation.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.EllipsoidDataSeries3D`1.GetDataValue(System.Double,System.Double,`0@,`0@,`0@)">
            <summary>
            Gets the 3-Dimensional coordinate by specified U and V index of the surface.
            </summary>
            <param name="u">The U coordinate.</param>
            <param name="v">The V coordinate.</param>
            <param name="x">When method returns, contains a value of the X coordinate.</param>
            <param name="y">When method returns, contains a value of the Y coordinate.</param>
            <param name="z">When method returns, contains a value of the Z coordinate.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.EllipsoidDataSeries3D`1.GetDataDisplacement(`0,System.Double,System.Double,`0@,`0@,`0@)">
            <summary>
            Gets the displacement along the XZ axes in regards to Displacement Map data and UV coordinates.
            </summary>
            <param name="dataValue">Value of an element of the grid data data grid.</param>
            <param name="u">The U coordinate of the surface.</param>
            <param name="v">The V coordinate of the surface.</param>
            <param name="x">When method returns, contains the the Displacement Map value along the X axis.</param>
            <param name="y">When method returns, contains the the Displacement Map value along the Y axis.</param>
            <param name="z">When method returns, contains the the Displacement Map value along the Z axis.</param>
        </member>
        <member name="T:SciChart.Charting3D.Model.XzDisplaceableFreeSurfacePointSeries`2">
            <summary>
            This contains the result of resampling or conversion from <see cref="T:SciChart.Charting3D.Model.XzDisplaceableFreeSurfaceDataSeries`2"/> 
            to a render-loop compatible collection
            </summary>
            <typeparam name="TXZ">Type of X and Z Axes.</typeparam>
            <typeparam name="TY">Type of the Y Axis.</typeparam>
        </member>
        <member name="P:SciChart.Charting3D.Model.XzDisplaceableFreeSurfacePointSeries`2.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets Displacement Map value as double at the UV index.
            </summary>
            <param name="uIndex">The U index.</param>
            <param name="vIndex">The V index.</param>
            <returns>The item at this index</returns>
        </member>
        <member name="P:SciChart.Charting3D.Model.XzDisplaceableFreeSurfacePointSeries`2.IsAxesPropagationAbsolute">
            <summary>
            Gets value determining whether the displacement is absolute.
            This means that surface is displaced by a value from the displacement map
            by specified displacement axes absolutely, ignoring its relative direction
            from the origin.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.XzDisplaceableFreeSurfacePointSeries`2.DisplacementAxes">
            <summary>
            Gets axes by which surface can be displaced.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.IFreeSurfaceDataSeries3D">
            <summary>
            Defines the base interface to a <see cref="T:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3"/>, the data source for various 3D RenderableSeries 
            such as <see cref="T:SciChart.Charting3D.Model.EllipsoidDataSeries3D`1"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IFreeSurfaceDataSeries3D.UCount">
            <summary>
            Gets number of U segments of the 2D grid.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IFreeSurfaceDataSeries3D.VCount">
            <summary>
            Gets number of V segments of the 2D grid.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3">
            <summary>
            2D grid based free shaped 3D surface.
            </summary>
            <typeparam name="TX">The type of the x.</typeparam>
            <typeparam name="TY">The type of the y.</typeparam>
            <typeparam name="TZ">The type of the z.</typeparam>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3.OffsetX">
            <summary>
            Gets or sets a data offset by X axis of the Surface.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3.OffsetY">
            <summary>
            Gets or sets a data offset by Y axis of the Surface.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3.OffsetZ">
            <summary>
            Gets or sets a data offset by Z axis of the Surface.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3.UCount">
            <summary>
            Gets number of U segments of the 2D grid.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3.VCount">
            <summary>
            Gets number of V segments of the 2D grid.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3.XRange">
            <summary>
            Gets the total extents of the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> in the X direction.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3.YRange">
            <summary>
            Gets the total extents of the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> in the Y direction.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3.ZRange">
            <summary>
            Gets the total extents of the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> in the Z direction.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3.IsDirty">
            <summary>
            Gets or sets a value indicating whether this instance is dirty. If dirty, any cached data must be re-calculated. You can set this value = true to force recalculation of caches 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3.ToPointSeries``1">
            <summary>
            Converts a DataSeries to a <see cref="T:SciChart.Charting3D.Model.IPointSeries3D" /> derived type, for use during the render pass
            </summary>
            <typeparam name="TPointSeries">The type of <see cref="T:SciChart.Charting3D.Model.IPointSeries3D" /></typeparam>
            <returns>
            The PointSeries, which may be used for drawing
            </returns>
            <exception cref="T:System.InvalidOperationException">Expected TPointSeries generic constraint to be ISurfaceDataSeries3D</exception>
        </member>
        <member name="M:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3.GetDataValue(System.Double,System.Double,`0@,`1@,`2@)">
            <summary>
            Gets the 3-Dimensional data value by specified UV index of the 2D grid in the surface.
            </summary>
            <param name="u">The U coordinate in the 2D grid space.</param>
            <param name="v">The V coordinate in the 2D grid space.</param>
            <param name="x">When method returns, contains a value of the X coordinate.</param>
            <param name="y">When method returns, contains a value of the Y coordinate.</param>
            <param name="z">When method returns, contains a value of the Z coordinate.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3.GetDisplacedDataValue(System.Int32,System.Int32,System.Double,System.Double,`0@,`1@,`2@)">
            <summary>
            Gets the 3-Dimensional data value with the Displacement Map value applied.
            </summary>
            <param name="uIndex">The index of U coordinate in the 2D grid space.</param>
            <param name="vIndex">The index of V coordinate in the 2D grid space.</param>
            <param name="u">The U coordinate in the 2D grid space.</param>
            <param name="v">The V coordinate in the 2D grid space.</param>
            <param name="x">When method returns, contains a value of the X coordinate.</param>
            <param name="y">When method returns, contains a value of the Y coordinate.</param>
            <param name="z">When method returns, contains a value of the Z coordinate.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3.GetU(System.Int32)">
            <summary>
            Gets the U coordinate by passed index of the 2D grid.
            </summary>
            <param name="index">Index of the U segment of the 2D grid.</param>
            <returns>The U coordinate.</returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3.GetV(System.Int32)">
            <summary>
            Gets the V coordinate by passed index of the 2D grid.
            </summary>
            <param name="index">Index of the V segment of the 2D grid.</param>
            <returns>The V coordinate.</returns>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3.CachedXRange">
            <summary>
            Internal access to the cached XRange for testing.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3.CachedYRange">
            <summary>
            Internal access to the cached YRange for testing.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3.CachedZRange">
            <summary>
            Internal access to the cached ZRange for testing.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.IFreeSurfacePointSeries3D">
            <summary>
            This contains the result of resampling or conversion from <see cref="T:SciChart.Charting3D.Model.IFreeSurfaceDataSeries3D"/> 
            to a render-loop compatible collection
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IFreeSurfacePointSeries3D.UCount">
            <summary>
            Gets number of U segments of the 2D grid.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IFreeSurfacePointSeries3D.VCount">
            <summary>
            Gets number of V segments of the 2D grid.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IFreeSurfacePointSeries3D.OffsetXAsDouble">
            <summary>
            Gets a data offset by X axis of the Surface represented in <see cref="T:System.Double"/> type.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IFreeSurfacePointSeries3D.OffsetYAsDouble">
            <summary>
            Gets a data offset by Y axis of the Surface represented in <see cref="T:System.Double"/> type.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IFreeSurfacePointSeries3D.OffsetZAsDouble">
            <summary>
            Gets a data offset by Z axis of the Surface represented in <see cref="T:System.Double"/> type.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.IFreeSurfacePointSeries3D.GetU(System.Int32)">
            <summary>
            Gets the U coordinate by passed index of the 2D grid.
            </summary>
            <param name="index">Index of the U segment of the 2D grid.</param>
            <returns>The U coordinate.</returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.IFreeSurfacePointSeries3D.GetV(System.Int32)">
            <summary>
            Gets the V coordinate by passed index of the 2D grid.
            </summary>
            <param name="index">Index of the V segment of the 2D grid.</param>
            <returns>The V coordinate.</returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.IFreeSurfacePointSeries3D.GetValueAsDouble(System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets a value at specified UV coordinate represented in <see cref="T:System.Double"/> type.
            </summary>
            <param name="u">The U coordinate.</param>
            <param name="v">The V coordinate.</param>
            <param name="xAsDouble">When this method returns, contains a value by the X axis.</param>
            <param name="yAsDouble">When this method returns, contains a value by the Y axis.</param>
            <param name="zAsDouble">When this method returns, contains a value by the Z axis.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.IFreeSurfacePointSeries3D.GetValueWithOffsetAsDouble(System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets a value at specified index of the UV coordinate represented in <see cref="T:System.Double"/> type.
            </summary>
            <param name="uIndex">The index of the U coordinate.</param>
            <param name="vIndex">The index of the V coordinate.</param>
            <param name="xAsDouble">When this method returns, contains a value by the X axis.</param>
            <param name="yAsDouble">When this method returns, contains a value by the Y axis.</param>
            <param name="zAsDouble">When this method returns, contains a value by the Z axis.</param>
        </member>
        <member name="T:SciChart.Charting3D.Model.FreeSurfacePointSeries3D`3">
            <summary>
            This contains the result of resampling or conversion from <see cref="T:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3"/> 
            to a render-loop compatible collection
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.FreeSurfacePointSeries3D`3.#ctor(SciChart.Charting3D.Model.FreeSurfaceDataSeries3D{`0,`1,`2})">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.FreeSurfacePointSeries3D`3"/> class.
            </summary>
            <param name="dataSeries">The free surface data series.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.FreeSurfacePointSeries3D`3.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfacePointSeries3D`3.UCount">
            <summary>
            Gets number of U segments of the 2D grid.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfacePointSeries3D`3.VCount">
            <summary>
            Gets number of V segments of the 2D grid.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfacePointSeries3D`3.OffsetXAsDouble">
            <summary>
            Gets a data offset by X axis of the Surface represented in <see cref="T:System.Double"/> type.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfacePointSeries3D`3.OffsetYAsDouble">
            <summary>
            Gets a data offset by Y axis of the Surface represented in <see cref="T:System.Double"/> type.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfacePointSeries3D`3.OffsetZAsDouble">
            <summary>
            Gets a data offset by Z axis of the Surface represented in <see cref="T:System.Double"/> type.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.FreeSurfacePointSeries3D`3.GetValueAsDouble(System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets a value at specified UV coordinate represented in <see cref="T:System.Double"/> type.
            </summary>
            <param name="u">The U coordinate.</param>
            <param name="v">The V coordinate.</param>
            <param name="xAsDouble">When this method returns, contains a value by the X axis.</param>
            <param name="yAsDouble">When this method returns, contains a value by the Y axis.</param>
            <param name="zAsDouble">When this method returns, contains a value by the Z axis.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.FreeSurfacePointSeries3D`3.GetValueWithOffsetAsDouble(System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets a value at specified index of the UV coordinate represented in <see cref="T:System.Double"/> type.
            </summary>
            <param name="uIndex">The index of the U coordinate.</param>
            <param name="vIndex">The index of the V coordinate.</param>
            <param name="xAsDouble">When this method returns, contains a value by the X axis.</param>
            <param name="yAsDouble">When this method returns, contains a value by the Y axis.</param>
            <param name="zAsDouble">When this method returns, contains a value by the Z axis.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.FreeSurfacePointSeries3D`3.GetU(System.Int32)">
            <summary>
            Gets the U coordinate by passed index of the 2D grid.
            </summary>
            <param name="index">Index of the U segment of the 2D grid.</param>
            <returns>The U coordinate.</returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.FreeSurfacePointSeries3D`3.GetV(System.Int32)">
            <summary>
            Gets the V coordinate by passed index of the 2D grid.
            </summary>
            <param name="index">Index of the V segment of the 2D grid.</param>
            <returns>The V coordinate.</returns>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfacePointSeries3D`3.SyncRoot">
            <summary>
            Gets the Synchronization object
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.FreeSurfacePointSeries3D`3.IsDirty">
            <summary>
            Gets or sets a value indicating whether the wrapped DataSeries is Dirty. This will be set to True when the DataSeries has changes, and must be set to False after creating a 3D mesh
            </summary>
            <remarks>
            By setting this to FALSE after a mesh is created, you can cache meshes until the data changes again
            </remarks>
        </member>
        <member name="T:SciChart.Charting3D.Model.DataSeries.Waterfall.IWaterfallDataSeries3D">
            <summary>
            Defines the base interface to a <see cref="T:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`3"/>, the data source for the <see cref="T:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D"/>. 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries.Waterfall.IWaterfallDataSeries3D.SelectRows(System.Collections.Generic.IList{System.Int32},System.Boolean)">
            <summary>
            Performs selection or deselection of data rows at specified <paramref name="zIndices"/>.
            </summary>
            <param name="zIndices">The indices of row to select.</param>
            <param name="isSelected">Value indicating whether select or deselect the rows.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries.Waterfall.IWaterfallDataSeries3D.GetSelectedRows">
            <summary>
            Returns a list of Z indices of selected data rows.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`1">
            <summary>
            <para>The WaterfallDataSeries3D wraps a 2D array of type <typeparamref name="TAllPoints"/> which become the Y-values (heights) in various RenderableSeries.</para>
            <para>For instance, in the <see cref="T:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D"/> the Y-values map to the heights of chart slices, whereas the <see cref="!:StartX"/>, <see cref="!:StepX"/>, <see cref="!:StartZ"/>, <see cref="!:StepZ"/> defines the X and Z values.</para>
            </summary>
            <typeparam name="TAllPoints">The type of the X, Y, Z.</typeparam>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an instance of a <see cref="T:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`1"/>.
            </summary>
            <param name="xSize">The size of every data row.</param>
            <param name="zSize">The amount of data rows.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`1.#ctor(System.Int32,`0[])">
            <summary>
            Creates an instance of a <see cref="T:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`1"/>.
            </summary>
            <param name="xSize">The size of every data row.</param>
            <param name="zValues">These Z values define positions of every data row.</param>
        </member>
        <member name="T:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`3">
            <summary>
            <para>The WaterfallDataSeries3D wraps a 2D array of type <typeparamref name="TY"/> which become the Y-values (heights) in various RenderableSeries.</para>
            <para>For instance, in the <see cref="T:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D"/> the Y-values map to the heights of chart slices, whereas the <see cref="!:StartX"/>, <see cref="!:StepX"/>, <see cref="!:StartZ"/>, <see cref="!:StepZ"/> defines the X and Z values.</para>
            </summary>
            <typeparam name="TX">The type of the x.</typeparam>
            <typeparam name="TY">The type of the y.</typeparam>
            <typeparam name="TZ">The type of the z.</typeparam>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`3.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an instance of a <see cref="T:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`3"/>.
            </summary>
            <param name="xSize">The size of every data row.</param>
            <param name="zSize">The amount of data rows.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`3.#ctor(System.Int32,`2[])">
            <summary>
            Creates an instance of a <see cref="T:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`3"/>.
            </summary>
            <param name="xSize">The size of every data row.</param>
            <param name="zValues">These Z values define positions of every data row.</param>
        </member>
        <member name="P:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`3.ZRange">
            <summary>
            Gets the total extents of the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> in the Z direction.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`3.GetZ(System.Int32)">
            <summary>
            Returns the Z data-value at the specified index.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`3.Clear(System.Int32,System.Int32)">
            <summary>
            Clears the <see cref="T:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`3"/>, resetting its X,Z size.
            </summary>
            <param name="xSize">The new XSize.</param>
            <param name="zSize">The new ZSize.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`3.GetSelectedRows">
            <summary>
            Returns a list of Z indices of selected data rows.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`3.PushRow(`2,`1[])">
            <summary>
            Pushes a row into the array, which discards one old row in the First In First Out fashion. Use this method to scroll the Waterfall in the Z-direction.
            </summary>
            <param name="zValue">The new Z value.</param>
            <param name="yValues">The new Y row.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`3.SelectRows(System.Collections.Generic.IList{System.Int32},System.Boolean)">
            <summary>
            Performs selection or deselection of data rows at specified <paramref name="zIndices"/>.
            </summary>
            <param name="zIndices">The indices of row to select.</param>
            <param name="isSelected">Value indicating whether select or deselect the rows.</param>
        </member>
        <member name="T:SciChart.Charting3D.Model.DataSeries3D">
            <summary>
            A generic abstract base class which defines a generic DataSeries which contains 1..N columns, 
            such as X,Y,Z in the case of plain X,Y,Z data.
            </summary>
            <seealso cref="T:SciChart.Charting3D.Model.IDataSeries3D"/>
            <seealso cref="T:SciChart.Charting.Model.DataSeries.IXyzDataSeries`3"/>
            <seealso cref="T:SciChart.Charting.Model.DataSeries.XyzDataSeries`3"/>
            <see cref="!:IUniformGridDataSeries3D"/>
            <see cref="T:SciChart.Charting3D.Model.UniformGridDataSeries3D`1"/>
            <seealso cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>
            <remarks>DataSeries3D are assigned to the RenderableSeries3D via the <see cref="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.DataSeries"/> property. Any time a DataSeries3D is appended to, the
            parent <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/> will be redrawn.</remarks>
        </member>
        <member name="F:SciChart.Charting3D.Model.DataSeries3D.SyncRoot">
            <summary>
            The Synchronization Object for the DataSeries3D.
            </summary>
        </member>
        <member name="E:SciChart.Charting3D.Model.DataSeries3D.DataSeriesChanged">
            <summary>
            Event raised whenever points are added to, removed or one or more DataSeries3D properties changes, requiring a redraw of the parent SciChartSurface.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.DataSeries3D.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.DataSeries3D.SeriesName">
            <summary>
            Gets or sets the name of this series.
            </summary>
            <value>The name of the series.</value>
        </member>
        <member name="P:SciChart.Charting3D.Model.DataSeries3D.ParentSurface">
            <summary>
            Gets or sets the parent <see cref="T:SciChart.Charting3D.ISciChart3DSurface" /> which this <see cref="T:SciChart.Charting3D.Model.IDataSeries3D" /> instance is attached to.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.DataSeries3D.XRange">
            <summary>
            Gets the total extents of the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> in the X direction.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.DataSeries3D.YRange">
            <summary>
            Gets the total extents of the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> in the Y direction.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.DataSeries3D.ZRange">
            <summary>
            Gets the total extents of the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> in the Z direction.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.DataSeries3D.IsDirty">
            <summary>
            Gets or sets a value indicating whether this instance is dirty. If dirty, any cached data must be re-calculated. You can set this value to <value>True</value> to force recalculation of caches.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries3D.OnDataSeriesChanged(SciChart.Charting.Model.DataSeries.DataSeriesUpdate,SciChart.Charting.Model.DataSeries.DataSeriesAction)">
            <summary>
            Raises the <see cref="E:SciChart.Charting3D.Model.DataSeries3D.DataSeriesChanged"/> event. May be called by DataSeries3D or by user code to trigger a redraw on the ParentSurface. The event is not raised while <see cref="P:SciChart.Core.Framework.ISuspendable.IsSuspended" /> is <value>True</value>.
            <seealso cref="T:SciChart.Charting.Model.DataSeries.DataSeriesUpdate"/>
            </summary>
            <param name="dsUpdate"></param>
            <param name="dataSeriesAction"></param>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries3D.ToPointSeries``1">
            <summary>
            Converts a DataSeries to a <see cref="T:SciChart.Charting3D.Model.IPointSeries3D" /> derived type, for use during the render pass.
            </summary>
            <typeparam name="TPointSeries">The type of <see cref="T:SciChart.Charting3D.Model.IPointSeries3D" /></typeparam>
            <returns>
            The PointSeries, which may be used for drawing.
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries3D.Clear">
            <summary>
            Clears the DataSeries.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries3D.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued.
            </summary>
            <returns>
            The disposable Update Suspender.
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries3D.ResumeUpdates(SciChart.Core.Framework.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by <see cref="T:SciChart.Core.Framework.IUpdateSuspender"/>.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries3D.InvalidateParentSurface(SciChart.Charting.Model.DataSeries.RangeMode)">
            <summary>
            May be called to trigger a redraw on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" />. This method is extremely useful
            when <see cref="T:SciChart.Charting3D.Model.IDataSeries3D" /> are in a ViewModel and bound via MVVM to <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D" />.
            Please see the <paramref name="rangeMode" /> parameter for invalidation options.
            </summary>
            <param name="rangeMode">Provides <see cref="T:SciChart.Charting.Model.DataSeries.RangeMode" /> invalidation options for the parent surface.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries3D.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, <see cref="M:SciChart.Charting3D.Model.DataSeries3D.ResumeUpdates(SciChart.Core.Framework.IUpdateSuspender)"/> is called.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.DataSeries3D.GetBounds">
            <summary>
            Gets the bounding box for the data (containing <see cref="P:SciChart.Charting3D.Model.DataSeries3D.XRange"/>, <see cref="P:SciChart.Charting3D.Model.DataSeries3D.YRange"/>, <see cref="P:SciChart.Charting3D.Model.DataSeries3D.ZRange"/>).
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.IDoubleDoubleList">
            <summary>
            Defines the interface to a <see cref="T:SciChart.Charting3D.Model.DoubleDoubleList`1"/>: a class which wraps a two-dimensional jagged array of type T and allows conversion to double at index i,j
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IDoubleDoubleList.CountI">
            <summary>
            Gets the count of the inner array in the I-direction
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IDoubleDoubleList.CountJ">
            <summary>
            Gets the count of the inner array in the J-direction
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IDoubleDoubleList.Item(System.Int32,System.Int32)">
            <summary>
            Gets the and converts the item at index i,j to <see cref="T:System.Double"/> 
            </summary>
            <param name="i">The i index.</param>
            <param name="j">The j index.</param>
            <returns></returns>
        </member>
        <member name="P:SciChart.Charting3D.Model.IDoubleDoubleList.InnerArray">
            <summary>
            Gets the untyped inner array
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.DoubleDoubleList`1">
            <summary>
            A class which wraps a two-dimensional jagged array of type T and allows conversion to double at index i,j
            </summary>
            <typeparam name="T">The type of item</typeparam>
        </member>
        <member name="M:SciChart.Charting3D.Model.DoubleDoubleList`1.#ctor(`0[][],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.DoubleDoubleList`1"/> class.
            </summary>
            <param name="inputArray">The input array.</param>
            <param name="iCount">The i count.</param>
            <param name="jCount">The j count.</param>
        </member>
        <member name="P:SciChart.Charting3D.Model.DoubleDoubleList`1.CountI">
            <summary>
            Gets the count of the inner array in the I-direction
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.DoubleDoubleList`1.CountJ">
            <summary>
            Gets the count of the inner array in the J-direction
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.DoubleDoubleList`1.InnerArray">
            <summary>
            Gets the untyped inner array
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.DoubleDoubleList`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets the and converts the item at index i,j to <see cref="T:System.Double"/> 
            </summary>
            <param name="i">The i index.</param>
            <param name="j">The j index.</param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Charting3D.Model.IDoubleList">
            <summary>
            Defines the interface to a <see cref="T:SciChart.Charting3D.Model.DoubleList`1"/>: a class which wraps anarray of type T and allows conversion to double at index i,j
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IDoubleList.Count">
            <summary>
            Gets the of the inner array
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IDoubleList.Item(System.Int32)">
            <summary>
            Gets and converts the i'th item to <see cref="T:System.Double"/> 
            </summary>
            <param name="index">The index.</param>
            <returns>The value at index i as <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.IDoubleList.GetAsDoubles(System.Double[])">
            <summary>
            Gets and converts the internal array as doubles, storing the value in outputArray
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.DoubleList`1">
            <summary>
            A class which wraps an array of type T and allows conversion to double at index i
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.DoubleList`1.#ctor(`0[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.DoubleList`1"/> class.
            </summary>
            <param name="inputArray">The input array.</param>
            <param name="count">The count.</param>
        </member>
        <member name="P:SciChart.Charting3D.Model.DoubleList`1.Count">
            <summary>
            Gets the of the inner array
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.DoubleList`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Double"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:System.Double"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.DoubleList`1.GetAsDoubles(System.Double[])">
            <summary>
            Gets and converts the internal array as doubles, storing the value in outputArray
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.UniformGridDataSeries3D`1">
            <summary>
            <para>The UniformGridDataSeries3D wraps a 2D array of type <typeparamref name="TAllPoints"/> which become the Y-values (heights) in various RenderableSeries</para>
            <para>For instance, in the <see cref="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D"/> the Y-values map to the heights, whereas the 
            <see cref="P:SciChart.Charting3D.Model.UniformGridDataSeries3D`3.StartX"/>, <see cref="P:SciChart.Charting3D.Model.UniformGridDataSeries3D`3.StepX"/>, 
            <see cref="P:SciChart.Charting3D.Model.UniformGridDataSeries3D`3.StartZ"/>, <see cref="P:SciChart.Charting3D.Model.UniformGridDataSeries3D`3.StepZ"/> defines the X and Z values</para>
            </summary>
            <typeparam name="TAllPoints">The X,Y,Z type.</typeparam>
        </member>
        <member name="M:SciChart.Charting3D.Model.UniformGridDataSeries3D`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.UniformGridDataSeries3D`1"/> class.
            </summary>
            <param name="xSize">Size in the X direction.</param>
            <param name="zSize">Size in the Z direction.</param>
        </member>
        <member name="T:SciChart.Charting3D.Model.UniformGridDataSeries3D`3">
            <summary>
            <para>The UniformGridDataSeries3D wraps a 2D array of type <typeparamref name="TY"/> which become the Y-values (heights) in various RenderableSeries</para>
            <para>For instance, in the <see cref="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D"/> the Y-values map to the heights, whereas the <see cref="P:SciChart.Charting3D.Model.UniformGridDataSeries3D`3.StartX"/>, <see cref="P:SciChart.Charting3D.Model.UniformGridDataSeries3D`3.StepX"/>, <see cref="P:SciChart.Charting3D.Model.UniformGridDataSeries3D`3.StartZ"/>, <see cref="P:SciChart.Charting3D.Model.UniformGridDataSeries3D`3.StepZ"/> defines the X and Z values</para>
            </summary>
            <typeparam name="TX">The type of the x.</typeparam>
            <typeparam name="TY">The type of the y.</typeparam>
            <typeparam name="TZ">The type of the z.</typeparam>
        </member>
        <member name="M:SciChart.Charting3D.Model.UniformGridDataSeries3D`3.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.UniformGridDataSeries3D`1"/> class.
            </summary>
            <param name="xSize">Size of the x.</param>
            <param name="zSize">Size of the z.</param>
        </member>
        <member name="P:SciChart.Charting3D.Model.UniformGridDataSeries3D`3.XRange">
            <summary>
            Gets the total extents of the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> in the X direction.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.UniformGridDataSeries3D`3.ZRange">
            <summary>
            Gets the total extents of the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> in the Z direction.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.UniformGridDataSeries3D`3.StartX">
            <summary>
            Gets the start X value, that is, the X data-value at this.InternalArray[0, z]
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.UniformGridDataSeries3D`3.StepX">
            <summary>
            Gets the step-X value, that is, the data-value size between each element in the grid in the X-direction
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.UniformGridDataSeries3D`3.StartZ">
            <summary>
            Gets the start Z value, that is, the Z data-value at this.InternalArray[x, 0]
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.UniformGridDataSeries3D`3.StepZ">
            <summary>
            Gets the step-Z value, that is, the data-value size between each element in the grid in the Z-direction
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.UniformGridDataSeries3D`3.GetX(System.Int32)">
            <summary>
            Computes the X data-value at the specified index 
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.UniformGridDataSeries3D`3.GetZ(System.Int32)">
            <summary>
            Computes the Z data-value at the specified index 
            </summary>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Charting3D.Model.IGridPointSeries3D">
            <summary>
            Defines the interface to a GridPointSeries3D - the result of resampling or conversion from <see cref="T:SciChart.Charting3D.Model.BaseGridDataSeries3D`3"/> 
            to a render-loop compatible collection
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IGridPointSeries3D.CountZ">
            <summary>
            Gets the count in the I direction
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IGridPointSeries3D.CountX">
            <summary>
            Gets the count in the J direction
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IGridPointSeries3D.Values">
            <summary>
            Gets the raw, wrapped values as <see cref="T:SciChart.Charting3D.Model.IDoubleDoubleList"/>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.IGridPointSeries3D.GetX(System.Int32)">
            <summary>
            Gets the x value at index j
            </summary>
            <param name="j">The j index.</param>
            <returns>The X-value as double</returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.IGridPointSeries3D.GetZ(System.Int32)">
            <summary>
            Gets the z value at index i
            </summary>
            <param name="i">The i index.</param>
            <returns>The Z-value as double</returns>
        </member>
        <member name="T:SciChart.Charting3D.Model.GridPointSeries3D`3">
            <summary>
            This contains the result of resampling or conversion from <see cref="T:SciChart.Charting3D.Model.BaseGridDataSeries3D`3"/> 
            to a render-loop compatible collection
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.GridPointSeries3D`3.#ctor(SciChart.Charting3D.Model.BaseGridDataSeries3D{`0,`1,`2})">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.GridPointSeries3D`3"/> class.
            </summary>
            <param name="dataSeries">The grid data series.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.GridPointSeries3D`3.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.GridPointSeries3D`3.CountZ">
            <summary>
            Gets the count in the I direction
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.GridPointSeries3D`3.CountX">
            <summary>
            Gets the count in the J direction
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.GridPointSeries3D`3.Values">
            <summary>
            Gets the raw, wrapped values as <see cref="T:SciChart.Charting3D.Model.IDoubleDoubleList" />
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.GridPointSeries3D`3.GetX(System.Int32)">
            <summary>
            Gets the x value at index j
            </summary>
            <param name="j">The j index.</param>
            <returns>
            The X-value as double
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.GridPointSeries3D`3.GetZ(System.Int32)">
            <summary>
            Gets the z value at index i
            </summary>
            <param name="i">The i index.</param>
            <returns>
            The Z-value as double
            </returns>
        </member>
        <member name="P:SciChart.Charting3D.Model.GridPointSeries3D`3.SyncRoot">
            <summary>
            Gets the Synchronization object
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.GridPointSeries3D`3.IsDirty">
            <summary>
            Gets or sets a value indicating whether the wrapped DataSeries is Dirty. This will be set to True when the DataSeries has changes, and must be set to False after creating a 3D mesh
            </summary>
            <remarks>
            By setting this to FALSE after a mesh is created, you can cache meshes until the data changes again
            </remarks>
        </member>
        <member name="T:SciChart.Charting3D.Model.IDataSeries3D">
            <summary>
            Defines the base interface to a DataSeries3D which provides a data-source for <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>.
            </summary>
            <seealso cref="T:SciChart.Charting3D.Model.DataSeries3D"/>
            <seealso cref="T:SciChart.Charting3D.Model.IDataSeries3D"/>    
            <seealso cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>
            <remarks>DataSeries are assigned to the RenderableSeries via the <see cref="P:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D.DataSeries"/> property. Any time a DataSeries is appended to, the
            parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> will be redrawn.</remarks>
        </member>
        <member name="E:SciChart.Charting3D.Model.IDataSeries3D.DataSeriesChanged">
            <summary>
            Event raised whenever points are added to, removed or one or more DataSeries3D properties changes, requiring a redraw of the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IDataSeries3D.SeriesName">
            <summary>
            Gets or sets the name of this series.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IDataSeries3D.ParentSurface">
            <summary>
            Gets or sets the parent <see cref="T:SciChart.Charting3D.ISciChart3DSurface" /> which this <see cref="T:SciChart.Charting3D.Model.IDataSeries3D" /> instance is attached to.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IDataSeries3D.XRange">
            <summary>
            Gets the total extents of the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> in the X direction.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IDataSeries3D.YRange">
            <summary>
            Gets the total extents of the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> in the Y direction.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IDataSeries3D.ZRange">
            <summary>
            Gets the total extents of the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> in the Z direction.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IDataSeries3D.IsDirty">
            <summary>
            Gets or sets a value indicating whether this instance is dirty. If dirty, any cached data must be re-calculated. You can set this value to <value>True</value> to force recalculation of caches. 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.IDataSeries3D.OnDataSeriesChanged(SciChart.Charting.Model.DataSeries.DataSeriesUpdate,SciChart.Charting.Model.DataSeries.DataSeriesAction)">
            <summary>
            Raises the <see cref="E:SciChart.Charting3D.Model.IDataSeries3D.DataSeriesChanged"/> event. May be called by DataSeries3D or by user code to trigger a redraw on the ParentSurface. The event is not raised while <see cref="P:SciChart.Core.Framework.ISuspendable.IsSuspended"/> is <value>True</value>.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.IDataSeries3D.ToPointSeries``1">
            <summary>
            Converts a DataSeries to a <see cref="T:SciChart.Charting3D.Model.IPointSeries3D"/> derived type, for use during the render pass
            </summary>
            <typeparam name="TPointSeries">The type of <see cref="T:SciChart.Charting3D.Model.IPointSeries3D"/></typeparam>
            <returns>The PointSeries, which may be used for drawing</returns>
        </member>
        <member name="M:SciChart.Charting3D.Model.IDataSeries3D.Clear">
            <summary>
            Clears the DataSeries.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.IDataSeries3D.GetBounds">
            <summary>
            Gets the bounding box for the data (containing <see cref="P:SciChart.Charting3D.Model.IDataSeries3D.XRange"/>, <see cref="P:SciChart.Charting3D.Model.IDataSeries3D.YRange"/>, <see cref="P:SciChart.Charting3D.Model.IDataSeries3D.ZRange"/>).
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.IPointSeries3D">
            <summary>
            A Placeholder interface for PointSeries - the result of resampling or conversion from DataSeries to a render-loop compatible collection
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IPointSeries3D.SyncRoot">
            <summary>
            Gets the Synchronization object
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IPointSeries3D.IsDirty">
            <summary>
            Gets or sets a value indicating whether the wrapped DataSeries is Dirty. This will be set to True when the DataSeries has changes, and must be set to False after creating a 3D mesh
            </summary>
            <remarks>
            By setting this to FALSE after a mesh is created, you can cache meshes until the data changes again
            </remarks>
        </member>
        <member name="T:SciChart.Charting3D.Model.IPointMetadata3D">
            <summary>
            Provides the interface for metadata for 3D vertices.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IPointMetadata3D.Parent">
            <summary>
            Gets or sets the parent <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/>.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IPointMetadata3D.IsSelected">
            <summary>
            Gets or sets a value indicating whether this data-point is selected.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IPointMetadata3D.VertexColor">
            <summary>
            Gets or sets the overridden VertexColor for this point. Defaults to null (which means use default color provided by the <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>.
            </summary>   
        </member>
        <member name="P:SciChart.Charting3D.Model.IPointMetadata3D.PointScale">
            <summary>
            Gets or sets the custom scaling for this point. Defaults to 1.0.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.PointMetadata3D">
            <summary>
            A metadata class for 3D vertices. Implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>. Stores scale, color, IsSelected and a user-defined object (tag)
            </summary>
        </member>
        <member name="E:SciChart.Charting3D.Model.PointMetadata3D.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.PointMetadata3D.#ctor(System.Nullable{System.Windows.Media.Color},System.Single,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.PointMetadata3D"/> class.
            </summary>
            <param name="vertexColor">Color of the vertex.</param>
            <param name="pointScale">The point scale.</param>
            <param name="isSelected">if set to <c>true</c> [is selected].</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="P:SciChart.Charting3D.Model.PointMetadata3D.Parent">
            <summary>
            Gets or sets the parent <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.PointMetadata3D.PointScale">
            <summary>
            Gets or sets the custom scaling for this point. Defaults to 1.0
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.PointMetadata3D.VertexColor">
            <summary>
            Gets or sets the overridden VertexColor for this point. Defaults to null (which means use default color provided by the <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Model.PointMetadata3D.IsSelected">
            <summary>
            Gets or sets a value indicating whether this data-point is selected.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.PointMetadata3D.Tag">
            <summary>
            Gets or sets a custom object or Tag. You can pass through your own Tags to PointMetadata3D and use it 
            in <see cref="T:SciChart.Charting3D.RenderableSeries.IPaletteProvider3D"/>, or tooltips or selection callbacks
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.PointMetadata3D.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:SciChart.Charting3D.Model.PointMetadata3D.PropertyChanged"/> event 
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.PointMetadata3D.OnParentDataSeriesChanged(SciChart.Charting.Model.DataSeries.DataSeriesUpdate,SciChart.Charting.Model.DataSeries.DataSeriesAction)">
            <summary>
            Called when the parent data-series changes 
            </summary>
            <param name="dsUpdate">The type of update.</param>
            <param name="dsAction"></param>
        </member>
        <member name="T:SciChart.Charting3D.Model.XyzDataPointViewModel`1">
            <summary>
            Provides a ViewModel for an XYZ Data-point to assist binding in tooltips and data-point selection
            </summary>
            <typeparam name="TAllPoints">The TX,TY and TZ type of the data</typeparam>    
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDataPointViewModel`1.#ctor(System.Int32,`0,`0,`0,SciChart.Charting3D.Model.IPointMetadata3D)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.XyzDataPointViewModel`1"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="pointMetadata3D">The point metadata3 d.</param>
        </member>
        <member name="T:SciChart.Charting3D.Model.XyzDataPointViewModel`3">
            <summary>
            Provides a ViewModel for an XYZ Data-point to assist binding in tooltips and data-point selection
            </summary>
            <typeparam name="TX">The TX type of the data</typeparam>
            <typeparam name="TY">The TY type of the data</typeparam>
            <typeparam name="TZ">The TZ type of the data</typeparam>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDataPointViewModel`3.#ctor(System.Int32,`0,`1,`2,SciChart.Charting3D.Model.IPointMetadata3D)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.XyzDataPointViewModel`3"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="pointMetadata3D">The point metadata3 d.</param>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDataPointViewModel`3.Index">
            <summary>
            Gets or sets the index to the data
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDataPointViewModel`3.X">
            <summary>
            Gets or sets the x value
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDataPointViewModel`3.Y">
            <summary>
            Gets or sets the y value
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDataPointViewModel`3.Z">
            <summary>
            Gets or sets the z value
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDataPointViewModel`3.PointMetadata3D">
            <summary>
            Gets or sets the <see cref="P:SciChart.Charting3D.Model.XyzDataPointViewModel`3.PointMetadata3D"/>
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.IXyzDataSeries3D">
            <summary>
            Defines the index to an <see cref="T:SciChart.Charting3D.Model.XyzDataSeries3D`3"/>, a <see cref="T:SciChart.Charting3D.Model.DataSeries3D"/> derived type which is a stream of X,Y,Z values
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IXyzDataSeries3D.Count">
            <summary>
            Gets the count of the IXyzDataSeries3D
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.IXyzDataSeries3D.PerformSelection(System.Boolean,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Performs selection on the provided indices. If indices == null applies the flag to all data-points, else, applies the flag just to the defined data-points
            </summary>
            <param name="isSelected"></param>
            <param name="indices"></param>
        </member>
        <member name="T:SciChart.Charting3D.Model.IXyzDataSeries3D`3">
            <summary>
            Defines the index to an <see cref="T:SciChart.Charting3D.Model.XyzDataSeries3D`3"/>, a <see cref="T:SciChart.Charting3D.Model.DataSeries3D"/> derived type which is a stream of X,Y,Z values
            </summary>
            <typeparam name="TX">The type of the x.</typeparam>
            <typeparam name="TY">The type of the y.</typeparam>
            <typeparam name="TZ">The type of the z.</typeparam>
        </member>
        <member name="P:SciChart.Charting3D.Model.IXyzDataSeries3D`3.XValues">
            <summary>
            Gets the Z values
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IXyzDataSeries3D`3.YValues">
            <summary>
            Gets the Y values
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IXyzDataSeries3D`3.ZValues">
            <summary>
            Gets the Z values
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IXyzDataSeries3D`3.WValues">
            <summary>
            Gets the W values, which are optional point-metadatas per Xyzw point
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.IXyzDataSeries3D`3.Append(`0,`1,`2,SciChart.Charting3D.Model.IPointMetadata3D)">
            <summary>
            Appends a single X, Y0, Y1 point to the series, automatically triggering a redraw
            </summary>
            <param name="x">The X-value</param>
            <param name="y">The Y-value</param>
            <param name="z">The Z-value</param>
            <param name="w">The W-value, which contains metadata about the point</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.IXyzDataSeries3D`3.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{SciChart.Charting3D.Model.IPointMetadata3D})">
            <summary>
            Appends a collection of X, Y0 and Y1 points to the series, automatically triggering a redraw
            </summary>
            <param name="x">The X-values</param>
            <param name="y">The Y-values</param>
            <param name="z">The Z-values</param>
            /// <param name="w">The W-values, which contain metadata about the point</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.IXyzDataSeries3D`3.Update(System.Int32,`0,`1,`2,SciChart.Charting3D.Model.IPointMetadata3D)">
            <summary>
            Updates (overwrites) the Y0, Y1 values at the specified X-value. Automatically triggers a redraw
            </summary>
            <param name="index">The Index to update</param>
            <param name="x">The X-value</param>
            <param name="y">The Y-value</param>
            <param name="z">The Z-value</param>
            <param name="w">The W-value, which contains metadata about the point</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.IXyzDataSeries3D`3.Insert(System.Int32,`0,`1,`2,SciChart.Charting3D.Model.IPointMetadata3D)">
            <summary>
            Inserts an X, Y, Z point at the specified index. Automatically triggers a redraw
            </summary>
            <param name="index">The index to insert at</param>
            <param name="x">The X-value</param>
            <param name="y">The Y-value</param>
            <param name="z">The Z-value</param>
            <param name="w">The W-value, which contains metadata about the point</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.IXyzDataSeries3D`3.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{SciChart.Charting3D.Model.IPointMetadata3D})">
            <summary>
            Inserts a collection of X, Y and Z points at the specified index, automatically triggering a redraw
            </summary>
            <param name="startIndex">The index to insert at</param>
            <param name="x">The X-values</param>
            <param name="y">The Y-values</param>
            <param name="z">The Z-values</param>
            <param name="w">The W-values, which contains metadata about the point</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.IXyzDataSeries3D`3.RemoveAt(System.Int32)">
            <summary>
            Removes the X,Y,Z values at the specified index
            </summary>
            <param name="index">The index to remove at</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.IXyzDataSeries3D`3.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of points starting from the specified index
            </summary>
            <param name="startIndex">Starting index of the range of elements to remove</param>
            <param name="count">The number of elements to remove</param>
        </member>
        <member name="T:SciChart.Charting3D.Model.XyzDataSeries3D`1">
            <summary>
            An XyzDataSeries3D is a <see cref="T:SciChart.Charting3D.Model.DataSeries3D"/> type which provides a stream of X,Y,Z points of type <typeparamref name="TAllPoints"/>
            </summary>
            <typeparam name="TAllPoints">The type of all points.</typeparam>
        </member>
        <member name="T:SciChart.Charting3D.Model.XyzDataSeries3D`3">
            <summary>
            An XyzDataSeries3D is a <see cref="T:SciChart.Charting3D.Model.DataSeries3D"/> type which provides a stream of X,Y,Z points of type <typeparamref name="TX"/>, <typeparamref name="TY"/>, <typeparamref name="TZ"/>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDataSeries3D`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Model.XyzDataSeries3D`3"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDataSeries3D`3.XRange">
            <summary>
            Gets the computed XRange, which is an <see cref="T:SciChart.Data.Model.IRange"/>
            </summary>
            <remarks>Note: The performance implications of calling this is the XyzDataSeries3D will perform a full recalculation on each get. It is recommended to get and cache if this property is needed more than once</remarks>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDataSeries3D`3.YRange">
            <summary>
            Gets the computed YRange, which is an <see cref="T:SciChart.Data.Model.IRange"/>
            </summary>
            <remarks>Note: The performance implications of calling this is the XyzDataSeries3D will perform a full recalculation on each get. It is recommended to get and cache if this property is needed more than once</remarks>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDataSeries3D`3.ZRange">
            <summary>
            Gets the computed ZRange, which is an <see cref="T:SciChart.Data.Model.IRange"/>
            </summary>
            <remarks>Note: The performance implications of calling this is the XyzDataSeries3D will perform a full recalculation on each get. It is recommended to get and cache if this property is needed more than once</remarks>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDataSeries3D`3.XValues">
            <summary>
            Gets the Z values
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDataSeries3D`3.YValues">
            <summary>
            Gets the Y values
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDataSeries3D`3.ZValues">
            <summary>
            Gets the Z values
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDataSeries3D`3.WValues">
            <summary>
            Gets the W values
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDataSeries3D`3.Count">
            <summary>
            Gets the count of the IXyzDataSeries3D
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.XyzDataSeries3D`3.IsDirty">
            <summary>
            Gets or sets a value indicating whether this instance is dirty. If dirty, any cached data must be re-calculated. You can set this value to <value>True</value> to force recalculation of caches.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDataSeries3D`3.Append(`0,`1,`2,SciChart.Charting3D.Model.IPointMetadata3D)">
            <summary>
            Appends a single X, Y0, Y1 point to the series, automatically triggering a redraw
            </summary>
            <param name="x">The X-value</param>
            <param name="y">The Y-value</param>
            <param name="z">The Z-value</param>
            <param name="w">The W-value, which contains metadata about the point</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDataSeries3D`3.Append(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{SciChart.Charting3D.Model.IPointMetadata3D})">
            <summary>
            Appends a collection of X, Y0 and Y1 points to the series, automatically triggering a redraw
            </summary>
            <param name="x">The X-values</param>
            <param name="y">The Y-values</param>
            <param name="z">The Z-values</param>
            <param name="w">The W-value, which contains metadata about the point</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDataSeries3D`3.Update(System.Int32,`0,`1,`2,SciChart.Charting3D.Model.IPointMetadata3D)">
            <summary>
            Updates (overwrites) the Y0, Y1 values at the specified X-value. Automatically triggers a redraw
            </summary>
            <param name="index">The Index to update</param>
            <param name="x">The X-value</param>
            <param name="y">The Y-value</param>
            <param name="z">The Z-value</param>
            <param name="w">The W-value, which contains metadata about the point</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDataSeries3D`3.Insert(System.Int32,`0,`1,`2,SciChart.Charting3D.Model.IPointMetadata3D)">
            <summary>
            Inserts an X, Y, Z point at the specified index. Automatically triggers a redraw
            </summary>
            <param name="index">The index to insert at</param>
            <param name="x">The X-value</param>
            <param name="y">The Y-value</param>
            <param name="z">The Z-value</param>
            <param name="w">The W-value, which contains metadata about the point</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDataSeries3D`3.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{SciChart.Charting3D.Model.IPointMetadata3D})">
            <summary>
            Inserts a collection of X, Y and Z points at the specified index, automatically triggering a redraw
            </summary>
            <param name="startIndex">The index to insert at</param>
            <param name="x">The X-values</param>
            <param name="y">The Y-values</param>
            <param name="z">The Z-values</param>
            <param name="w">The W-values, which contains metadata about the point</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDataSeries3D`3.RemoveAt(System.Int32)">
            <summary>
            Removes the X,Y,Z values at the specified index
            </summary>
            <param name="index">The index to remove at</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDataSeries3D`3.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of points starting from the specified index
            </summary>
            <param name="startIndex">Starting index of the range of elements to remove</param>
            <param name="count">The number of elements to remove</param>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDataSeries3D`3.ToPointSeries``1">
            <summary>
            Converts a DataSeries to a <see cref="T:SciChart.Charting3D.Model.IPointSeries3D" /> derived type, for use during the render pass
            </summary>
            <typeparam name="TPointSeries">The type of <see cref="T:SciChart.Charting3D.Model.IPointSeries3D" /></typeparam>
            <returns>
            The PointSeries, which may be used for drawing
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDataSeries3D`3.Clear">
            <summary>
            Clears the DataSeries
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDataSeries3D`3.PerformSelection(System.Boolean,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Performs selection on the provided indices. If indices == null applies the flag to all data-points, else, applies the flag just to the defined data-points
            </summary>
            <param name="isSelected"></param>
            <param name="indices"></param>
        </member>
        <member name="M:SciChart.Charting3D.Model.XyzDataSeries3D`3.AppendMetadata(SciChart.Charting3D.Model.IPointMetadata3D)">
            <summary>
            Appends a single metadata value to the end of the <see cref="P:SciChart.Charting3D.Model.XyzDataSeries3D`3.WValues"/> list.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Model.IXyzPointSeries3D">
            <summary>
            Defines the interface to a XyzPointSeries3D - the result of resampling or conversion from <see cref="T:SciChart.Charting3D.Model.XyzDataSeries3D`3"/> 
            to a render-loop compatible collection
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Model.IXyzPointSeries3D.Count">
            <summary>
            Gets the count of the Pointseries
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Model.IXyzPointSeries3D.XValues">
            <summary>
            Gets the underlying raw X values wrapped in a <see cref="T:SciChart.Charting3D.Model.IDoubleList"/>
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Model.IXyzPointSeries3D.YValues">
            <summary>
            Gets the underlying raw Y values wrapped in a <see cref="T:SciChart.Charting3D.Model.IDoubleList"/>
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Model.IXyzPointSeries3D.ZValues">
            <summary>
            Gets the underlying raw Z values wrapped in a <see cref="T:SciChart.Charting3D.Model.IDoubleList"/>
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Model.IXyzPointSeries3D.WValues">
            <summary>
            Gets the underlying raw <see cref="T:SciChart.Charting3D.Model.PointMetadata3D"/> values 
            </summary>        
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.ApiElementBase3D">
            <summary>
            Base class to expose properties and methods for <see cref="T:SciChart.Charting3D.Modifiers.ChartModifierBase3D"/> derived types
            </summary>
        </member>
        <member name="E:SciChart.Charting3D.Modifiers.ApiElementBase3D.PropertyChanged">
            <summary>
            Occurs when a property changes in the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ApiElementBase3D.ParentSurface">
            <summary>
            Gets or sets the parent <see cref="T:SciChart.Charting.Visuals.SciChartSurface"/> to perform operations on 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ApiElementBase3D.XAxis">
            <summary>
            Returns the XAxis on the parent <see cref="T:SciChart.Charting.Visuals.SciChartSurface"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ApiElementBase3D.YAxis">
            <summary>
            Returns the YAxes on the parent <see cref="T:SciChart.Charting.Visuals.SciChartSurface"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ApiElementBase3D.ZAxis">
            <summary>
            Returns the ZAxis on the parent <see cref="T:SciChart.Charting.Visuals.SciChartSurface"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ApiElementBase3D.Services">
            <summary>
            Gets the <see cref="T:SciChart.Core.Utility.ServiceContainer" /> which provides access to services throughout SciChart.
            ServiceContainers are created one per <see cref="T:SciChart.Charting3D.SciChart3DSurface" /> instance,
            and shared between peripheral components such as <see cref="T:SciChart.Charting3D.Axis.AxisBase3D" />, <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D" />, <see cref="T:SciChart.Charting3D.Modifiers.ChartModifierBase3D" /> instances.
            For a full list of available services, see the remarks on <see cref="T:SciChart.Core.Utility.ServiceContainer" />
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ApiElementBase3D.ModifierSurface">
            <summary>
            Gets the <see cref="T:SciChart.Charting.Visuals.IChartModifierSurface"/> instance on the parent <see cref="T:SciChart.Charting.Visuals.SciChartSurface"/>, which acts as a canvas to place UIElements
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ApiElementBase3D.IsAttached">
            <summary>
            Gets or sets whether this Element is attached to a parent <see cref="T:SciChart.Charting.Visuals.SciChartSurface"/>
            </summary>
            <value><c>true</c> if this instance is attached; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ApiElementBase3D.RootGrid">
            <summary>
            Gets the <see cref="T:SciChart.Charting.Visuals.IMainGrid"/> which is the root component for the <see cref="T:SciChart.Charting.Visuals.SciChartSurface"/>, 
            containing the XAxis, YAxes, ModifierSurface, RenderSurface and GridLinesPanel
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ApiElementBase3D.OnAttached">
            <summary>
            Called when the element is attached to the Chart Surface
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ApiElementBase3D.OnDetached">
            <summary>
            Called immediately before the element is detached from the Chart Surface
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ApiElementBase3D.OnInvalidateParentSurface">
            <summary>
            Raises the <see cref="T:SciChart.Charting.Utility.InvalidateSciChartMessage"/> which causes the parent <see cref="T:SciChart.Charting.Visuals.SciChartSurface"/> to invalidate
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ApiElementBase3D.GetAndAssertTemplateChild``1(System.String)">
            <summary>
            Gets the TemplateChild by the specified name and casts to type <typeparamref name="T" />, asserting that the result is not null
            </summary>
            <typeparam name="T">The Type of the templated part</typeparam>
            <param name="childName">Name of the templated part.</param>
            <returns>The template part instance</returns>
            <exception cref="T:System.InvalidOperationException">Unable to Apply the Control Template. Child is missing or of the wrong type</exception>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ApiElementBase3D.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event, as part of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D">
            <summary>
            An abstract base class which factors out handling of Tooltips and Axis Labels which are shared in the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D"/> and derived types
            </summary>
            <seealso cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D"/>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.SourceModeProperty">
            <summary>
            Defines the RolloverMode DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.CurrentPoint">
            <summary>
            The Current MousePoint on the parent <see cref="P:SciChart.Charting.Visuals.SciChartSurfaceBase.ModifierSurface"/>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.SourceMode">
            <summary>
            Gets or sets type of series on which interaction is performed
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.OnAttached">
            <summary>
            Called when the element is attached to the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.OnDetached">
            <summary>
            Called immediately before the element is detached from the Chart Surface
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.OnParentSurfaceMouseLeave">
            <summary>
            Called when the mouse leaves the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.ClearAll">
            <summary>
            When overriden in a derived class, this method should clear all markers and tooltips from the <see cref="P:SciChart.Charting.Visuals.SciChartSurfaceBase.ModifierSurface"/>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.OnModifierMouseMove(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:SciChart.Charting.Visuals.SciChartSurface" />
            </summary>
            <param name="args">Arguments detailing the mouse move operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.HandleMouseEvent(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            General logic for processing mouse events
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.IsEnabledAt(System.Windows.Point)">
            <summary>
            When overridden in derived classes, indicates whether mouse point is valid for current modifier
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.HandleMasterMouseEvent(System.Windows.Point)">
            <summary>
            When overriden in a derived class, called to handle the Master <see cref="T:SciChart.Charting.ChartModifiers.ChartModifierBase"/> MouseMove event
            </summary>
            <param name="mousePoint">The current Mouse-point</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.GetSeriesInfoAt(System.Windows.Point)">
            <summary>
            Enumerates RenderableSeries on the parent <see cref="P:SciChart.Charting.ChartModifiers.ChartModifierBase.ParentSurface"/> and gets <see cref="T:SciChart.Charting.Model.ChartData.SeriesInfo"/> objects in given point
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.GetSeriesInfoAt(System.Func{SciChart.Charting3D.RenderableSeries.IRenderableSeries3D,SciChart.Charting3D.RenderableSeries.HitTestInfo3D})">
            <summary>
            Called internally, gets the SeriesInfo on all RenderableSeries using the provided hit-test function
            </summary>
            <param name="hitTestMethod">The hit-test function</param>
            <returns>The seriesinfo list</returns>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.IsHitPointValid(SciChart.Charting3D.RenderableSeries.HitTestInfo3D)">
            <summary>
            When overridden in derived classes, indicates whether <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D"/> result of hit-test should be returned from the <see cref="M:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.GetSeriesInfoAt(System.Windows.Point)"/> method.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.IsSeriesValid(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D)">
            <summary>
            When overridden in derived classes, indicates whether the series should be inspected in order to get <see cref="T:SciChart.Charting.Model.ChartData.SeriesInfo"/> inside the <see cref="M:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.GetSeriesInfoAt(System.Windows.Point)"/> method.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.LegendModifier3D">
            <summary>
            Defines a custom chart modifier which provides a Legend control on the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.LegendModifier3D.LegendDataProperty">
            <summary>
            Defines the LegendData DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.LegendModifier3D.LegendPlacementProperty">
            <summary>
            Defines the LegendPlacement DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.LegendModifier3D.LegendItemTemplateProperty">
            <summary>
            Defines the LegendTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.LegendModifier3D.OrientationProperty">
            <summary>
            Defines the LegendOrientation DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.LegendModifier3D.ShowSeriesMarkersProperty">
            <summary>
            Defines the ShowSeriesMarkers DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.LegendModifier3D.ShowVisibilityCheckboxesProperty">
            <summary>
            Defines the ShowVisibilityCheckboxes DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.LegendModifier3D.ShowLegendProperty">
            <summary>
            Defines the ShowLegend DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.LegendModifier3D.LegendTemplateProperty">
            <summary>
            Defines the SciChartLegend DependencyProperty
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.LegendModifier3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.LegendModifier"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.LegendModifier3D.LegendData">
            <summary>
            The LegendData object provides a collection of <see cref="T:SciChart.Charting.Model.ChartData.SeriesInfo"/> which can be bound to in ItemsControls or SciChartLegend control. 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.LegendModifier3D.ShowVisibilityCheckboxes">
            <summary>
            Used in combination with <see cref="P:SciChart.Charting.ChartModifiers.LegendModifier.ShowLegend"/> = true. If true, shows the Visibility Checkboxes in the automatically generated legend. 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.LegendModifier3D.ShowSeriesMarkers">
            <summary>
            Used in combination with <see cref="P:SciChart.Charting.ChartModifiers.LegendModifier.ShowLegend"/> = true. If true, shows the Series Markers in the automatically generated legend
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.LegendModifier3D.LegendPlacement">
            <summary>
            Used in combination with <see cref="P:SciChart.Charting.ChartModifiers.LegendModifier.ShowLegend"/> = true. Defines the placement of the auto-generated legend 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.LegendModifier3D.LegendItemTemplate">
            <summary>
            Gets or sets the Legend Item Template, which provides UI that binds to a single <see cref="T:SciChart.Charting.Model.ChartData.SeriesInfo"/> instance. 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.LegendModifier3D.LegendTemplate">
            <summary>
            Used in combination with <see cref="P:SciChart.Charting.ChartModifiers.LegendModifier.ShowLegend"/> = true. An optional control template for the auto-generated <see cref="T:SciChart.Charting.Visuals.SciChartLegend"/> control
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.LegendModifier3D.Orientation">
            <summary>
            Gets or sets the Orientation of the Legend Items, e.g. Vertical, or Horizontal
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.LegendModifier3D.ShowLegend">
            <summary>
            If true, then the LegendModifier automatically shows and hosts a <see cref="T:SciChart.Charting.Visuals.SciChartLegend"/> inside the chart surface, according to <see cref="P:SciChart.Charting3D.Modifiers.LegendModifier3D.LegendPlacement"/>. If false, then the user may provide an alternative legend control
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.LegendModifier3D.OnAttached">
            <summary>
            Called when the element is attached to the Chart Surface
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.LegendModifier3D.OnDetached">
            <summary>
            Called immediately before the element is detached from the Chart Surface
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.LegendModifier3D.ClearAll">
            <summary>
            When overriden in a derived class, this method should clear all markers and tooltips from the <see cref="P:SciChart.Charting.Visuals.SciChartSurfaceBase.ModifierSurface" />
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.LegendModifier3D.HandleMasterMouseEvent(System.Windows.Point)">
            <summary>
            When overriden in a derived class, called to handle the Master <see cref="T:SciChart.Charting3D.Modifiers.ChartModifierBase3D" /> MouseMove event
            </summary>
            <param name="mousePoint">The current Mouse-point</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.LegendModifier3D.OnModifierMouseMove(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:SciChart.Charting3D.SciChart3DRenderSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.LegendModifier3D.IsHitPointValid(SciChart.Charting3D.RenderableSeries.HitTestInfo3D)">
            <summary>
            When overridden in derived classes, indicates whether <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D"/> result of hit-test should be returned from the <see cref="M:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.GetSeriesInfoAt(System.Windows.Point)"/> method.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.LegendModifier3D.UpdateLegend">
            <summary>
            Refreshes the legend with up-to-date <see cref="T:SciChart.Charting.Model.ChartData.SeriesInfo"/> with series names, latest values
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.LegendModifier3D.UpdateSeriesInfo(SciChart.Charting3D.Model.ChartData.SeriesInfo3D,SciChart.Charting3D.Model.ChartData.SeriesInfo3D)">
            <summary>
            Does a replace of the data on the OldSeriesInfo instance with data from NewSeriesInfo
            </summary>
            <param name="oldSeriesInfo"></param>
            <param name="newSeriesInfo"></param>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.PinchZoomModifier3D">
            <summary>
            The <see cref="T:SciChart.Charting3D.Modifiers.PinchZoomModifier3D"/> provides zooming of the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> with the pinch gesture
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.PinchZoomModifier3D.ZoomScaleSensitivityProperty">
            <summary>
            Defines the ZoomScaleSensitivityProperty DependencyProperty 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.PinchZoomModifier3D.ZoomScaleSensitivity">
            <summary>
            Adjusts the sensitivity of zoom scaling, e.g. 1.0f is the default, 2.0f means twice as sensitive, 0.5f means half as sensitive etc... 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.PinchZoomModifier3D.OnModifierTouchManipulationDelta(SciChart.Charting.ChartModifiers.ModifierManipulationDeltaArgs)">
            <summary>
            Called when a touch manipulation delta occurs
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLines">
            <summary>
            Defines the class which is used only to expose style for the crosshair lines and used in the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesSceneEntity"/>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLines.ProjectionModeProperty">
            <summary>
            Defines the ProjectionMode dependency property
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLines.CrosshairOverlayStyleProperty">
            <summary>
            Defines the CrosshairOverlayStyle dependency property
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLines.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesProjection"/> class
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLines.ProjectionMode">
            <summary>
            Gets or sets the <see cref="F:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairMode.Lines"/> projection mode. 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLines.CrosshairOverlayStyle">
            <summary>
            Gets or sets the style applied to the modifier overlays (TargetType=Line)
            </summary>
            <value>The crosshair's style.</value>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesProjection">
            <summary>
            Defines the class which is used only to expose style for the crosshair lines projection and used in the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesSceneEntity"/>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesProjection.ShowXyProperty">
            <summary>
            Defines the ShowXy dependency property
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesProjection.XyLineStyleProperty">
            <summary>
            Defines the XyLineStyle dependency property
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesProjection.ShowXzProperty">
            <summary>
            Defines the ShowXz dependency property
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesProjection.XzLineStyleProperty">
            <summary>
            Defines the XzLineStyle dependency property
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesProjection.ShowYzProperty">
            <summary>
            Defines the ShowYz dependency property
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesProjection.YzLineStyleProperty">
            <summary>
            Defines the YzLineStyle dependency property
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesProjection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesProjection"/> class
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesProjection.ShowXy">
            <summary>
            Gets or sets value, indicates whether show crosshair projection on the XY plane or not
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesProjection.XyLineStyle">
            <summary>
            Gets or sets the style applied to the crosshair projection on the XY plane (TargetType=Line)
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesProjection.ShowXz">
            <summary>
            Gets or sets value, indicates whether show crosshair projection on the XZ plane or not
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesProjection.XzLineStyle">
            <summary>
            Gets or sets the style applied to the crosshair projection on the XZ plane (TargetType=Line)
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesProjection.ShowYz">
            <summary>
            Gets or sets value, indicates whether show crosshair projection on the YZ plane or not
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesProjection.YzLineStyle">
            <summary>
            Gets or sets the style applied to the crosshair projection on the YZ plane (TargetType=Line)
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairMode">
            <summary>
            Defines constants for different cursor modes. See <see cref="P:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.CrosshairMode"/>.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairMode.None">
            <summary>
            Crosshair does not appear.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairMode.Lines">
            <summary>
            Crosshair appears at the cursor point, consisting of the three lines which protrude from the corresponding walls of the viewport box.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairMode.Planes">
            <summary>
            Crosshair appears at the cursor point, consisting of two intersecting planes.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairPlanesSceneEntity">
            <summary>
            Defines an entity which renders the Crosshair in the <see cref="F:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairMode.Planes"/> mode and it's projections on the planes
            </summary>
            See also the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D"/>
            See also the <see cref="F:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.CrosshairPlanesFillProperty"/>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairPlanesSceneEntity.#ctor(SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesSceneEntity"/> class
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairPlanesSceneEntity.UpdateScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to update the geometry in this element. This is where we need to cache geometry before draw.
            </summary>
            <remarks> But in this entity is no needs to update anything, because we have to recalculate lines every time when 3D render engine wishes to render.</remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairPlanesSceneEntity.PerformSelection(System.Boolean,System.Collections.Generic.List{SciChart.Charting3D.Primitives.VertexId})">
            <summary>
            Performs selection on this entity, setting the IsSelected flag to True or False on the specified <see cref="T:SciChart.Charting3D.Primitives.VertexId">Vertex Ids</see>
            </summary>
            <remarks> But in this entity is no needs to Perform Selection, so do nothing.</remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairPlanesSceneEntity.UpdateHitVertex(SciChart.Charting3D.Vector3)">
            <summary>
            Updates last hit vertex on <see cref="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.UpdateOverlays(SciChart.Charting3D.Model.ChartData.SeriesInfo3D)"/> method
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairPlanesSceneEntity.RenderScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to render this element. This is where geometry must be drawn to the 3D scene
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesSceneEntity">
            <summary>
            Defines an entity which renders the Crosshair in the <see cref="F:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairMode.Lines"/> mode and it's projections on the planes
            </summary>
            See also the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesProjection"/>
            See also the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D"/>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesSceneEntity.#ctor(SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesSceneEntity"/> class
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesSceneEntity.UpdateScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to update the geometry in this element. This is where we need to cache geometry before draw.
            </summary>
            <remarks> But in this entity is no needs to update anything, because we have to recalculate lines every time when 3D render engine wishes to render.</remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesSceneEntity.PerformSelection(System.Boolean,System.Collections.Generic.List{SciChart.Charting3D.Primitives.VertexId})">
            <summary>
            Performs selection on this entity, setting the IsSelected flag to True or False on the specified <see cref="T:SciChart.Charting3D.Primitives.VertexId">Vertex Ids</see>
            </summary>
            <remarks> But in this entity is no needs to Perform Selection, so do nothing.</remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesSceneEntity.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesSceneEntity.UpdateHitVertex(SciChart.Charting3D.Vector3)">
            <summary>
            Updates last hit vertex on <see cref="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.UpdateOverlays(SciChart.Charting3D.Model.ChartData.SeriesInfo3D)"/> method
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesSceneEntity.RenderScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to render this element. This is where geometry must be drawn to the 3D scene
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.Tooltip3D.ICrosshairSceneEntity">
            <summary>
            Defines the interface for <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairLinesSceneEntity"/> and <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairPlanesSceneEntity"/> classes
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.ICrosshairSceneEntity.UpdateHitVertex(SciChart.Charting3D.Vector3)">
            <summary>
            Updates last hit vertex on <see cref="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.UpdateOverlays(SciChart.Charting3D.Model.ChartData.SeriesInfo3D)"/> method
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.Tooltip3D.ProjectionMode">
            <summary>
            Defines constants for different line Projection modes <see cref="F:SciChart.Charting3D.Modifiers.Tooltip3D.CrosshairMode.Lines"/>. 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.ProjectionMode.None">
            <summary>
            Crosshair projection does not appear.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.ProjectionMode.Crosshair">
            <summary>
            Draws the full crosshair as the 3D crosshair projection on the planes.
            Draws the vertical and horizontal line with the center in the mouse point projected on the plane
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.ProjectionMode.Angular">
            <summary>
            Draws the actual 3D crosshair projection on the planes.
            Draws the lines from the mouse point projected on the plane to the axes.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D">
            <summary>
            The <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D"/> provides a mouse-over tooltip to a chart, outputting a single <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D"/> object to bind to which updates as the mouse moves over data-points.
            Add to a <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> and set IsEnabled to true to enable this behaviour
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.TooltipProperty">
            <summary>
            Defines the Tooltip attached property 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.SetTooltip(System.Windows.DependencyObject,SciChart.Charting.Visuals.RenderableSeries.TooltipControl)">
            <summary>
            Sets the Tooltip attached property
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.GetTooltip(System.Windows.DependencyObject)">
            <summary>
            Gets the Tooltip attached property
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.TooltipTemplateProperty">
            <summary>
            Defines the TooltipTemplate attached property 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.SetTooltipTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Sets the TooltipTemplate attached property
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.GetTooltipTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets the TooltipTemplate attached property
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.TooltipContainerStyleProperty">
            <summary>
            Defines the TooltipStyle attached property 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.SetTooltipContainerStyle(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>
            Sets the TooltipStyle attached property
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.GetTooltipContainerStyle(System.Windows.DependencyObject)">
            <summary>
            Gets the TooltipStyle attached property
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.IncludeSeriesProperty">
            <summary>
            Defines the IncludeSeries attached Property
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.GetIncludeSeries(System.Windows.DependencyObject)">
            <summary>
            Gets whether <paramref name="series"/> can be inspected by <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D"/>.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.SetIncludeSeries(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether <paramref name="series"/> can be inspected by <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D"/>.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.ShowTooltipOnProperty">
            <summary>
            Defines the ShowTooltipOn dependency property
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.CrosshairModeProperty">
            <summary>
            Defines the CrosshairMode dependency property
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.CrosshairProjectionStyleProperty">
            <summary>
            Defines the CrosshairProjectionStyle dependency property
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.ShowAxisLabelsProperty">
            <summary>
            Defines the ShowAxisLabels dependency property
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.HoverDelayProperty">
            <summary>
            Defines the HoverDelay dependency property
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.TooltipLabelDataContextSelectorProperty">
            <summary>
            Defines the TooltipLabelDataContext dependency property
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.CrosshairPlanesFillProperty">
            <summary>
            Defines the CrosshairPlanesFill dependency property
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D"/> class
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.ShowTooltipOn">
            <summary>
            Gets or sets when to show tooltips
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.CrosshairMode">
            <summary>
            Gets or sets the mode of the Crosshairs
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.CrosshairProjectionStyle">
            <summary>
            Gets or sets the style applied to the modifier lines overlay projections (TargetType=Crosshair)
            </summary>
            <value>The crosshairs projection style.</value>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.ShowAxisLabels">
            <summary>
            Gets or sets value, indicates whether show labels on axes or not
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.HoverDelay">
            <summary>
            Gets or sets delay for showing of tooltips in miliseconds
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.TooltipLabelDataContextSelector">
            <summary>
            Gets or sets the function which is called internally to get a DataContext for a particular data point
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.CrosshairPlanesFill">
            <summary>
            Gets or sets the color in which is used to fill intersecting planes
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.OnAttached">
            <summary>
            Called when the element is attached to the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.OnDetached">
            <summary>
            Called immediately before the element is detached from the Chart Surface
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.CreateCrosshairSceneEntity">
            <summary>
            Creates a new <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.ICrosshairSceneEntity"/> for adding to the scene at the mouse point
            </summary>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.OnModifierMouseDown(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:SciChart.Charting.Visuals.SciChartSurface" />
            </summary>
            <param name="args">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.ClearAll">
            <summary>
            When overriden in a derived class, this method should clear all markers and tooltips from the <see cref="P:SciChart.Charting.Visuals.SciChartSurfaceBase.ModifierSurface" />
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.HandleMasterMouseEvent(System.Windows.Point)">
            <summary>
            When overriden in a derived class, called to handle the Master <see cref="T:SciChart.Charting.ChartModifiers.ChartModifierBase" /> MouseMove event
            </summary>
            <param name="mousePoint">The current Mouse-point</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.OnModifierMouseUp(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:SciChart.Charting.Visuals.SciChartSurface" />
            </summary>
            <param name="args">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:SciChart.Charting.ChartModifiers.ChartModifierBase"/> instance
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.IsHitPointValid(SciChart.Charting3D.RenderableSeries.HitTestInfo3D)">
            <summary>
            When overridden in derived classes, indicates whether <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D"/> result of hit-test should be returned from the <see cref="M:SciChart.Charting3D.Modifiers.InspectSeriesModifierBase3D.GetSeriesInfoAt(System.Windows.Point)"/> method.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.HasToShowTooltip">
            <summary>
            Checks <see cref="P:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.ShowTooltipOn"/> property and returns value, indicating whether the tooltip has to be shown
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D.CreateFromTemplate``1(System.Windows.DataTemplate,System.Object)">
             <summary>
             Creates instances of <see cref="T:SciChart.Charting.Visuals.RenderableSeries.TemplatableControl"/> 
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.XyzGizmoModifier3D">
            <summary>
            WORK IN PROGRESS: Intended to display the XYZ Axis gizmo in the bottom left of the screen. 
            </summary>
            <remarks>Currently this behaviour is done in the C++ 3D Engine. This must be pulled up to C#</remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.XyzGizmoModifier3D.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.XyzGizmoModifier3D.OnDetached">
            <summary>
            Called immediately before the Chart Modifier is detached from the Chart Surface
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.ChartModifierBase3D">
            <summary>
            Defines the base class to a Chart Modifier, which can be used to extend the interactivity or rendering of the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
            <seealso cref="T:SciChart.Charting.ChartModifiers.ModifierGroup"/>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.ChartModifierBase3D.ReceiveHandledEventsProperty">
            <summary>
            Defines the ReceiveHandledEvents DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.ChartModifierBase3D.IsEnabledProperty">
            <summary>
            Defines the IsEnabled Attached Property
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.ChartModifierBase3D.ExecuteOnProperty">
            <summary>
            Defines the ExecuteOn DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.ChartModifierBase3D.ExecuteWhenProperty">
            <summary>
            Defines the ExecuteWhen DependencyProperty
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Modifiers.ChartModifierBase3D"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnAttached">
            <summary>
            Called when the element is attached to the Chart Surface
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnDetached">
            <summary>
            Called immediately before the element is detached from the Chart Surface
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this element is enabled in the user interface (UI).
            </summary>
            <returns>true if the element is enabled; otherwise, false. The default value is true.</returns>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.ExecuteOn">
            <summary>
            Determines when the <see cref="T:SciChart.Charting3D.Modifiers.ChartModifierBase3D"/> executes, 
            e.g. <see cref="F:SciChart.Charting.ChartModifiers.ExecuteOn.MouseDoubleClick"/> will cause the modifier to execute on mouse double click
            click of the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.ExecuteWhen">
            <summary>
            Determines which keyboard modifiers filter when the <see cref="T:SciChart.Charting3D.Modifiers.ChartModifierBase3D"/> executes, 
            e.g. <see cref="F:SciChart.Core.Utility.Mouse.MouseModifier.Shift"/> will cause the modifier to only work if SHIFT is pressed
            when the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> is focussed
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.ReceiveHandledEvents">
            <summary>
            Gets or sets a value, indicates whether current modifier handles events
            which have already been marked as handled
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.IsMouseLeftButtonDown">
            <summary>
            Gets if the Left mouse button is currently down
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.IsMouseMiddleButtonDown">
            <summary>
            Gets if the Middle mouse button is currently down
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.IsMouseRightButtonDown">
            <summary>
            Gets of the right mouse button is currently down
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.Viewport3D">
            <summary>
            Gets the Viewport3D - which is the 3D DirectX viewport used to render the scene
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.RootEntity">
            <summary>
            Gets the root <see cref="T:SciChart.Charting3D.SciChart3DRootSceneEntity"/>, which is the root node for the entire 3D scene
            </summary>    
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.IsDragging">
            <summary>
            Gets whether the user is currently dragging the chart
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.MouseEventGroup">
            <summary>
            Gets or sets a Mouse Event Group, an ID used to share mouse events across multiple targets
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.ModifierName">
            <summary>
            Gets modifier name
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.CaptureMouse">
            <summary>
            Attempts to force capture of the mouse to this element.
            </summary>
            <returns>
            true if the mouse is successfully captured; otherwise, false.
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.ReleaseMouseCapture">
            <summary>
            Releases the mouse capture, if this element held the capture.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.CanReceiveMouseEvents">
            <summary>
            Returns a value indicating whether mouse events should be propagated to the mouse target.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.GetPointRelativeTo(System.Windows.Point,SciChart.Core.Framework.IHitTestable)">
            <summary>
            Transforms the input point relative to the <see cref="T:SciChart.Core.Framework.IHitTestable"/> element. Can be used to transform 
            points relative to the <see cref="P:SciChart.Charting.Visuals.SciChartSurfaceBase.ModifierSurface"/>, or <see cref="P:SciChart.Charting.Visuals.SciChartSurface.XAxis"/> for instance.
            </summary>
            <param name="point">The input point</param>
            <param name="relativeTo">The <see cref="T:SciChart.Core.Framework.IHitTestable"/> element to translate points relative to</param>
            <returns>The output point</returns>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnModifierDoubleClick(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when a Mouse DoubleClick occurs on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnModifierMouseDown(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnModifierMouseMove(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
            <param name="args">Arguments detailing the mouse move operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnModifierMouseUp(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnModifierMouseWheel(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when the Mouse Wheel is scrolled on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse wheel operation</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnModifierTouchDown(SciChart.Charting.ChartModifiers.ModifierTouchArgs)">
            <summary>
            Called when a Multi-Touch Down interaction occurs on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnModifierTouchMove(SciChart.Charting.ChartModifiers.ModifierTouchArgs)">
            <summary>
            Called when a Multi-Touch Move interaction occurs on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnModifierTouchUp(SciChart.Charting.ChartModifiers.ModifierTouchArgs)">
            <summary>
            Called when a Multi-Touch Up interaction occurs on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnModifierTouchManipulationStarting(SciChart.Charting.ChartModifiers.ModifierManipulationStartingArgs)">
            <summary>
            Called when a manipulation is starting
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnModifierTouchManipulationStarted(SciChart.Charting.ChartModifiers.ModifierManipulationStartedArgs)">
            <summary>
            Called when a manipulation is starting
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnModifierTouchManipulationCompleted(SciChart.Charting.ChartModifiers.ModifierManipulationCompletedArgs)">
            <summary>
            Called when a manipulation is completed
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnModifierTouchManipulationDelta(SciChart.Charting.ChartModifiers.ModifierManipulationDeltaArgs)">
            <summary>
            Called when a touch manipulation delta occurs
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnModifierTouchManipulationInertiaStarting(SciChart.Charting.ChartModifiers.ModifierManipulationInertiaStartingArgs)">
            <summary>
            Called when a manipulation inertia is starting
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnMasterMouseLeave(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when the MouseLeave event is fired for a Master of current <see cref="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.MouseEventGroup" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnModifierKeyDown(SciChart.Core.Utility.Mouse.ModifierKeyArgs)">
            <summary>
            Called when the KeyDown event is fired for the Master of the current <see cref="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.MouseEventGroup"/>
            </summary>
            <param name="e">Arguments detailing the key event</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnModifierKeyUp(SciChart.Core.Utility.Mouse.ModifierKeyArgs)">
            <summary>
            Called when the KeyUp event is fired for the Master of the current <see cref="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.MouseEventGroup"/>
            </summary>
            <param name="e">Arguments detailing the key event</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the DataContext of the <see cref="T:SciChart.Charting.ChartModifiers.ChartModifierBase"/> changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.IsPointWithinBounds(System.Windows.Point,SciChart.Core.Framework.IHitTestable)">
            <summary>
            Gets whether the mouse point is within the bounds of the hit-testable element. Assumes the mouse-point has not been translated yet (performs translation)
            </summary>
            <param name="mousePoint"></param>
            <param name="hitTestable"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:SciChart.Charting3D.Modifiers.ChartModifierBase3D"/> instance
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnParentSurfaceMouseLeave">
            <summary>
            Called when the mouse leaves the parent <see cref="T:SciChart.Charting.Visuals.SciChartSurface"/>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.OnParentSurfaceMouseEnter">
            <summary>
            Called when the mouse enters the parent <see cref="T:SciChart.Charting.Visuals.SciChartSurface"/>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.MatchesExecuteOn(SciChart.Core.Utility.Mouse.MouseButtons,SciChart.Charting.ChartModifiers.ExecuteOn)">
            <summary>
            Determines whether the currently pressed mouse buttons matches the <see cref="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.ExecuteOn"/>. 
            Used to filter events such as zoom or pan on right mouse button
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ChartModifierBase3D.MatchesExecuteWhen(SciChart.Core.Utility.Mouse.MouseModifier,SciChart.Core.Utility.Mouse.MouseModifier)">
            <summary>
            Determines whether the currently pressed modifier key matches the <see cref="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.ExecuteWhen"/>. 
            Used to TODO
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.FreeLookModifier3D">
            <summary>
            <para>The FreeLookModifier3D provides the behaviour of free look (free rotation of camera, plus movement) by dragging the mouse and via keyboard shortcuts</para>
            <para>It can be enabled by setting an FreeLookModifier3D on the <see cref="P:SciChart.Charting3D.SciChart3DSurface.ChartModifier"/> property, or as part of a <see cref="T:SciChart.Charting3D.Modifiers.ModifierGroup3D"/></para>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.FreeLookModifier3D.MovementSpeedProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Modifiers.FreeLookModifier3D.MovementSpeed"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.FreeLookModifier3D.ForwardKeyProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Modifiers.FreeLookModifier3D.ForwardKey"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.FreeLookModifier3D.BackKeyProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Modifiers.FreeLookModifier3D.BackKey"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.FreeLookModifier3D.RightKeyProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Modifiers.FreeLookModifier3D.RightKey"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.FreeLookModifier3D.LeftKeyProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Modifiers.FreeLookModifier3D.LeftKey"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.FreeLookModifier3D.UpKeyProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Modifiers.FreeLookModifier3D.UpKey"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.FreeLookModifier3D.DownKeyProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Modifiers.FreeLookModifier3D.DownKey"/> DependencyProperty</summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.FreeLookModifier3D.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:SciChart.Charting3D.Modifiers.FreeLookModifier3D"/> class.</para>
            <para>The FreeLookModifier3D provides the behaviour of free look (free rotation of camera, plus movement) by dragging the mouse and via keyboard shortcuts</para>
            <para>It can be enabled by setting an FreeLookModifier3D on the <see cref="P:SciChart.Charting3D.SciChart3DSurface.ChartModifier"/> property, or as part of a <see cref="T:SciChart.Charting3D.Modifiers.ModifierGroup3D"/></para>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.FreeLookModifier3D.DownKey">
            <summary>
            Gets or sets the key which moves the camera Down in world space
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.FreeLookModifier3D.UpKey">
            <summary>
            Gets or sets the key which moves the camera Up in world space
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.FreeLookModifier3D.LeftKey">
            <summary>
            Gets or sets the key which moves the camera Left in world space
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.FreeLookModifier3D.RightKey">
            <summary>
            Gets or sets the key which moves the camera Right in world space
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.FreeLookModifier3D.BackKey">
            <summary>
            Gets or sets the key which moves the camera Backwards in world space
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.FreeLookModifier3D.ForwardKey">
            <summary>
            Gets or sets the key which moves the camera Forwards in world space
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.FreeLookModifier3D.MovementSpeed">
            <summary>
            Gets or sets the Movement Speed, e.g. world units traversed on key-press
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.FreeLookModifier3D.OnModifierMouseMove(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.FreeLookModifier3D.OnModifierKeyDown(SciChart.Core.Utility.Mouse.ModifierKeyArgs)">
            <summary>
            Called when the KeyDown event is fired for the Master of the current <see cref="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.MouseEventGroup"/>
            </summary>
            <param name="e">Arguments detailing the key event</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.FreeLookModifier3D.GetVectors(SciChart.Charting3D.ICameraController,SciChart.Charting3D.Vector3@,SciChart.Charting3D.Vector3@,System.Single@)">
            <summary>
            Computes position, target vectors and ortho zoom factor depending on keys pressed
            </summary>
            <param name="camera">The camera.</param>
            <param name="positionVector">The position vector.</param>
            <param name="targetVector">The target vector.</param>
            <param name="orthoZoomFactor">The ortho zoom factor.</param>
            <returns>True if any update occurred</returns>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.IChartModifier3D">
            <summary>
            Defines the interface to a <see cref="T:SciChart.Charting3D.Modifiers.ChartModifierBase3D"/>, which can be used to extend the interactivity or rendering of the <see cref="T:SciChart.Charting3D.ISciChart3DSurface"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.IChartModifier3D.ParentSurface">
            <summary>
            Gets or sets the parent <see cref="T:SciChart.Charting3D.ISciChart3DSurface"/> to perform operations on 
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.ModifierGroup3D">
            <summary>
            Allows a collection of modifiers to be set on the <see cref="P:SciChart.Charting3D.SciChart3DSurface.ChartModifier"/> property. Child modifiers are stored in the
            <see cref="P:SciChart.Charting.ChartModifiers.ModifierGroup.ChildModifiers"/> collection, which is backed by a DependencyProperty so may be bound to in Xaml.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.ModifierGroup3D.ChildModifiersProperty">
            <summary>
            Defines the ChildModifiers DependencyProperty
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierGroup"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.#ctor(SciChart.Charting3D.Modifiers.IChartModifier3D[])">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierGroup"/> class.
            </summary>
            <param name="childModifiers">The child modifier collection.</param>
            <remarks></remarks>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ModifierGroup3D.ChildModifiers">
            <summary>
            Gets or sets a collection of child modifiers in this group
            </summary>
            <value>The child modifiers.</value>
            <remarks></remarks>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ModifierGroup3D.Item(System.String)">
            <summary>
            Gets the <see cref="T:SciChart.Charting.ChartModifiers.IChartModifier" /> with the specified name.
            </summary>
            <value>
            The <see cref="T:SciChart.Charting.ChartModifiers.IChartModifier" />.
            </value>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ModifierGroup3D.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SciChart.Charting.ChartModifiers.IChartModifier" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:SciChart.Charting.ChartModifiers.IChartModifier" />.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnDetached">
            <summary>
            Called immediately before the Chart Modifier is detached from the Chart Surface
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnIsEnabledChanged">
            <summary>
            Called when the IsEnabled property changes on this <see cref="T:SciChart.Charting.ChartModifiers.ChartModifierBase"/> instance
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnModifierDoubleClick(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when a Mouse DoubleClick occurs on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnModifierMouseDown(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnModifierMouseMove(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnModifierMouseUp(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnModifierMouseWheel(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when the Mouse Wheel is scrolled on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
            <param name="e">Arguments detailing the mouse wheel operation</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnMasterMouseLeave(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when the mouse leaves the Master of current <see cref="P:SciChart.Charting.ChartModifiers.ChartModifierBase.MouseEventGroup" />
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnModifierTouchDown(SciChart.Charting.ChartModifiers.ModifierTouchArgs)">
            <summary>
            Called when a Multi-Touch Down interaction occurs on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnModifierTouchMove(SciChart.Charting.ChartModifiers.ModifierTouchArgs)">
            <summary>
            Called when a Multi-Touch Move interaction occurs on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnModifierTouchUp(SciChart.Charting.ChartModifiers.ModifierTouchArgs)">
            <summary>
            Called when a Multi-Touch Up interaction occurs on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" />
            </summary>
            <param name="e">Arguments detailing the manipulation operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnModifierTouchManipulationStarting(SciChart.Charting.ChartModifiers.ModifierManipulationStartingArgs)">
            <summary>
            Called when a manipulation is starting
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnModifierTouchManipulationStarted(SciChart.Charting.ChartModifiers.ModifierManipulationStartedArgs)">
            <summary>
            Called when a manipulation is starting
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnModifierTouchManipulationCompleted(SciChart.Charting.ChartModifiers.ModifierManipulationCompletedArgs)">
            <summary>
            Called when a manipulation is completed
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnModifierTouchManipulationDelta(SciChart.Charting.ChartModifiers.ModifierManipulationDeltaArgs)">
            <summary>
            Called when a touch manipulation delta occurs
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnModifierTouchManipulationInertiaStarting(SciChart.Charting.ChartModifiers.ModifierManipulationInertiaStartingArgs)">
            <summary>
            Called when a manipulation inertia is starting
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnModifierKeyDown(SciChart.Core.Utility.Mouse.ModifierKeyArgs)">
            <summary>
            Called when the KeyDown event is fired for the Master of the current <see cref="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.MouseEventGroup" />
            </summary>
            <param name="e">Arguments detailing the key event</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnModifierKeyUp(SciChart.Core.Utility.Mouse.ModifierKeyArgs)">
            <summary>
            Called when the KeyUp event is fired for the Master of the current <see cref="P:SciChart.Charting3D.Modifiers.ChartModifierBase3D.MouseEventGroup" />
            </summary>
            <param name="e">Arguments detailing the key event</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.HasModifier(System.Type)">
            <summary>
            Determines whether the current <see cref="T:SciChart.Charting.ChartModifiers.ModifierGroup"/> has a child modifier of the desired type
            </summary>
            <param name="desiredType">The type of child modifier to search for</param>
            <returns><c>true</c> if the current <see cref="T:SciChart.Charting.ChartModifiers.ModifierGroup"/> has a chlid modifier by this type; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ModifierGroup3D.OnDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the DataContext of the <see cref="T:SciChart.Charting.ChartModifiers.ChartModifierBase"/> changes
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
            <remarks></remarks>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.MouseWheelZoomModifier3D">
            <summary>
            <para>The MouseWheelZoomModifier3D provides the behaviour of zoom (changing camera radius to target) by spinning the mouse-wheel</para>
            <para>It can be enabled by setting an MouseWheelZoomModifier3D on the <see cref="P:SciChart.Charting3D.SciChart3DSurface.ChartModifier"/> property, or as part of a <see cref="T:SciChart.Charting3D.Modifiers.ModifierGroup3D"/></para>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.MouseWheelZoomModifier3D.MouseWheelSensitivityProperty">
            <summary>Defines The <see cref="P:SciChart.Charting3D.Modifiers.MouseWheelZoomModifier3D.MouseWheelSensitivity"/> DependencyProperty</summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.MouseWheelZoomModifier3D.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:SciChart.Charting3D.Modifiers.MouseWheelZoomModifier3D"/> class.</para>
            <para>The MouseWheelZoomModifier3D provides the behaviour of zoom (changing camera radius to target) by spinning the mouse-wheel</para>
            <para>It can be enabled by setting an MouseWheelZoomModifier3D on the <see cref="P:SciChart.Charting3D.SciChart3DSurface.ChartModifier"/> property, or as part of a <see cref="T:SciChart.Charting3D.Modifiers.ModifierGroup3D"/></para>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.MouseWheelZoomModifier3D.MouseWheelSensitivity">
            <summary>
            Gets or sets the mouse wheel sensitivity factor. Default is 20.0f, this is the amount of world units that the camera adjusts its radial distance by on each mousewheel delta
            </summary>        
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.MouseWheelZoomModifier3D.OnModifierMouseWheel(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when the Mouse Wheel is scrolled on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse wheel operation</param>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.OrbitModifier3D">
            <summary>
            <para>The OrbitModifier3D provides the behaviour of orbit (rotation around camera target) by dragging the mouse</para>
            <para>It can be enabled by setting an OrbitModifier3D on the <see cref="P:SciChart.Charting3D.SciChart3DSurface.ChartModifier"/> property, or as part of a <see cref="T:SciChart.Charting3D.Modifiers.ModifierGroup3D"/></para>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.OrbitModifier3D.DegreesPerPixelSensitivityProperty">
            <summary>Defines the DegreesPerPixelSensitivity DependencyProperty</summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.OrbitModifier3D.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:SciChart.Charting3D.Modifiers.OrbitModifier3D"/></para>
            <para>The OrbitModifier3D provides the behaviour of orbit (rotation around camera target) by dragging the mouse</para>
            <para>It can be enabled by setting an OrbitModifier3D on the <see cref="P:SciChart.Charting3D.SciChart3DSurface.ChartModifier"/> property, or as part of a <see cref="T:SciChart.Charting3D.Modifiers.ModifierGroup3D"/></para>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.OrbitModifier3D.Dragging">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SciChart.Charting3D.Modifiers.OrbitModifier3D"/> is dragging.
            </summary>
            <value>
              <c>true</c> if dragging; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.OrbitModifier3D.LastPoint">
            <summary>
            Gets or sets the last mouse point.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.OrbitModifier3D.DegreesPerPixelSensitivity">
            <summary>
            Defines the number of degrees (angle) to orbit the target for each pixel of mouse-move. 
            </summary>        
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.OrbitModifier3D.OnModifierMouseDown(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.OrbitModifier3D.OnModifierMouseMove(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.OrbitModifier3D.OnModifierMouseUp(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.VertexSelectionModifier3D">
            <summary>
            <para>The VertexSelectionModifier3D provides the behaviour of mouse selection of vertices on a 3D chart</para>
            <para>It can be enabled by setting an VertexSelectionModifier3D on the <see cref="P:SciChart.Charting3D.SciChart3DSurface.ChartModifier"/> property</para>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.VertexSelectionModifier3D.IncludeSeriesProperty">
            <summary>
            Defines the IncludeSeries Attached Property. When set to True on a <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>, 
            the series will be included in vertex selection. When false, the series will be excluded
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.VertexSelectionModifier3D.DragReticuleStyleProperty">
            <summary>
            Defined DragReticuleStyle dependencyProperty. This is the style (TargetType=Rectangle) which is applied to the drag rectangle
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.VertexSelectionModifier3D.MinDragSensitivityProperty">
            <summary>
            Defines the MinDragSensitivity DependencyProperty
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.VertexSelectionModifier3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Modifiers.VertexSelectionModifier3D"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.VertexSelectionModifier3D.StartPoint">
            <summary>
            Gets the StartPoint for the drag operation
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.VertexSelectionModifier3D.DragReticuleStyle">
            <summary>
            Gets or sets the style to apply to the Drag Rectangle. TargetType is System.Windows.Shapes.Rectangle
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.VertexSelectionModifier3D.MinDragSensitivity">
            <summary>
            Gets or sets the drag sensitivity - rectangles dragged smaller than this size in the diagonal will be ignored when selecting. Default is 10 pixels
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.VertexSelectionModifier3D.GetIncludeSeries(System.Windows.DependencyObject)">
            <summary>
            Gets the include Series or not
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.VertexSelectionModifier3D.SetIncludeSeries(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the include Series or not
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.VertexSelectionModifier3D.OnAttached">
            <summary>
            Called when the Chart Modifier is attached to the Chart Surface
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.VertexSelectionModifier3D.OnDetached">
            <summary>
            Called immediately before the Chart Modifier is detached from the Chart Surface
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.VertexSelectionModifier3D.OnModifierMouseDown(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.VertexSelectionModifier3D.OnModifierMouseMove(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse move operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.VertexSelectionModifier3D.OnModifierMouseUp(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.VertexSelectionModifier3D.ClearAll">
            <summary>
            Clears all drag reticules from the chart surface
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.VertexSelectionModifier3D.UpdateReticulePosition(System.Windows.Point,System.Windows.Point)">
            <summary>
            Updates the drag reticule position.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="T:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D">
            <summary>
            <para>The ZoomExtentsModifier3D provides the behaviour of zoom camera to fit on mouse double click on a 3D chart</para>
            <para>It can be enabled by setting an ZoomExtentsModifier3D on the <see cref="P:SciChart.Charting3D.SciChart3DSurface.ChartModifier"/> property</para>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.ResetPositionProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.ResetPosition"/> dependency property</summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.ResetTargetProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.ResetTarget"/> dependency property</summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.AnimateDurationMsProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.AnimateDurationMs"/> dependency property</summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.PositionLerpProperty">
            <summary>Defines the <see cref="F:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.PositionLerpProperty"/> dependency property</summary>
        </member>
        <member name="F:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.AutoFitRadiusProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.AutoFitRadius"/> dependency property</summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D"/> class.</para>
            <para>The ZoomExtentsModifier3D provides the behaviour of zoom camera to fit on mouse double click on a 3D chart</para>
            <para>It can be enabled by setting an ZoomExtentsModifier3D on the <see cref="P:SciChart.Charting3D.SciChart3DSurface.ChartModifier"/> property</para>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.ResetPosition">
            <summary>
            <para>Gets or sets the reset position. This is the <see cref="T:System.Windows.Media.Media3D.Vector3D"/> in 3D world coordinates where the <see cref="P:SciChart.Charting3D.SciChart3DSurface.Camera"/> Position is moved to on double-click of the mouse.</para>
            <para>NOTE: This option is only used when <see cref="P:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.AutoFitRadius"/> is false</para>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.ResetTarget">
            <summary>
            <para>Gets or sets the reset target. This is the <see cref="T:System.Windows.Media.Media3D.Vector3D"/> in 3D world coordinates where the <see cref="P:SciChart.Charting3D.SciChart3DSurface.Camera"/> Target is moved to on double-click of the mouse</para>
            <para>NOTE: This option is only used when <see cref="P:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.AutoFitRadius"/> is false</para>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.AnimateDurationMs">
            <summary>
            Gets or sets the animation duration in milliseconds for any zoom operations 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.AutoFitRadius">
            <summary>
            When true, attempts to auto-fit the camera radius to fit the scene. When false, uses the <see cref="P:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.ResetPosition"/> and <see cref="P:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.ResetTarget"/> instead
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.ZoomExtentsCommand">
            <summary>
            Gets a Command which can be bound to. Invokes the ZoomExtents operation
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.OnModifierDoubleClick(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when a Mouse DoubleClick occurs on the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" />
            </summary>
            <param name="e">Arguments detailing the mouse button operation</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.OnPositionLerpChanged(System.Double)">
            <summary>
            Called when the <see cref="F:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.PositionLerpProperty"/> dependency property changes
            </summary>
            <param name="newValue">The interpolation value 0.0 to 1.0</param>
        </member>
        <member name="M:SciChart.Charting3D.Modifiers.ZoomExtentsModifier3D.UpdatePosition(SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3)">
            <summary>
            Updates camera position and target
            </summary>
            <param name="position">The position.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:SciChart.Charting3D.Interop.sIMVector2">
            <summary>
            Vector2 structure for interop with C++ layer
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Interop.sIMVector3">
            <summary>
            Vector3 structure for interop with C++ layer
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Interop.sIMVector4">
            <summary>
            Vector4 structure for interop with C++ layer
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Interop.sIMVertex">
            <summary>
            the immediate mode vertex for interop with C++ layer
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Interop.sIMLineVertex">
            <summary>
            the immediate mode lines vertex for interop with C++ layer
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Interop.Vectori.VectoriEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:SciChart.Charting3D.Interop.Vectorui.VectoruiEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:SciChart.Charting3D.Interop.Vectorul.VectorulEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:SciChart.Charting3D.Interop.Vectord.VectordEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:SciChart.Charting3D.Interop.Vectorf.VectorfEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:SciChart.Charting3D.Interop.Vectorstr.VectorstrEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:SciChart.Charting3D.Interop.Vectorwstr.VectorwstrEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:SciChart.Charting3D.Interop.VectorScrtEntity.VectorScrtEntityEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:SciChart.Charting3D.Annotations.FpsPresenter">
            <summary>
            Presents Frames Per Second on screen.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Annotations.FpsPresenter.UpdateScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to update the geometry in this element. This is where we need to cache geometry before draw.
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.Annotations.FpsPresenter.RenderScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to render this element. This is where geometry must be drawn to the 3D scene
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.Annotations.FpsPresenter.PerformSelection(System.Boolean,System.Collections.Generic.List{SciChart.Charting3D.Primitives.VertexId})">
            <summary>
            Performs selection on this entity, setting the IsSelected flag to True or False on the specified <see cref="T:SciChart.Charting3D.Primitives.VertexId">Vertex Ids</see>
            </summary>
            <param name="isSelected">if set to <c>true</c> the vertices become .</param>
            <param name="vertexIds">The vertex ids.</param>
        </member>
        <member name="T:SciChart.Charting3D.Annotations.XyzGizmo">
            <summary>
            Draws the XYZ Gizmo in the bottom left of the screen
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Annotations.XyzGizmo.AxisLength">
            <summary>
            Gets or sets 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Annotations.XyzGizmo.UpdateScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to update the geometry in this element. This is where we need to cache geometry before draw.
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.Annotations.XyzGizmo.RenderScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to render this element. This is where geometry must be drawn to the 3D scene
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.Annotations.XyzGizmo.PerformSelection(System.Boolean,System.Collections.Generic.List{SciChart.Charting3D.Primitives.VertexId})">
            <summary>
            Performs selection on this entity, setting the IsSelected flag to True or False on the specified <see cref="T:SciChart.Charting3D.Primitives.VertexId">Vertex Ids</see>
            </summary>
            <param name="isSelected">if set to <c>true</c> the vertices become .</param>
            <param name="vertexIds">The vertex ids.</param>
        </member>
        <member name="T:SciChart.Charting3D.Annotations.XyzAxisDebug3D">
            <summary>
            Defines an entity which draws an X-Y-Z line in Red Green Blue at the centre of the axis cube. Used to debug 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Annotations.XyzAxisDebug3D.#ctor(SciChart.Charting3D.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Annotations.XyzAxisDebug3D"/> class.
            </summary>
            <param name="worldDimensions">The world dimensions.</param>
            <param name="strokeThickness">The stroke thickness.</param>
        </member>
        <member name="M:SciChart.Charting3D.Annotations.XyzAxisDebug3D.UpdateScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to update the geometry in this element. This is where we need to cache geometry before draw.
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.Annotations.XyzAxisDebug3D.RenderScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to render this element. This is where geometry must be drawn to the 3D scene
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.Annotations.XyzAxisDebug3D.PerformSelection(System.Boolean,System.Collections.Generic.List{SciChart.Charting3D.Primitives.VertexId})">
            <summary>
            Performs selection on this entity, setting the IsSelected flag to True or False on the specified <see cref="T:SciChart.Charting3D.Primitives.VertexId">Vertex Ids</see>
            </summary>
            <param name="isSelected">if set to <c>true</c> the vertices become .</param>
            <param name="vertexIds">The vertex ids.</param>
        </member>
        <member name="T:SciChart.Charting3D.SciChartTextureTemplate">
            <summary>
            Keys for pre-packaged Textures 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChartTextureTemplate.Default">
            <summary>
            The default texture (blank)
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChartTextureTemplate.Circle">
            <summary>
            The Circle texture
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChartTextureTemplate.Square">
            <summary>
            The Square/Quad texture
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChartTextureTemplate.Triangle">
            <summary>
            The Triangle texture
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.SciChartMeshTemplate">
            <summary>
            Keys for pre-packaged 3D meshes
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChartMeshTemplate.Cube">
            <summary>
            The cube 3D mesh
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChartMeshTemplate.Sphere">
            <summary>
            The sphere 3D mesh
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChartMeshTemplate.Pyramid">
            <summary>
            The pyramid 3D mesh
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChartMeshTemplate.Cylinder">
            <summary>
            The cylinder 3D mesh
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.AssetManager">
            <summary>
            Wraps pre-packaged assets such as <see cref="T:SciChart.Charting3D.Texture2D"/> and <see cref="!:IndexedMesh3D"/> used as point-markers 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.AssetManager.GetTexture(SciChart.Charting3D.SciChartTextureTemplate)">
            <summary>
            Gets the pre-packaged <see cref="T:SciChart.Charting3D.Texture2D"/> keyed by <see cref="!:SciChartTexture"/> enum value
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.AssetManager.GetMesh(SciChart.Charting3D.SciChartMeshTemplate)">
            <summary>
            Gets the pre-packaged <see cref="!:IndexedMesh3D"/> keyed by <see cref="!:SciChartMesh"/> enum value
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Axis.Axis3D">
            <summary>
            Enumeration constants to define the 3D axis X, Y or Z.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Axis.Axis3D.XAxis">
            <summary>
            X axis.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Axis.Axis3D.YAxis">
            <summary>
            Y axis.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Axis.Axis3D.ZAxis">
            <summary>
            Z axis.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Axis.AxisSideClipping">
            <summary>
            Enumerates possible kinds of Renderable Series clipping by a particular side of the 3D axis
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Axis.AxisSideClipping.Default">
            <summary>
            Default clipping is <see cref="F:SciChart.Charting3D.Axis.AxisSideClipping.VisibleRange"/> for X and Z Axis, and <see cref="F:SciChart.Charting3D.Axis.AxisSideClipping.None"/> for Y Axis
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Axis.AxisSideClipping.None">
            <summary>
            Clipping is disabled
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Axis.AxisSideClipping.VisibleRange">
            <summary>
            Renderable Series is clipped by visible range
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Axis.DateTimeLabelProvider3D">
            <summary>
            The DateTimeLabelProvider3D is a pass-through which uses the <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.TextFormatting"/> and <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.CursorTextFormatting"/> properties
            to format axis and cursor label texts. It also uses the <see cref="P:SciChart.Charting3D.Axis.DateTimeAxis3D.SubDayTextFormatting"/> property to alter text-formatting when the date-range 
            switches to intra-day
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Axis.DateTimeLabelProvider3D.FormatCursorLabel(System.IComparable)">
            <summary>
            Formats a label for the cursor, from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted cursor label string
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Axis.DateTimeLabelProvider3D.FormatLabel(System.IComparable)">
            <summary>
            Formats a label for the axis from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted label string
            </returns>
            <exception cref="T:System.InvalidOperationException">The DateTimeLabelFormatter is only valid on instances of DateTimeAxis</exception>
        </member>
        <member name="T:SciChart.Charting3D.Axis.DateTimeAxis3D">
            <summary>
                Provides a Linear, Value DateTime Axis, capable of rendering DateTime ticks on the X-Axis of a
                <see cref="T:SciChart.Charting3D.SciChart3DSurface" />.
            </summary>
            <remarks>
                <para>
                    All <see cref="T:SciChart.Charting3D.Axis.AxisBase3D" /> derived types have a <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.TextFormatting" /> property to define axis
                    text labels, however a more advanced
                    way of defining axis label text is via the <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.LabelProvider" /> property - expecting a custom
                    <see cref="T:SciChart.Charting.Visuals.Axes.LabelProviders.ILabelProvider" /> derived type.
                </para>
                <para>
                    In order to separately format cursor labels please see the <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.CursorTextFormatting" /> or
                    again implement a customer <see cref="T:SciChart.Charting.Visuals.Axes.LabelProviders.ILabelProvider" />.
                </para>
                <para>
                    All axis types have many properties to define how they operate. These include
                    <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.DrawMajorGridLines" />, <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.DrawMinorGridLines" />,
                    <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.DrawMajorTicks" />, <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.DrawMinorTicks" />,
                    <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.DrawMajorBands" />, <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.DrawLabels" />.
                </para>
                <para>
                    Finally, all axis components can be styled. Please see the examples suite, the XAML Styling examples to see
                    how to use XAML to style axis elements.
                </para>
            </remarks>
            <seealso cref="T:SciChart.Charting3D.Axis.AxisBase3D" />
            <seealso cref="T:SciChart.Charting.Visuals.Axes.IAxis" />
            <seealso cref="T:SciChart.Charting3D.Axis.NumericAxis3D" />
            <seealso cref="T:SciChart.Charting.Visuals.Axes.LogarithmicAxis.LogarithmicNumericAxis" />
            <seealso cref="T:SciChart.Charting.Visuals.Axes.DateTimeAxis" />
            <seealso cref="T:SciChart.Charting.Visuals.Axes.CategoryDateTimeAxis" />
            <seealso cref="T:SciChart.Charting3D.Axis.TimeSpanAxis3D" />
        </member>
        <member name="F:SciChart.Charting3D.Axis.DateTimeAxis3D.SubDayTextFormattingProperty">
            <summary>
                Defines the SubDayTextFormatting DependencyProperty
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Axis.DateTimeAxis3D.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SciChart.Charting.Visuals.Axes.DateTimeAxis" /> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:SciChart.Charting3D.Axis.DateTimeAxis3D.SubDayTextFormatting">
            <summary>
                Gets or sets the Text Formatting String used for Axis Tick Labels when the range of the axis is sub-day
            </summary>
            <value>The text formatting.</value>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.Axis.DateTimeAxis3D.GetMaximumRange">
            <summary>
                Gets the Maximum Range of the axis, which is equal to the DataRange including any GrowBy factor applied
            </summary>
            <returns></returns>
        </member>
        <member name="T:SciChart.Charting3D.Axis.ILogarithmicAxis3D">
            <summary>
            Defines the interface to a logarithmic axis, the value axis which uses a logarithmic scale. 
            The <see cref="P:SciChart.Charting3D.Axis.ILogarithmicAxis3D.LogarithmicBase"/> property determines which base is used for the logarithm.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.ILogarithmicAxis3D.LogarithmicBase">
            <summary>
            Gets or sets the value which determines the base used for the logarithm.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.ILogarithmicAxis3D.ScientificNotation">
            <summary>
            Gets or sets used number format.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Axis.LogarithmicNumericAxis3D">
            <summary>
            Provides a Logarithmic, Value Numeric Axis 3D, capable of rendering double, int, short, byte, long ticks on the X, Y or Z-Axis of a <see cref="T:SciChart.Charting.Visuals.SciChartSurface"/>. 
            The <see cref="P:SciChart.Charting3D.Axis.LogarithmicNumericAxis3D.LogarithmicBase"/> property determines which base is used for the logarithm.
            </summary>
            <remarks>
            <para>All <see cref="T:SciChart.Charting.Visuals.Axes.AxisBase"/> derived types have a <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.TextFormatting"/> property to define axis text labels, however a more advanced
            way of defining axis label text is via the <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.LabelProvider"/> property - expecting a custom <see cref="T:SciChart.Charting.Visuals.Axes.LabelProviders.ILabelProvider"/> derived type. </para>
            <para>In order to separately format cursor labels please see the <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.CursorTextFormatting"/> or again implement a customer <see cref="T:SciChart.Charting.Visuals.Axes.LabelProviders.ILabelProvider"/>. </para>
            <para>All axis types have many properties to define how they operate. These include <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.DrawMajorGridLines"/>, <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.DrawMinorGridLines"/>, 
            <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.DrawMajorTicks"/>, <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.DrawMinorTicks"/>, <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.DrawMajorBands"/>, <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.DrawLabels"/>. </para>
            <para>Finally, all axis components can be styled. Please see the examples suite, the XAML Styling example to see how to use XAML to style axis elements.</para>
            </remarks>
            <seealso cref="T:SciChart.Charting.Visuals.Axes.AxisBase"/>
            <seealso cref="T:SciChart.Charting.Visuals.Axes.IAxis"/>
            <seealso cref="T:SciChart.Charting.Visuals.Axes.NumericAxis"/>
            <seealso cref="T:SciChart.Charting.Visuals.Axes.LogarithmicAxis.LogarithmicNumericAxis"/>
            <seealso cref="T:SciChart.Charting.Visuals.Axes.DateTimeAxis"/>
            <seealso cref="T:SciChart.Charting.Visuals.Axes.CategoryDateTimeAxis"/>
            <seealso cref="T:SciChart.Charting.Visuals.Axes.TimeSpanAxis"/>
        </member>
        <!-- Badly formed XML comment ignored for member "F:SciChart.Charting3D.Axis.LogarithmicNumericAxis3D.LogarithmicBaseProperty" -->
        <member name="F:SciChart.Charting3D.Axis.LogarithmicNumericAxis3D.ScientificNotationProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.Axis.LogarithmicNumericAxis3D.ScientificNotation"/> DependencyProperty
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Axis.LogarithmicNumericAxis3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.Visuals.Axes.LogarithmicAxis.LogarithmicNumericAxis"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.LogarithmicNumericAxis3D.LogarithmicBase">
            <summary>
            Gets or sets the value which determines the base used for the logarithm.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.LogarithmicNumericAxis3D.IsLogarithmicAxis">
            <summary>
            Gets a value indicating whether this instance is a logarithmic axis.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.LogarithmicNumericAxis3D.ScientificNotation">
            <summary>
            Gets or sets the <see cref="P:SciChart.Charting3D.Axis.LogarithmicNumericAxis3D.ScientificNotation"/> to use when rendering axis labels 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Axis.LogarithmicNumericAxis3D.GetAxis3DParams">
            <summary>
            Gets an <see cref="T:SciChart.Charting.Visuals.Axes.AxisParams" /> struct with info about the current axis setup
            </summary>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Axis.LogarithmicNumericAxis3D.IsVisibleRangeConstrained(SciChart.Data.Model.IRange)">
            <summary>
            Checks whether the current <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.VisibleRange" /> meets <see cref="P:SciChart.Charting3D.Axis.NumericAxis3D.MinimalZoomConstrain" />.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Axis.LogarithmicNumericAxis3D.IsValidRange(SciChart.Data.Model.IRange)">
            <summary>
            Checks whether <paramref name="range" /> is valid visible range for this axis
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Axis.LogarithmicNumericAxis3D.ToAxisDescriptor">
            <summary>
            CALLED INTERNALLY BY SCICHART: Performs computation before drawing (such as computing axis tick intervals, labels) and converts to an <see cref="T:SciChart.Charting3D.Primitives.IAxisDescriptor" /> instance which is passed to the 3D renderer
            </summary>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Axis.LogarithmicNumericAxis3D.GetDeltaCalculator">
            <summary>
            Returns an instance of an <see cref="T:SciChart.Charting.Numerics.DeltaCalculators.IDeltaCalculator" /> which is used to compute the data-values of Axis Gridlines, Ticks and Labels.
            When overridden in a derived class (e.g. <see cref="T:SciChart.Charting.Visuals.Axes.LogarithmicAxis.LogarithmicNumericAxis" />, the implementation of GetTickCalculator() changes to
            allow calculations specific to that axis type
            </summary>
            <returns>
            An <see cref="T:SciChart.Charting.Numerics.DeltaCalculators.IDeltaCalculator" /> instance
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Axis.LogarithmicNumericAxis3D.CalculateTicks">
            <summary>
            Overridden by derived types, called internal to calculate MinorTicks, MajorTicks before Axis drawing
            </summary>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Axis.LogarithmicNumericAxis3D.GetDefaultNonZeroRange">
            <summary>
            Returns an default non zero <see cref="T:SciChart.Data.Model.IRange" />, called internally by SciChart to reset the VisibleRange of an axis to an undefined state
            </summary>
            <returns></returns>
        </member>
        <member name="T:SciChart.Charting3D.Axis.LogarithmicNumericLabelProvider3D">
            <summary>
            LogarithmicNumericLabelProvider3D class for LogarithmicNumericAxis3D
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Axis.TimeSpanAxis3D">
            <summary>
                Provides a Linear, Value TimeSpan Axis, capable of rendering TimeSpan ticks on the X,Y or Z-Axis of a
                <see cref="T:SciChart.Charting3D.SciChart3DSurface" />.
            </summary>
            <remarks>
                <para>
                    All <see cref="T:SciChart.Charting3D.Axis.AxisBase3D" /> derived types have a <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.TextFormatting" /> property to define axis
                    text labels, however a more advanced
                    way of defining axis label text is via the <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.LabelProvider" /> property - expecting a custom
                    <see cref="T:SciChart.Charting.Visuals.Axes.LabelProviders.ILabelProvider" /> derived type.
                </para>
                <para>
                    In order to separately format cursor labels please see the <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.CursorTextFormatting" /> or
                    again implement a customer <see cref="T:SciChart.Charting.Visuals.Axes.LabelProviders.ILabelProvider" />.
                </para>
                <para>
                    All axis types have many properties to define how they operate. These include
                    <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.DrawMajorGridLines" />, <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.DrawMinorGridLines" />,
                    <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.DrawMajorTicks" />, <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.DrawMinorTicks" />,
                    <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.DrawMajorBands" />, <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.DrawLabels" />.
                </para>
                <para>
                    Finally, all axis components can be styled. Please see the examples suite, the XAML Styling examples to see
                    how to use XAML to style axis elements.
                </para>
            </remarks>
            <seealso cref="T:SciChart.Charting3D.Axis.AxisBase3D" />
            <seealso cref="T:SciChart.Charting.Visuals.Axes.IAxis" />
            <seealso cref="T:SciChart.Charting3D.Axis.NumericAxis3D" />
            <seealso cref="T:SciChart.Charting.Visuals.Axes.LogarithmicAxis.LogarithmicNumericAxis" />
            <seealso cref="T:SciChart.Charting.Visuals.Axes.DateTimeAxis" />
            <seealso cref="T:SciChart.Charting.Visuals.Axes.CategoryDateTimeAxis" />
            <seealso cref="T:SciChart.Charting3D.Axis.DateTimeAxis3D" />
        </member>
        <member name="M:SciChart.Charting3D.Axis.TimeSpanAxis3D.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SciChart.Charting.Visuals.Axes.DateTimeAxis" /> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.Axis.TimeSpanAxis3D.GetMaximumRange">
            <summary>
                Gets the Maximum Range of the axis, which is equal to the DataRange including any GrowBy factor applied
            </summary>
            <returns></returns>
        </member>
        <member name="T:SciChart.Charting3D.Axis.TimeSpanAxis3DBase">
            <summary>
            A common base class for <see cref="T:SciChart.Charting.Visuals.Axes.DateTimeAxis"/> and <see cref="T:SciChart.Charting.Visuals.Axes.TimeSpanAxis"/>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Axis.TimeSpanAxis3DBase.GetUndefinedRange">
            <summary>
            Returns an undefined <see cref="T:SciChart.Data.Model.IRange" />, called internally by SciChart to reset the VisibleRange of an axis to an undefined state
            </summary>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Axis.TimeSpanAxis3DBase.GetDefaultNonZeroRange">
            <summary>
            Returns an default non zero <see cref="T:SciChart.Data.Model.IRange" />, called internally by SciChart to reset the VisibleRange of an axis to an undefined state
            </summary>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Axis.TimeSpanAxis3DBase.IsOfValidType(SciChart.Data.Model.IRange)">
            <summary>
            Checks whether <paramref name="range" /> is not Null and is of valid type for this axis
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Axis.TimeSpanAxis3DBase.OnIdChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a dependency property changes that requires the parent surface redraws
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:SciChart.Charting3D.Axis.TimeSpanAxis3DBase.CalculateDelta">
            <summary>
            Calcuates the delta's for use in this render pass
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Axis.TimeSpanAxis3DBase.GetDeltaCalculator">
            <summary>
            Returns an instance of an <see cref="T:SciChart.Charting.Numerics.DeltaCalculators.IDeltaCalculator" /> which is used to compute the data-values of <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.MajorDelta" />, <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.MinorDelta" />.
            Overridden by derived types to allow calculations specific to that axis type.
            </summary>
            <returns>
            An <see cref="T:SciChart.Charting.Numerics.DeltaCalculators.IDeltaCalculator" /> instance
            </returns>
        </member>
        <member name="T:SciChart.Charting3D.Axis.TimeSpanLabelProvider3D">
            <summary>
            The TimeSpanLabelProvider3D is a pass-through which uses the <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.TextFormatting"/> and <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.CursorTextFormatting"/> properties
            to format axis and cursor label texts from TimeSpan data types. Used by the <see cref="T:SciChart.Charting3D.Axis.TimeSpanAxis3D"/> type.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Axis.TimeSpanLabelProvider3D.FormatCursorLabel(System.IComparable)">
            <summary>
            Formats a label for the cursor, from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted cursor label string
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Axis.TimeSpanLabelProvider3D.FormatLabel(System.IComparable)">
            <summary>
            Formats a label for the axis from the specified data-value passed in
            </summary>
            <param name="dataValue">The data-value to format</param>
            <returns>
            The formatted label string
            </returns>
            <exception cref="T:System.InvalidOperationException">The DateTimeLabelFormatter is only valid on instances of DateTimeAxis</exception>
        </member>
        <member name="T:SciChart.Charting3D.Axis.AxisCubeEntity">
            <summary>
            Defines an entity which renders an Axis Cube in the 3D scene
            </summary>
            <remarks>Except it doesn't. Currently the Axis Cube is rendered in C++. 
            Here is a TODO to pull it up to the C# layer</remarks>
        </member>
        <member name="M:SciChart.Charting3D.Axis.AxisCubeEntity.UpdateScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to update the geometry in this element. This is where we need to cache geometry before draw.
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.Axis.AxisCubeEntity.RenderScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to render this element. This is where geometry must be drawn to the 3D scene
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.Axis.AxisCubeEntity.PerformSelection(System.Boolean,System.Collections.Generic.List{SciChart.Charting3D.Primitives.VertexId})">
            <summary>
            Performs selection on this entity, setting the IsSelected flag to True or False on the specified <see cref="T:SciChart.Charting3D.Primitives.VertexId">Vertex Ids</see>
            </summary>
            <param name="isSelected">if set to <c>true</c> the vertices become .</param>
            <param name="vertexIds">The vertex ids.</param>
        </member>
        <member name="T:SciChart.Charting3D.Axis.IAxis3D">
            <summary>
            Defines the base interface to an <see cref="T:SciChart.Charting3D.Axis.AxisBase3D"/> used throughout Scichart
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.IAxis3D.HasChanges">
            <summary>
            Gets whether this instance has changes. When true, caches will be invalidated and the entire series drawn afresh. When false, where possible vertices will be cached
            </summary>   
        </member>
        <member name="P:SciChart.Charting3D.Axis.IAxis3D.ParentSurface">
            <summary>
            Gets or sets the ParentSurface that this Axis is associated with
            </summary>
            <value>The parent surface.</value>
        </member>
        <member name="P:SciChart.Charting3D.Axis.IAxis3D.IsYAxis">
            <summary>
            Gets whether the current axis is an Y-Axis or not
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.IAxis3D.IsZAxis">
            <summary>
            Gets whether the current axis is an Z-Axis or not
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.IAxis3D.TickLabelAlignment">
            <summary>
            Gets or sets the TextAlignment of tick labels for the axis drawn in the 3D Viewport 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Axis.IAxis3D.ToAxisDescriptor">
            <summary>
            CALLED INTERNALLY BY SCICHART: Performs computation before drawing (such as computing axis tick intervals, labels) and converts to an <see cref="T:SciChart.Charting3D.Primitives.IAxisDescriptor"/> instance which is passed to the 3D renderer
            </summary>
            <returns></returns>
        </member>
        <member name="P:SciChart.Charting3D.Axis.IAxis3D.FontFamily">
            <summary>
            Gets or sets the FontFamily for the Axis
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.IAxis3D.FontSize">
            <summary>
            Gets or sets the FontSize for the axis
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.IAxis3D.PositiveSideClipping">
            <summary>
            Gets or sets a value determining how Renderable Series is clipped by axis at its positive side.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.IAxis3D.NegativeSideClipping">
            <summary>
            Gets or sets a value determining how Renderable Series is clipped by axis at its negative side.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Axis.TextAlignment3D">
            <summary>
            Enumeration constants to define alignment of Text in 3D space
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Axis.TextAlignment3D.Default">
            <summary>
            Default alignment
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Axis.TextAlignment3D.Camera">
            <summary>
            Align (billboard) to camera
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Axis.TextAlignment3D.ScreenHorizontal">
            <summary>
            2D text
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Axis.TextAlignment3D.ScreenAutoRotated">
            <summary>
            2D text, rotated with alignment to corresponding object ( i.e. tick )
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Axis.AxisBase3D">
            <summary>
            Provides an abstract base class for 3D Axis in the SciChart3D Project
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Axis.AxisBase3D.TickLabelAlignmentProperty">
            <summary>
            Defines the TickLabelAlignment DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Axis.AxisBase3D.PositiveSideClippingProperty">
            <summary>
            Defines the PositiveSideClipping DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Axis.AxisBase3D.NegativeSideClippingProperty">
            <summary>
            Defines the NegativeSideClipping DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Axis.AxisBase3D.PlaneBorderThicknessProperty">
            <summary>
            Defines the PlaneBorderThickness DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Axis.AxisBase3D.PlaneBorderColorProperty">
            <summary>
            Defines the PlaneBorderColor DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Axis.AxisBase3D.AxisPlaneBackgroundFillProperty">
            <summary>
            Defines the AxisPlaneBackgroundFill DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Axis.AxisBase3D.LabelDepthTestEnabledProperty">
            <summary>
            Defines the DrawLabels DependencyProperty
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Axis.AxisBase3D.#cctor">
            <summary>
            Initializes the <see cref="T:SciChart.Charting3D.Axis.AxisBase3D"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Axis.AxisBase3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Axis.AxisBase3D"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.AxisBase3D.HasChanges">
            <summary>
            Gets whether this instance has changes. When true, caches will be invalidated and the entire series drawn afresh. When false, where possible vertices will be cached
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.AxisBase3D.ParentSurface">
            <summary>
            Gets or sets the ParentSurface that this Axis is associated with
            </summary>
            <value>The parent surface.</value>
        </member>
        <member name="P:SciChart.Charting3D.Axis.AxisBase3D.IsYAxis">
            <summary>
            Gets whether the current axis is an Y-Axis or not
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.AxisBase3D.IsZAxis">
            <summary>
            Gets whether the current axis is an Y-Axis or not
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.AxisBase3D.AxisPlaneBackgroundFill">
            <summary>
            Gets or sets the Fill of the Axis Background. Defaults to Transparent.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:SciChart.Charting3D.Axis.AxisBase3D.LabelDepthTestEnabled">
            <summary>
            If true : labels text is always on top
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.AxisBase3D.PositiveSideClipping">
            <summary>
            Gets or sets a value determining how Renderable Series is clipped by axis at its positive side.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.AxisBase3D.NegativeSideClipping">
            <summary>
            Gets or sets a value determining how Renderable Series is clipped by axis at its negative side.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.AxisBase3D.TickLabelAlignment">
            <summary>
            Gets or sets the TextAlignment of tick labels for the axis drawn in the 3D Viewport 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.AxisBase3D.PlaneBorderThickness">
            <summary>
            Gets or sets a thickness of the axis plane border.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.AxisBase3D.PlaneBorderColor">
            <summary>
            Gets or sets a color of the axis plane border.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Axis.AxisBase3D.InvalidateParent(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Provides a DependencyProperty callback which invalidates the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:SciChart.Charting3D.Axis.AxisBase3D.OnDependencyPropertyChanged">
            <summary>
            Called when a dependency property changes that requires the parent surface redraws
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Axis.AxisBase3D.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Axis.AxisBase3D.InvalidateParentSurface">
            <summary>
            Invalidates the parent surface, asynchronously triggerring a redraw. Only works if the Axis is currently attached (check ParentSurface property != null)
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Axis.AxisBase3D.GetMaximumRange">
            <summary>
            Gets the maximum range.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Axis.AxisBase3D.GetAxisSize">
            <summary>
            Gets the size of the axis in the Viewport
            </summary>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Axis.AxisBase3D.GetAxisOffset">
            <summary>
            Returns the offset of the Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Axis.AxisBase3D.GetCurrentCoordinateCalculator">
            <summary>
            Gets the current <see cref="T:SciChart.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1" /> for this Axis, based on current Visible Range and axis type
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SciChart.Charting3D.Axis.AxisBase3D.ToAxisDescriptor">
            <summary>
            CALLED INTERNALLY BY SCICHART: Performs computation before drawing (such as computing axis tick intervals, labels) and converts to an <see cref="T:SciChart.Charting3D.Primitives.IAxisDescriptor" /> instance which is passed to the 3D renderer
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">The Axis requires a LabelProvider to format text labels. Please set the AxisBase3D.LabelProvider property to a valid LabelProvider</exception>
        </member>
        <member name="M:SciChart.Charting3D.Axis.AxisBase3D.OnTickOrGridLineStyleChanged">
            <summary>
            Called when a dependency property or Major/Minor Tick or Grid Lien Style changes changes that requires the parent surface redraws
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Axis.NumericAxis3D">
            <summary>
            The NumericAxis3D provides a 3D axis type which supports numeric (Double, Single, Long, Int) values
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Axis.NumericAxis3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Axis.NumericAxis3D"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Axis.NumericAxis3D.MajorDelta">
            <summary>
            Gets or sets the major delta.
            </summary>
            <value>The major delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:SciChart.Charting3D.Axis.NumericAxis3D.MinorDelta">
            <summary>
            Gets or sets the minor delta.
            </summary>
            <value>The minor delta.</value>
            <remarks></remarks>
        </member>
        <member name="P:SciChart.Charting3D.Axis.NumericAxis3D.MinimalZoomConstrain">
            <summary>
            Gets or sets the MinimalZoomConstrain of the Axis. This is used to set minimum distance between Min and Max of the VisibleRange 
            </summary>
            <value>The minimum distance between Min and Max of the VisibleRange</value>
        </member>
        <member name="M:SciChart.Charting3D.Axis.NumericAxis3D.GetUndefinedRange">
            <summary>
            Returns an undefined <see cref="T:SciChart.Data.Model.IRange" />, called internally by SciChart to reset the VisibleRange of an axis to an undefined state
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SciChart.Charting3D.Axis.NumericAxis3D.GetDefaultNonZeroRange">
            <summary>
            Returns an default non zero <see cref="T:SciChart.Data.Model.IRange" />, called internally by SciChart to reset the VisibleRange of an axis to an undefined state
            </summary>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Axis.NumericAxis3D.IsOfValidType(SciChart.Data.Model.IRange)">
            <summary>
            Checks whether <paramref name="range" /> is of valid type for this axis
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Axis.NumericAxis3D.OnIdChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a dependency property changes that requires the parent surface redraws
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:SciChart.Charting3D.Axis.NumericAxis3D.GetDeltaCalculator">
            <summary>
            Returns an instance of an <see cref="T:SciChart.Charting.Numerics.DeltaCalculators.IDeltaCalculator"/> which is used to compute the data-values of Axis Gridlines, Ticks and Labels. 
            When overridden in a derived class (e.g. <see cref="T:SciChart.Charting.Visuals.Axes.LogarithmicAxis.LogarithmicNumericAxis"/>, the implementation of GetTickCalculator() changes to 
            allow calculations specific to that axis type
            </summary>
            <returns>An <see cref="T:SciChart.Charting.Numerics.DeltaCalculators.IDeltaCalculator"/> instance</returns>
        </member>
        <member name="M:SciChart.Charting3D.Axis.NumericAxis3D.CalculateDelta">
            <summary>
            Calcuates the delta's for use in this render pass
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.Object.ObjectCoordinateMode">
            <summary>
            Enumeration constants to define the Coordinate mode used to place an object model.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.Object.ObjectCoordinateMode.WorldCoordinates">
            <summary>
            WorldCoordinates, requires that coordinates X, Y, Z are world coordinates.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.Object.ObjectCoordinateMode.DataCoordinates">
            <summary>
            DataCoordinates, requires that coordinates X, Y, Z are data-values.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.Object.ObjectCoordinateMode.Relative">
            <summary>
            Relative, requires that coordinates X, Y, Z are double values between 0.0 and 1.0.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.Object.Rotation3D">
            <summary>
            A class which have parameters for 3D rotation.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.Object.Rotation3D.Axis">
            <summary>
            Gets or Sets the 3D axis of rotation direction X, Y or Z.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.Object.Rotation3D.Angle">
            <summary>
            Gets or Sets rotation angle.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.Object.ObjectModelSource">
            <summary>
             A class which allows loading and converts to bites *.obj model file or object model file <see cref="T:System.IO.Stream"/>.
             </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Object.ObjectModelSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Visuals.Object.ObjectModelSource"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Object.ObjectModelSource.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Visuals.Object.ObjectModelSource"/> class and specified the object model file <see cref="T:System.IO.Stream"/>. <see cref="T:System.IO.Stream"/> will be closed automatically.
            </summary>
            <param name="streamSource">The object model file <see cref="T:System.IO.Stream"/></param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Object.ObjectModelSource.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Visuals.Object.ObjectModelSource"/> class and specified the <see cref="T:System.Uri"/> source of the object model file.
            </summary>
            <param name="source">The <see cref="T:System.Uri"/> source of the object model file</param>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.Object.ObjectModelSource.Source">
            <summary>
            Gets or sets the <see cref="T:System.Uri"/> source of the object model file.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.Object.ObjectModelSource.StreamSource">
            <summary>
            Sets the <see cref="T:System.IO.Stream"/> of the object model file. <see cref="T:System.IO.Stream"/> will be closed automatically.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.Object.TextureSource">
            <summary>
            A class which allows loading *.jpg, *.png texture file or texture file <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Object.TextureSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Visuals.Object.TextureSource"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Object.TextureSource.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Visuals.Object.TextureSource"/> class using the specified texture file <see cref="T:System.IO.Stream"/>. <see cref="T:System.IO.Stream"/> will be closed automatically.
            </summary>
            <param name="streamSource">The texture file <see cref="T:System.IO.Stream"/></param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Object.TextureSource.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Visuals.Object.TextureSource"/> class using the specified <see cref="T:System.Uri"/> source of the *.jpg, *.png texture file.
            </summary>
            <param name="source">The object model <see cref="T:System.Uri"/> source file</param>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.Object.TextureSource.StreamSource">
            <summary>
            Sets the <see cref="T:System.IO.Stream"/> of the *.jpg, *.png texture file. <see cref="T:System.IO.Stream"/> will be closed automatically. 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.Object.TextureSource.Source">
            <summary>
            Gets or sets the <see cref="T:System.Uri"/> source of the object model file.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.Object.ObjectModel3D">
            <summary>
            Defines the class for object model within SciChart3D.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.Object.ObjectModel3D.PositionProperty">
            <summary>
            Defines the Position dependency property 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.Object.ObjectModel3D.ScaleProperty">
            <summary>
            Defines the Scale dependency property 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.Object.ObjectModel3D.DrawBoundingBoxProperty">
            <summary>
            Defines the DrawBoundingBox dependency property 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.Object.ObjectModel3D.BoundingBoxStrokeThicknessProperty">
            <summary>
            Defines the BoundingBoxStrokeThickness dependency property 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.Object.ObjectModel3D.BoundingBoxStrokeProperty">
            <summary>
            Defines the BoundingBoxStroke dependency property 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.Object.ObjectModel3D.SourceProperty">
            <summary>
            Defines the Source dependency property 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.Object.ObjectModel3D.CoordinateModeProperty">
            <summary>
            Defines the CoordinateMode dependency property 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.Object.ObjectModel3D.RotationProperty">
            <summary>
            Defines the Rotation dependency property 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.Object.ObjectModel3D.TextureSourceProperty">
            <summary>
            Defines the TextureSource dependency property 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.Object.ObjectModel3D.DiffuseColorProperty">
            <summary>
            Defines the DiffuseColor dependency property 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Object.ObjectModel3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Visuals.Object.ObjectModel3D"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Object.ObjectModel3D.#ctor(System.Uri,System.Windows.Media.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Visuals.Object.ObjectModel3D"/> class using the specified object model <see cref="T:System.Uri"/> source and diffuse model color.
            </summary>
            <param name="modelSource">The object model <see cref="T:System.Uri"/> source file</param>
            <param name="diffuseColor">The diffuse model color</param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Object.ObjectModel3D.#ctor(System.IO.Stream,System.Windows.Media.Color)">
            <summary>    
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Visuals.Object.ObjectModel3D"/> class using the specified texture file <see cref="T:System.IO.Stream"/>. <see cref="T:System.IO.Stream"/> will be closed automatically.
            </summary>
            <param name="modelStreamSource">The object model file <see cref="T:System.IO.Stream"/>. <see cref="T:System.IO.Stream"/> will be closed automatically.</param>
            <param name="diffuseColor">The diffuse model color</param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Object.ObjectModel3D.#ctor(System.Uri,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Visuals.Object.ObjectModel3D"/> class using the specified object model <see cref="T:System.Uri"/> source file and texture <see cref="T:System.Uri"/> source file.
            </summary>
            <param name="modelSource">The object model <see cref="T:System.Uri"/> source file</param>
            <param name="textureSource">The texture <see cref="T:System.Uri"/> source file</param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Object.ObjectModel3D.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Visuals.Object.ObjectModel3D"/> class using the specified texture file <see cref="T:System.IO.Stream"/> and texture file <see cref="T:System.IO.Stream"/>. All Streams will be closed automatically.
            </summary>
            <param name="modelStreamSource">The object model file <see cref="T:System.IO.Stream"/>. <see cref="T:System.IO.Stream"/> will be closed automatically.</param>
            <param name="textureStreamSource">The texture file <see cref="T:System.IO.Stream"/>. <see cref="T:System.IO.Stream"/> will be closed automatically.</param>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.Object.ObjectModel3D.BoundingBoxStroke">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Color"/> of the bounding model box.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.Object.ObjectModel3D.DiffuseColor">
            <summary>
            Gets or sets the diffuse <see cref="T:System.Windows.Media.Color"/> of the object model
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.Object.ObjectModel3D.TextureSource">
            <summary>
            Gets or sets the <see cref="P:SciChart.Charting3D.Visuals.Object.ObjectModel3D.TextureSource"/> to use when setting texture source for object model. It allows loading *.jpg, *.png texture file or texture file <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.Object.ObjectModel3D.CoordinateMode">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.Visuals.Object.ObjectCoordinateMode"/> to use when placing the object model. E.g. the default of DataCoordinates requires that X,Y,Z coordinates are data-values. The value
            of Relative requires that X,Y,Z are double values from 0.0 to 1.0. And the WorldCoonrdinates value requires that X,Y,Z are double values world coordinates.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.Object.ObjectModel3D.Rotation">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.Visuals.Object.Rotation3D"/> parameters for object model rotation.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.Object.ObjectModel3D.Source">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.Visuals.Object.ObjectModelSource"/> to use when setting object model source. It allows loading *.jpg, *.png texture file or texture file <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.Object.ObjectModel3D.BoundingBoxStrokeThickness">
            <summary>
            Gets or sets the bounding box lines thickness.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.Object.ObjectModel3D.DrawBoundingBox">
            <summary>
            Gets or sets a value indicating whether to draw bounding box or not. 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.Object.ObjectModel3D.Scale">
            <summary>
            Gets or sets the scale factor of the object model.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.Object.ObjectModel3D.Position">
            <summary>
            Gets ot sets the position of the object model.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.Object.ObjectModel3D.IsAttached">
            <summary>
            Gets or sets whether this Element is attached to a parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
            <value><c>true</c> if this instance is attached; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.Object.ObjectModel3D.ParentSurface">
            <summary>
            Gets or sets the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> to perform operations on 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Object.ObjectModel3D.LoadObjectModel(System.IO.Stream)">
            <summary>
            Load the object model.
            </summary>
            <param name="streamSource">Object model file <see cref="T:System.IO.Stream"/></param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Object.ObjectModel3D.LoadObjectModel(System.Uri)">
            <summary>
            Load the object model.
            </summary>
            <param name="uriSource">Object model file <see cref="T:System.Uri"/></param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Object.ObjectModel3D.LoadTexture(System.IO.Stream)">
            <summary>
            Load the object model texture.
            </summary>
            <param name="streamSource">Object model texture file <see cref="T:System.IO.Stream"/></param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Object.ObjectModel3D.LoadTexture(System.Uri)">
            <summary>
            Load the object model texture.
            </summary>
            <param name="uriSource">Object model texture file <see cref="T:System.Uri"></see></param>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.Object.ObjSceneEntity">
            <summary>
             A class which allows loading of Wavefront *.obj files into the 3D Scene
             </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.Object.ObjSceneEntity._xCalc">
            <summary>
            The XAxis <see cref="T:SciChart.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/>, which converts pixel to world coordinates. 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.Object.ObjSceneEntity._yCalc">
            <summary>
            The YAxis <see cref="T:SciChart.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/>, which converts pixel to world coordinates. 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.Object.ObjSceneEntity._zCalc">
            <summary>
            The ZAxis <see cref="T:SciChart.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/>, which converts pixel to world coordinates. 
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.AxisLabels.XyAxisPlane">
            <summary>
            Defines the DrawLabelsMode for XY axis plane on the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.AxisLabels.XyAxisPlane.DrawLabelsModeProperty">
            <summary>
            Defines the DrawLabelsMode attached property
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.AxisLabels.XyAxisPlane.SetDrawLabelsMode(System.Windows.DependencyObject,SciChart.Charting3D.Interop.eAxisPlaneDrawLabelsMode)">
            <summary>
            Sets the DrawLabelsMode attached property
            </summary>
            <param name="element">The element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.AxisLabels.XyAxisPlane.GetDrawLabelsMode(System.Windows.DependencyObject)">
            <summary>
            Gets the DrawLabelsMode attached property
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.AxisLabels.ZxAxisPlane">
            <summary>
            Defines the DrawLabelsMode for ZX axis plane on the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.AxisLabels.ZxAxisPlane.DrawLabelsModeProperty">
            <summary>
            Defines the DrawLabelsMode attached property
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.AxisLabels.ZxAxisPlane.SetDrawLabelsMode(System.Windows.DependencyObject,SciChart.Charting3D.Interop.eAxisPlaneDrawLabelsMode)">
            <summary>
            Sets the DrawLabelsMode attached property
            </summary>
            <param name="element">The element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.AxisLabels.ZxAxisPlane.GetDrawLabelsMode(System.Windows.DependencyObject)">
            <summary>
            Gets the DrawLabelsMode attached property
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.AxisLabels.ZyAxisPlane">
            <summary>
            Defines the DrawLabelsMode for ZY axis plane on the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.AxisLabels.ZyAxisPlane.DrawLabelsModeProperty">
            <summary>
            Defines the DrawLabelsMode attached property
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.AxisLabels.ZyAxisPlane.SetDrawLabelsMode(System.Windows.DependencyObject,SciChart.Charting3D.Interop.eAxisPlaneDrawLabelsMode)">
            <summary>
            Sets the DrawLabelsMode attached property
            </summary>
            <param name="element">The element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.AxisLabels.ZyAxisPlane.GetDrawLabelsMode(System.Windows.DependencyObject)">
            <summary>
            Gets the DrawLabelsMode attached property
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.Primitives.Font3DStyle">
            <summary>
            Enumerates possible styles of the 3D font.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.Primitives.Font3D">
            <summary>
            Defines the wrapper for the the <see cref="T:SciChart.Charting3D.Interop.TSRFont"/> class from the c++, which provide text drawing functionality
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.Font3D.#ctor(System.String,System.UInt32,SciChart.Charting3D.Visuals.Primitives.Font3DStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Visuals.Primitives.Font3D"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.Font3D.Begin">
            <summary>
            Begins creating the text on the 3D surface
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.Font3D.BeginBillboard(SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3)">
            <summary>
            Begins creating the text on the 3D surface
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.Font3D.BeginScreenSpace(System.Single,System.Single,System.Single)">
            <summary>
            Begins creating the text on the 3D surface
            </summary>
            <param name="rotationAngle"></param>
            <param name="f"></param>
            <param name="f1"></param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.Font3D.End">
            <summary>
            Ends creating the text and draws it on the 3D surface
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.Font3D.EndScreenSpace">
            <summary>
            Ends creating the text and draws it on the 3D surface
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.Font3D.AddText(System.String,System.Windows.Media.Color,System.Single,System.Single,System.Single)">
            <summary>
            Adds text which will be rendered after <see cref="M:SciChart.Charting3D.Visuals.Primitives.Font3D.End"/> method was called
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.Font3D.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.Primitives.ISolidMesh">
            <summary>
            Defines the interface to a SolidMesh, a re-usable 3D model consisting of triangles which may be dynamically created, frozen, and repeatedly drawn.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.ISolidMesh.SetTextureCoord(System.Single,System.Single)">
            <summary>
            Sets texture coordinates for the current vertex.
            </summary>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.ISolidMesh.SetTexture(SciChart.Charting3D.Texture2D)">
            <summary>
            Sets a <see cref="T:SciChart.Charting3D.Texture2D"/> to render on the current mesh.
            </summary>
            <param name="texture">A texture to be rendered.</param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.ISolidMesh.SetVertex3(SciChart.Charting3D.Vector3)">
            <summary>
            Sets a position of the current vertex.
            </summary>
            <param name="xyzVector">The <see cref="T:SciChart.Charting3D.Vector3"/> which defines the position.</param>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.Primitives.SolidMesh">
            <summary>
            Defines a re-usable 3D model consisting of triangles which may be dynamically created, frozen, and repeatedly drawn.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.SolidMesh.#ctor(System.Boolean)">
            <summary>
            Creates an instance of a <see cref="T:SciChart.Charting3D.Visuals.Primitives.SolidMesh"/>.
            </summary>
            <param name="isTriangleStrips"></param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.SolidMesh.SetOpacity(System.Single)">
            <summary>
            Sets the opacity for the current vertex.
            </summary>
            <param name="opacity">The opacity.</param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.SolidMesh.SetVertexColor(System.Windows.Media.Color)">
            <summary>
            Sets the Vertex Color of the current vertex.
            </summary>
            <param name="color">The color.</param>
            <exception cref="T:System.InvalidOperationException">This instance is frozen and no further modifications may be made</exception>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.SolidMesh.SetTextureCoord(System.Single,System.Single)">
            <summary>
            Sets texture coordinates for the current vertex.
            </summary>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.SolidMesh.SetVertex4(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the X,Y,Z,W value of the current vertex
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="w">The w parameter, often the size.</param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.SolidMesh.SetVertex3(SciChart.Charting3D.Vector3)">
            <summary>
            Sets a position of the current vertex.
            </summary>
            <param name="xyzVector">The <see cref="T:SciChart.Charting3D.Vector3"/> which defines the position.</param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.SolidMesh.SetVertex3(System.Single,System.Single,System.Single)">
            <summary>
            Sets the X,Y,Z position of the current vertex
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.SolidMesh.Freeze">
            <summary>
            Freezes this instance. No further drawing may be done
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.SolidMesh.SetTexture(SciChart.Charting3D.Texture2D)">
            <summary>
            Sets a <see cref="T:SciChart.Charting3D.Texture2D"/> to render on the current mesh.
            </summary>
            <param name="texture">A texture to be rendered.</param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.SolidMesh.Draw">
            <summary>
            Draws this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">Must call ImmediatePointsContext.Freeze() to complete the vertices before calling Draw()</exception>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.SolidMesh.Draw(SciChart.Charting3D.Interop.TSRShaderEffect)">
            <summary>
            Draws this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">Must call ImmediatePointsContext.Freeze() to complete the vertices before calling Draw()</exception>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.SolidMesh.SetSelectionId(System.UInt64)">
            <summary>
            Sets the selection identifier for the current vertex.
            </summary>
            <param name="selectionId">The selection identifier.</param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.Primitives.SolidMesh.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.RenderableSeries.FreeSurface.DisplacementValueCalc">
            <summary>
            Encapsulates logic of displacement value and axes propagation vector encoding.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.FreeSurface.DisplacementValueCalc.GetCoordinate(System.Double)">
            <summary>
            Calculates displacement value in the coordinate space.
            </summary>
            <param name="value">Displacement value to in the date coordinate space.</param>
            <returns>Calculated displacement value in the coordinate space.</returns>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.FreeSurface.DisplacementValueCalc.GetAxesPropagation(System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets displacement propagation value for each axes.
            </summary>
            <param name="xAxisPropagation">Displacement propagation value for X axis.</param>
            <param name="yAxisPropagation">Displacement propagation value for Y axis.</param>
            <param name="zAxisPropagation">Displacement propagation value for Z axis.</param>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.RenderableSeries.Impulse.ImpulseUniformGridSceneEntityHelper">
            <summary>
            A  class for a <see cref="T:SciChart.Charting3D.RenderableSeries.ImpulseSceneEntity"/> which uses <see cref="T:SciChart.Charting3D.Model.UniformGridDataSeries3D`3"/> data as input, and transforms
            into scene geometry 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.Impulse.ImpulseUniformGridSceneEntityHelper.PerformSelection(SciChart.Charting3D.Model.IDataSeries3D,System.Boolean,System.Collections.Generic.List{SciChart.Charting3D.Primitives.VertexId})">
            <summary>
            Performs selection, setting the <paramref name="isSelected"/> flag to true or false on the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> for the given list of <see cref="T:SciChart.Charting3D.Primitives.VertexId">Vertex Ids</see>
            </summary>
            <param name="dataSeries">The data series.</param>
            <param name="isSelected">if set to <c>true</c> [is selected].</param>
            <param name="vertexIds">The vertex ids.</param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.Impulse.ImpulseUniformGridSceneEntityHelper.GetXyzDataValue(SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.Model.IPointSeries3D)">
            <summary>
            Gets the hit data value from the <paramref name="lastPointSeries"/> based on the <paramref name="hitTestInfo"/> 
            </summary>
            <returns>
            null if the <paramref name="hitTestInfo"/> isn't valid
            Vector3D hit data value if <paramref name="hitTestInfo"/> is valid
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.Impulse.ImpulseUniformGridSceneEntityHelper.ToPointSeries(SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D)">
            <summary>
            Converts a DataSeries to a <see cref="T:SciChart.Charting3D.Model.IGridPointSeries3D" /> derived type, for use during the render pass
            </summary>
            <returns>
            The PointSeries, which may be used for drawing
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.Impulse.ImpulseUniformGridSceneEntityHelper.GetDataValues(SciChart.Charting3D.Model.IPointSeries3D,System.Collections.Generic.List{SciChart.Charting3D.Model.PointMetadata3D}@)">
            <summary>
            Transforms data from an IPointSeries3D into a list of data-values (Vector3D) and PointMetadata3D. Used to create the mesh
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.Impulse.ImpulseUniformGridSceneEntityHelper.HitTest(System.Windows.Point,SciChart.Charting3D.Primitives.IBaseSceneEntity)">
            <summary>
            Performs a HitTest operation on the <paramref name="baseSceneEntity"/> of type <see cref="T:SciChart.Charting3D.Primitives.IBaseSceneEntity"/>, returning the <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D" /> containing the result
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.RenderableSeries.ColumnRenderableSeries3DForMvvm">
            <summary>
            Defines a class which extends the original <see cref="T:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D"/> and is created internally
            per every <see cref="T:SciChart.Charting3D.Visuals.RenderableSeries.IRenderableSeries3DViewModel"/> of appropriate type in MVVM scenarios
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.ColumnRenderableSeries3DForMvvm.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:SciChart.Charting3D.Visuals.RenderableSeries.ColumnRenderableSeries3DForMvvm"/> class.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.RenderableSeries.ImpulseRenderableSeries3DForMvvm">
            <summary>
            Defines a class which extends the original <see cref="T:SciChart.Charting3D.RenderableSeries.ImpulseRenderableSeries3D"/> and is created internally
            per every <see cref="T:SciChart.Charting3D.Visuals.RenderableSeries.IRenderableSeries3DViewModel"/> of appropriate type in MVVM scenarios
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.ImpulseRenderableSeries3DForMvvm.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:SciChart.Charting3D.Visuals.RenderableSeries.ImpulseRenderableSeries3DForMvvm"/> class.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.RenderableSeries.MountainRenderableSeries3DForMvvm">
            <summary>
            Defines a class which extends the original <see cref="T:SciChart.Charting3D.RenderableSeries.MountainRenderableSeries3D"/> and is created internally
            per every <see cref="T:SciChart.Charting3D.Visuals.RenderableSeries.IRenderableSeries3DViewModel"/> of appropriate type in MVVM scenarios
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.MountainRenderableSeries3DForMvvm.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:SciChart.Charting3D.Visuals.RenderableSeries.MountainRenderableSeries3DForMvvm"/> class.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.RenderableSeries.PointLineRenderableSeries3DForMvvm">
            <summary>
            Defines a class which extends the original <see cref="T:SciChart.Charting3D.RenderableSeries.PointLineRenderableSeries3D"/> and is created internally
            per every <see cref="T:SciChart.Charting3D.Visuals.RenderableSeries.IRenderableSeries3DViewModel"/> of appropriate type in MVVM scenarios
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.PointLineRenderableSeries3DForMvvm.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:SciChart.Charting3D.Visuals.RenderableSeries.PointLineRenderableSeries3DForMvvm"/> class.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.RenderableSeries.ScatterRenderableSeries3DForMvvm">
            <summary>
            Defines a class which extends the original <see cref="T:SciChart.Charting3D.RenderableSeries.ScatterRenderableSeries3D"/> and is created internally
            per every <see cref="T:SciChart.Charting3D.Visuals.RenderableSeries.IRenderableSeries3DViewModel"/> of appropriate type in MVVM scenarios
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.ScatterRenderableSeries3DForMvvm.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:SciChart.Charting3D.Visuals.RenderableSeries.ScatterRenderableSeries3DForMvvm"/> class.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.RenderableSeries.SurfaceMeshRenderableSeries3DForMvvm">
            <summary>
            Defines a class which extends the original <see cref="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D"/> and is created internally
            per every <see cref="T:SciChart.Charting3D.Visuals.RenderableSeries.IRenderableSeries3DViewModel"/> of appropriate type in MVVM scenarios
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.SurfaceMeshRenderableSeries3DForMvvm.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:SciChart.Charting3D.Visuals.RenderableSeries.SurfaceMeshRenderableSeries3DForMvvm"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.SurfaceMeshRenderableSeries3DForMvvm.OnColorPaletteChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="T:SciChart.Charting3D.RenderableSeries.MeshColorPalette"/> property changes
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.RenderableSeries.WaterfallRenderableSeries3DForMvvm">
            <summary>
            Defines a class which extends the original <see cref="T:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D"/> and is created internally
            per every <see cref="T:SciChart.Charting3D.Visuals.RenderableSeries.IRenderableSeries3DViewModel"/> of appropriate type in MVVM scenarios
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.WaterfallRenderableSeries3DForMvvm.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:SciChart.Charting3D.Visuals.RenderableSeries.WaterfallRenderableSeries3DForMvvm"/> class.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.RenderableSeries.FreeSurfaceRenderableSeries3DForMvvm">
            <summary>
            Defines a class which extends the original <see cref="T:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D"/> and is created internally
            per every <see cref="T:SciChart.Charting3D.Visuals.RenderableSeries.IRenderableSeries3DViewModel"/> of appropriate type in MVVM scenarios
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.FreeSurfaceRenderableSeries3DForMvvm.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:SciChart.Charting3D.Visuals.RenderableSeries.FreeSurfaceRenderableSeries3DForMvvm"/> class.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.RenderableSeries.IRenderableSeries3DViewModel">
            <summary>
            Defines the interface to a <see cref="T:SciChart.Charting3D.Model.ChartSeries.BaseRenderableSeries3DViewModel"/>, a viewmodel to a renderable series, which is used in the new <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> MVVM API.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.RenderableSeries.IRenderableSeries3DViewModel.IsVisible">
            <summary>
            Gets or sets whether the series is visible when drawn
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.RenderableSeries.IRenderableSeries3DViewModel.Stroke">
            <summary>
            Gets or sets the Stroke.
            </summary>
            <value>The color of the series.</value>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.RenderableSeries.IRenderableSeries3DViewModel.IsSelected">
            <summary>
            Gets or sets whether the series is selected.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.RenderableSeries.IRenderableSeries3DViewModel.DataSeries">
            <summary>
            Gets or sets the DataSeries associated with this series
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.RenderableSeries.IRenderableSeries3DViewModel.PaletteProvider">
            <summary>
            Gets or Sets an optional <see cref="T:SciChart.Charting3D.RenderableSeries.IPaletteProvider3D" /> instance, which may be used to override specific data-point colors during rendering.
            For more details, see the <see cref="T:SciChart.Charting3D.RenderableSeries.IPaletteProvider3D" /> documentation
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Visuals.RenderableSeries.IRenderableSeries3DViewModel.PointMarker">
            <summary>
            Gets or sets the point marker which may be rendered at points on the 3D series.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.RenderableSeries.RenderableSeries3DSourceCollection">
            <summary>
            Contains a collection of RenderableSeries and associated RenderableSeriesViewModels
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.RenderableSeries3DSourceCollection.#ctor(System.Collections.Generic.IEnumerable{SciChart.Charting3D.Visuals.RenderableSeries.IRenderableSeries3DViewModel})">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Visuals.RenderableSeries.RenderableSeries3DSourceCollection"/> class.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.RenderableSeries.Waterfall.WaterfallSceneEntity">
            <summary>
             SceneEntity added to the 3D Scene which draws a Waterfall Chart. See also the <see cref="T:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D"/>.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Visuals.RenderableSeries.Waterfall.WaterfallSceneEntity._WaterFallTexCoordCalcParamsConstant">
            parameters to calculate the texture coord on gpu based on either y or z
            x holds 0 or 1 ( 0 = use Y, 1 = use Z )
            y holds _dataRangeDiff
            z holds _scaleCoef
            w holds _textureOffset
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.Waterfall.WaterfallSceneEntity.#ctor(SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D)">
            <summary>
            Creates a <see cref="T:SciChart.Charting3D.Visuals.RenderableSeries.Waterfall.WaterfallSceneEntity"/> instance for a <paramref name="renderableSeries"/>.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.Waterfall.WaterfallSceneEntity.CreateMeshes(SciChart.Charting3D.Primitives.IRenderPassInfo3D,SciChart.Charting3D.Model.IPointSeries3D)">
            <summary>
            When overridden in a derived class, creates meshes from <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D"/> and <see cref="T:SciChart.Charting3D.Model.IPointSeries3D"/> data.
            </summary>
            <param name="renderPassInfo">The IRenderPassInfo3D.</param>
            <param name="pointSeries">The point series containing the data.</param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.Waterfall.WaterfallSceneEntity.FillFrontAndBackFaces(SciChart.Charting3D.Visuals.Primitives.ISolidMesh,System.Single)">
            <summary>
            Always populates front and back to handle back-face culling.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.Waterfall.WaterfallSceneEntity.UpdateMeshes(SciChart.Charting3D.Model.IPointSeries3D,System.Collections.Generic.List{System.Windows.Media.Media3D.Vector3D},System.Collections.Generic.List{SciChart.Charting3D.Model.IPointMetadata3D})">
            <summary>
            When overridden in a derived class, updates all 3D meshes from Data.
            </summary>
            <param name="points">The <see cref="T:SciChart.Charting3D.Model.IPointSeries3D"/> containing the data.</param>
            <param name="dataValues">The data values.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.Waterfall.WaterfallSceneEntity.PerformSelection(System.Boolean,System.Collections.Generic.List{SciChart.Charting3D.Primitives.VertexId})">
            <summary>
            Performs selection on this entity, setting the IsSelected flag to True or False on the specified <see cref="T:SciChart.Charting3D.Primitives.VertexId">Vertex Ids</see>
            </summary>
            <param name="isSelected">if set to <c>true</c> the vertices become .</param>
            <param name="vertexIds">The vertex ids.</param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.Waterfall.WaterfallSceneEntity.GetDataGridIndex(System.UInt32)">
            <summary>
            Returns a <see cref="T:SciChart.Charting3D.Primitives.HeightMapIndex"/> that corresponds to <param name="vertexId"/>.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.Waterfall.WaterfallSceneEntity.RenderScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to render this element. This is where geometry must be drawn to the 3D scene.
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D"/> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.Waterfall.WaterfallSceneEntity.OverrideOpacity">
            <summary>
            Overrides the opacity of the entity. 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Visuals.RenderableSeries.Waterfall.WaterfallSceneEntity.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:SciChart.Charting3D.Visuals.RenderableSeries.Waterfall.WaterfallSceneEntityHelper">
            <summary>
            A base class for a <see cref="T:SciChart.Charting3D.RenderableSeries.ISceneEntityHelper"/> which uses <see cref="T:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`3"/> data as input, and transforms
            into scene geometry.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.DefaultViewportManager3D">
            <summary>
            <para>Defines the default implementation of a Viewportmanager, assigned to <see cref="P:SciChart.Charting3D.SciChart3DSurface.ViewportManager"/> property.</para>
            <para>The ViewportManager allows control over the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> and allows you to override X,Y,Z AutoRanging algorithms</para>
            <para>See derived types <seealso cref="T:SciChart.Charting3D.ViewportManager3DBase"/> and <seealso cref="T:SciChart.Charting3D.DefaultViewportManager3D"/> for concrete implementations</para>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.DefaultViewportManager3D.OnCalculateNewXRange(SciChart.Charting3D.Axis.IAxis3D)">
            <summary>
            Overridden by derived types, called when the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" /> requests the XAxis VisibleRange.
            The Range returned by this method will be applied to the chart on render
            </summary>
            <param name="xAxis">The XAxis</param>
            <returns>
            The new VisibleRange for the XAxis
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.DefaultViewportManager3D.OnCalculateNewYRange(SciChart.Charting3D.Axis.IAxis3D,SciChart.Charting3D.Primitives.RenderPassInfo3D)">
            <summary>
            Overridden by derived types, called when the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" /> requests a YAxis VisibleRange.
            The Range returned by this method will be applied to the chart on render
            </summary>
            <param name="yAxis">The YAxis</param>
            <param name="renderPassInfo">The render pass info.</param>
            <returns>
            The new VisibleRange for the YAxis
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.DefaultViewportManager3D.OnCalculateNewZRange(SciChart.Charting3D.Axis.IAxis3D,SciChart.Charting3D.Primitives.RenderPassInfo3D)">
            <summary>
            Overridden by derived types, called when the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" /> requests a ZAxis VisibleRange.
            The Range returned by this method will be applied to the chart on render
            </summary>
            <param name="zAxis">The ZAxis</param>
            <param name="renderPassInfo">The render pass info.</param>
            <returns>
            The new VisibleRange for the ZAxis
            </returns>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.IColumnsMesh">
            <summary>
            Defines the interface to a <see cref="T:SciChart.Charting3D.Primitives.ColumnsMesh"/>, which provides a Mesh that can be defined once, Frozen, then repeatedly drawn
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.ColumnsMesh">
            <summary>
            Defines a ColumnsMesh, which provides a Mesh that can be defined once, Frozen, then repeatedly drawn
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ColumnsMesh.#ctor(SciChart.Charting3D.Interop.TSRIndexedMesh)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Primitives.ColumnsMesh"/> class.
            </summary>
            <param name="columnsMesh">The columns mesh.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ColumnsMesh.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ColumnsMesh.SetVertexColor(System.Windows.Media.Color)">
            <summary>
            Sets the Vertex Color of the current vertex 
            </summary>
            <param name="color">The color.</param>
            <exception cref="T:System.InvalidOperationException">This instance is frozen and no further modifications may be made</exception>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ColumnsMesh.SetVertex3(System.Single,System.Single,System.Single)">
            <summary>
            Sets the X,Y,Z position of the current vertex
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ColumnsMesh.SetVertex4(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the X,Y,Z position plus W size of the current vertex
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ColumnsMesh.SetVertex4(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the X,Y,Z position plus XSize ZSize of the current vertex
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="sizeX">The size x.</param>
            <param name="sizeZ">The size z.</param>
            <exception cref="T:System.InvalidOperationException">This instance is frozen and no further modifications may be made</exception>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ColumnsMesh.Freeze">
            <summary>
            Freezes this instance. No further drawing may be done
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ColumnsMesh.Draw">
            <summary>
            Draws this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">Must call ImmediatePointsContext.Freeze() to complete the vertices before calling Draw()</exception>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ColumnsMesh.Draw(SciChart.Charting3D.Interop.TSRShaderEffect)">
            <summary>
            Draws this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">Must call ImmediatePointsContext.Freeze() to complete the vertices before calling Draw()</exception>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ColumnsMesh.SetSelectionId(System.UInt64)">
            <summary>
            Sets the selection identifier for the current vertex
            </summary>
            <param name="selectionId">The selection identifier.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ColumnsMesh.SetOpacity(System.Single)">
            <summary>
            Sets the opacity for the current vertex
            </summary>
            <param name="opacity">The opacity.</param>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.FreeSurfaceMesh">
            <summary>
            Draws the Surface using <see cref="T:SciChart.Charting3D.Interop.SCRTFreeSurfaceMesh"/> which interops with the C++ 3D Engine
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.FreeSurfaceMesh.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Primitives.GridMesh"/> class.
            </summary>
            <param name="uCount">Number of V rings.</param>
            <param name="vCount">Number of U segments.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.FreeSurfaceMesh.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.FreeSurfaceMesh.SetClipPlane(SciChart.Charting3D.Plane,System.Int32)">
            <summary>
            Sets clip planes for mesh. In case clipping is disabled zero-planes should be passed.
            </summary>
            <param name="plane"></param>
            <param name="index"></param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.FreeSurfaceMesh.SetDisplacementPropagation(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Sets displacement map multiplier for each axis.
            </summary>
            <param name="xAxisComponent">The X Axis component.</param>
            <param name="yAxisComponent">The Y Axis component.</param>
            <param name="zAxisComponent">The Z Axis component.</param>
            <param name="isAbsolute">Determines whether XYZ Axis Component vector is treated as absolute direction of a surface point displacement.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.FreeSurfaceMesh.SetDataOffset(System.Single,System.Single,System.Single)">
            <summary>
            Sets the XYZ displacement for each data value.
            </summary>
            <param name="xDataOffset">The X displacement.</param>
            <param name="yDataOffset">The Y displacement.</param>
            <param name="zDataOffset">The Z displacement.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.FreeSurfaceMesh.Update(System.Func{System.Single[]},System.Windows.Media.Color,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Single,System.Windows.Media.Color)">
            <summary>
            Updates the mesh, e.g. when data or dimensions changes the mesh is recreated 
            </summary>
            <param name="getPointsDataCallback">Callback function that provides array of floats that represents X, Y and Z of 3D points respectively.</param>
            <param name="wireframeStroke">The wireframe stroke.</param>
            <param name="strokeThickness">The stroke thickness.</param>
            <param name="drawMesh">if set to <c>true</c> draw the mesh.</param>
            <param name="drawWireframe">if set to <c>true</c> draw the wireframe.</param>
            <param name="drawContours">if set to <c>true</c> draw the wireframe.</param>
            <param name="contourThickness"></param>
            <param name="contourInterval"></param>
            <param name="contourOffset"></param>
            <param name="contourColor"></param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.FreeSurfaceMesh.UpdateMeshCellsColors(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D)">
            <summary>
            Update mesh cells colors
            </summary>
            <param name="series">Renderable series</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.FreeSurfaceMesh.Draw(SciChart.Charting3D.Texture2D,SciChart.Charting3D.Texture2D,SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Draws the cached GridMesh
            </summary>
            <param name="heightsTexture">The heights texture.</param>
            <param name="paletteTexture">The palette texture.</param>
            <param name="paletteMin">The palette minimum.</param>
            <param name="paletteMax">The palette maximum.</param>
            <param name="paletteAxialFactor">The palette intensity in regards to X, Y and Z axis.</param>
            <param name="paletteRadialFactor">The palette intensity in regards to surface distance from the center.</param>
            <param name="paletteAzimuthalFactor">The palette intensity in regards U orientation of the surface.</param>
            <param name="palettePolarFactor">The palette intensity in regards V orientation of the surface.</param>
            <param name="opacity">The opacity.</param>
            <param name="useGradient">if set to <c>true</c> use gradient.</param>
            <param name="useSolidCells">if set to <c>true</c> use solid cells.</param>
            <param name="drawBackSide">is set to <c>true</c> draw back side of the mesh.</param>
            <exception cref="T:System.ArgumentNullException">heightsTexture</exception>
            <exception cref="T:System.ArgumentException">heightsTexture has not yet been initialized. Please call Texture2D.WritePixels to initialize</exception>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.IMeshBase">
            <summary>
            Defines the interface to a Mesh, a re-usable 3D model which may be dynamically created, frozen, and repeatedly drawn
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IMeshBase.Freeze">
            <summary>
            Freezes this instance. No further drawing may be done
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IMeshBase.Draw">
            <summary>
            Draws this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">Must call ImmediatePointsContext.Freeze() to complete the vertices before calling Draw()</exception>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IMeshBase.SetVertex4(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the X,Y,Z,W value of the current vertex
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="w">The w parameter, often the size.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IMeshBase.SetSelectionId(System.UInt64)">
            <summary>
            Sets the selection identifier for the current vertex
            </summary>
            <param name="selectionId">The selection identifier.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IMeshBase.SetOpacity(System.Single)">
            <summary>
            Sets the opacity for the current vertex
            </summary>
            <param name="opacity">The opacity.</param>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.IImmediateDrawContext">
            <summary>
            Defines the interface to a Draw Context in 3D
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IImmediateDrawContext.SetVertexColor(System.Windows.Media.Color)">
            <summary>
            Sets the Vertex Color of the current vertex 
            </summary>
            <param name="color">The color.</param>
            <exception cref="T:System.InvalidOperationException">This instance is frozen and no further modifications may be made</exception>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IImmediateDrawContext.SetVertex3(System.Single,System.Single,System.Single)">
            <summary>
            Sets the X,Y,Z position of the current vertex
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.IImmediateLineContext">
            <summary>
            Defines a drawing context which draws dynamic lines in 3D space
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.ImmediateLineContext">
            <summary>
            Defines a drawing context which draws dynamic lines in 3D space
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ImmediateLineContext.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Primitives.ImmediateLineContext"/> class.
            </summary>
            <param name="strokeThickness">The stroke thickness of the line.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ImmediateLineContext.SetVertexColor(System.Windows.Media.Color)">
            <summary>
            Sets the Vertex Color of the current vertex
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ImmediateLineContext.SetVertex3(System.Single,System.Single,System.Single)">
            <summary>
            Sets the X,Y,Z position of the current vertex
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ImmediateLineContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.IImmediateLitMeshContext">
            <summary>
            Defines the interface to a Drawing Context which draws 3D Meshes dynamically on the fly
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IImmediateLitMeshContext.TexCoord2(System.Single,System.Single)">
            <summary>
            Sets the Texture Coordinate for the current vertex
            </summary>
            <param name="u">The u coord.</param>
            <param name="v">The v coord.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IImmediateLitMeshContext.Normal3(System.Single,System.Single,System.Single)">
            <summary>
            Sets the Normal for the current vertex
            </summary>
            <param name="nx">The normal x coord.</param>
            <param name="ny">The normal y coord.</param>
            <param name="nz">The normal z coord.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IImmediateLitMeshContext.SetSelectionId(System.UInt64)">
            <summary>
            Sets the selection identifier for the current vertex
            </summary>
            <param name="selectionId">The selection identifier.</param>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.ImmediateLitMeshContext">
            <summary>
            Defines a Drawing Context which draws 3D Meshes dynamically on the fly
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ImmediateLitMeshContext.#ctor(SciChart.Charting3D.Primitives.TSRRenderMode)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Primitives.ImmediateMeshContext"/> class.
            </summary>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ImmediateLitMeshContext.#ctor(SciChart.Charting3D.Primitives.TSRRenderMode,SciChart.Charting3D.Interop.TSRShaderEffect)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Primitives.ImmediateMeshContext"/> class.
            </summary>
            <param name="renderMode">The render mode.</param>
            <param name="pShaderEffect">The p shader effect.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ImmediateLitMeshContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ImmediateLitMeshContext.SetVertexColor(System.Windows.Media.Color)">
            <summary>
            Sets the Vertex Color of the current vertex
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ImmediateLitMeshContext.SetVertex3(System.Single,System.Single,System.Single)">
            <summary>
            Sets the X,Y,Z position of the current vertex
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ImmediateLitMeshContext.TexCoord2(System.Single,System.Single)">
            <summary>
            Sets the Texture Coordinate for the current vertex
            </summary>
            <param name="u">The u coord.</param>
            <param name="v">The v coord.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ImmediateLitMeshContext.Normal3(System.Single,System.Single,System.Single)">
            <summary>
            Sets the Normal for the current vertex
            </summary>
            <param name="nx">The normal x coord.</param>
            <param name="ny">The normal y coord.</param>
            <param name="nz">The normal z coord.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ImmediateLitMeshContext.SetSelectionId(System.UInt64)">
            <summary>
            Sets the selection identifier for the current vertex
            </summary>
            <param name="selectionId">The selection identifier.</param>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.TSRRenderMode">
            <summary>
            Mapping enumeration constants for the DirectX Primitive Type
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Primitives.TSRRenderMode.TRIANGLES">
            <summary>Renders meshes as Triangles</summary>
        </member>
        <member name="F:SciChart.Charting3D.Primitives.TSRRenderMode.TRIANGLEFAN">
            <summary>Renders meshes as TriangleFan</summary>
        </member>
        <member name="F:SciChart.Charting3D.Primitives.TSRRenderMode.TRIANGLESTRIP">
            <summary>Renders meshes as Triangle Strip</summary>
        </member>
        <member name="F:SciChart.Charting3D.Primitives.TSRRenderMode.LINESTRIP">
            <summary>Renders meshes as LineStrip</summary>
        </member>
        <member name="F:SciChart.Charting3D.Primitives.TSRRenderMode.LINELIST">
            <summary>Renders meshes as LineList</summary>
        </member>
        <member name="F:SciChart.Charting3D.Primitives.TSRRenderMode.POINTS">
            <summary>Renders meshes as Points</summary>
        </member>
        <member name="F:SciChart.Charting3D.Primitives.TSRRenderMode.LINEPATCHLIST">
            <summary>Renders meshes as LinePatchList</summary>
        </member>
        <member name="F:SciChart.Charting3D.Primitives.TSRRenderMode.TRIPATCHLIST">
            <summary>Renders meshes as TrianglePatchList</summary>
        </member>
        <member name="F:SciChart.Charting3D.Primitives.TSRRenderMode.QUADPATCHLIST">
            <summary>Renders meshes as QuadPatchList</summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.IImmediateMeshContext">
            <summary>
            Defines the interface to a Drawing Context which draws 3D Meshes dynamically on the fly
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IImmediateMeshContext.TexCoord2(System.Single,System.Single)">
            <summary>
            Sets the Texture Coordinate for the current vertex
            </summary>
            <param name="u">The u coord.</param>
            <param name="v">The v coord.</param>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.ImmediateMeshContext">
            <summary>
            Defines a Drawing Context which draws 3D Meshes dynamically on the fly
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ImmediateMeshContext.#ctor(SciChart.Charting3D.Primitives.TSRRenderMode)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Primitives.ImmediateMeshContext"/> class.
            </summary>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ImmediateMeshContext.#ctor(SciChart.Charting3D.Primitives.TSRRenderMode,SciChart.Charting3D.Interop.TSRShaderEffect)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Primitives.ImmediateMeshContext"/> class.
            </summary>
            <param name="renderMode">The render mode.</param>
            <param name="pShaderEffect">The p shader effect.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ImmediateMeshContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ImmediateMeshContext.SetVertexColor(System.Windows.Media.Color)">
            <summary>
            Sets the Vertex Color of the current vertex
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ImmediateMeshContext.SetVertex3(System.Single,System.Single,System.Single)">
            <summary>
            Sets the X,Y,Z position of the current vertex
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ImmediateMeshContext.TexCoord2(System.Single,System.Single)">
            <summary>
            Sets the Texture Coordinate for the current vertex
            </summary>
            <param name="u">The u coord.</param>
            <param name="v">The v coord.</param>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.ILinesMesh">
            <summary>
            Defines the interface to a LinesMesh, a re-usable 3D model consisting of lines which may be dynamically created, frozen, and repeatedly drawn
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ILinesMesh.SetVertex3(SciChart.Charting3D.Vector3)">
            <summary>
            Sets a position of the current vertex.
            </summary>
            <param name="xyzVector">The <see cref="T:SciChart.Charting3D.Vector3"/> which defines the position.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ILinesMesh.SetVertices(SciChart.Charting3D.Interop.sIMLineVertex[],System.Int32,System.Boolean)">
            <summary>
            Sets raw vertices on the lines mesh. the vertex format is <see cref="T:SciChart.Charting3D.Interop.sIMLineVertex"/> and each 1 vertex represents a line segment, with start and end position
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="vertCount">The vertex count.</param>
            <param name="hasTransparentColors">if set to true, then one or more vertex has semi-transparent colours. This determines whether alpha blending is used.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ILinesMesh.SetData(System.UInt32,System.Double[],System.Double[],System.Double[],System.UInt32[],System.Int32,System.Boolean)">
            <summary>
            Sets the data on the Lines Mesh, which causes the mesh to calculate <see cref="T:SciChart.Charting3D.Interop.sIMLineVertex"/> line vertices. 
            </summary>
            <param name="entityId">The entity identifier.</param>
            <param name="xCoordinates">The x coordinates in world space.</param>
            <param name="yCoordinates">The y coordinates in world space.</param>
            <param name="zCoordinates">The z coordinates in world space.</param>
            <param name="colors">The colors as ARGB.</param>
            <param name="pointCount">The point count.</param>
            <param name="hasTransparentColors">if set to true, then one or more vertex has semi-transparent colours. This determines whether alpha blending is used.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ILinesMesh.SetData(System.UInt32,System.Double[],System.Double[],System.Double[],System.UInt32,System.Int32,System.Boolean)">
            <summary>
            Sets the data on the Lines Mesh, which causes the mesh to calculate <see cref="T:SciChart.Charting3D.Interop.sIMLineVertex"/> line vertices. 
            </summary>
            <param name="entityId">The entity identifier.</param>
            <param name="xCoordinates">The x coordinates in world space.</param>
            <param name="yCoordinates">The y coordinates in world space.</param>
            <param name="zCoordinates">The z coordinates in world space.</param>
            <param name="color">The constant line color as ARGB.</param>
            <param name="pointCount">The point count.</param>
            <param name="hasTransparentColors">if set to true, then one or more vertex has semi-transparent colours. This determines whether alpha blending is used.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.ILinesMesh.SetTexture(SciChart.Charting3D.Interop.TSRTexture)">
            <summary>
            Sets texture.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.LinesMesh">
            <summary>
            Defines a re-usable 3D model consisting of lines which may be dynamically created, frozen, and repeatedly drawn
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.LinesMesh.#ctor(System.Single,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Primitives.LinesMesh"/> class.
            </summary>
            <param name="lineThickness">The line thickness.</param>
            <param name="isStrips">if set to <c>true</c> lines are drawn as discontinuous strips.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.LinesMesh.SetVertexColor(System.Windows.Media.Color)">
            <summary>
            Sets the Vertex Color of the current vertex
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.LinesMesh.SetVertex3(SciChart.Charting3D.Vector3)">
            <summary>
            Sets a position of the current vertex.
            </summary>
            <param name="xyzVector">The <see cref="T:SciChart.Charting3D.Vector3" /> which defines the position.</param>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.PointsInstancesMesh">
            <summary>
            Defines a re-usable 3D model consisting of Instance based (3D mesh) points which may be dynamically created, frozen, and repeatedly drawn
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.PointsInstancesMesh.#ctor(System.Single,SciChart.Charting3D.PointMarkers.BasePointMarker3D)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Primitives.PointsMesh"/> class.
            </summary>
            <param name="pointSize">Size of the point.</param>
            <param name="pointMarker">The point marker.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.PointsInstancesMesh.SetVertexColor(System.Windows.Media.Color)">
            <summary>
            Sets the Vertex Color of the current vertex
            </summary>
            <param name="color">The color.</param>
            <exception cref="T:System.InvalidOperationException">This instance is frozen and no further modifications may be made</exception>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.PointsPixelsMesh">
            <summary>
            Defines a re-usable 3D model consisting of pixel points which may be dynamically created, frozen, and repeatedly drawn
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.PointsPixelsMesh.SetVertexColor(System.Windows.Media.Color)">
            <summary>
            Sets the Vertex Color of the current vertex
            </summary>
            <param name="color">The color.</param>
            <exception cref="T:System.InvalidOperationException">This instance is frozen and no further modifications may be made</exception>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.RasterizerStates">
            <summary>
            Provides Blend State options to the 3D renderer
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.RasterizerStates.Default">
            <summary>
            The Default Rasterizer Stencil State: filling double side
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.RasterizerStates.CullBackFacesState">
            <summary>
            The cull back face state
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.RasterizerStates.WireframeState">
            <summary>
            The wire frame state
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.RasterizerStates.CoplanarLinesState">
            <summary>
            coplanar lines state
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.RasterizerStates.TSRRasterizerState">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.Interop.TSRBlendState"/> - the wrapper object sent to 3D Engine
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.IPointsMesh">
            <summary>
            Defines the interface to a PointsMesh, a re-usable 3D model consisting of points which may be dynamically created, frozen, and repeatedly drawn
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.PointsMesh">
            <summary>
            Defines a re-usable 3D model consisting of Texture based (flat) points which may be dynamically created, frozen, and repeatedly drawn
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.PointsMesh.#ctor(System.Single,SciChart.Charting3D.PointMarkers.BasePointMarker3D)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Primitives.PointsMesh"/> class.
            </summary>
            <param name="pointSize">Size of the point.</param>
            <param name="pointMarker">The point marker.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.PointsMesh.SetVertexColor(System.Windows.Media.Color)">
            <summary>
            Sets the Vertex Color of the current vertex
            </summary>
            <param name="color">The color.</param>
            <exception cref="T:System.InvalidOperationException">This instance is frozen and no further modifications may be made</exception>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.GridMesh">
            <summary>
            Draws the Grid Grid using <see cref="T:SciChart.Charting3D.Interop.SCRTGridMesh"/>, <see cref="!:TSREffect"/> and <see cref="T:SciChart.Charting3D.Interop.TSRTexture"/> which interop with the C++ 3D Engine
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.GridMesh.#ctor(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Primitives.GridMesh"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="xSize">Size of the x.</param>
            <param name="zSize">Size of the z.</param>
            <exception cref="T:System.InvalidOperationException">GridMesh Width and Height must be greater than 1</exception>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.GridMesh.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.GridMesh.Width">
            <summary>
            Gets the width of the mesh.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.GridMesh.Height">
            <summary>
            Gets the height of the mesh.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.GridMesh.SetClipPlane(SciChart.Charting3D.Plane,System.Int32)">
            <summary>
            Sets clip planes for mesh. In case clipping is disabled zero-planes should be passed.
            </summary>
            <param name="plane"></param>
            <param name="index"></param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.GridMesh.Update(System.Windows.Media.Color,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Single,System.Windows.Media.Color)">
            <summary>
            Updates the mesh, e.g. when data or dimensions changes the mesh is recreated 
            </summary>
            <param name="wireframeStroke">The wireframe stroke.</param>
            <param name="strokeThickness">The stroke thickness.</param>
            <param name="drawSkirt">if set to <c>true</c> draw the skirt.</param>
            <param name="drawMesh">if set to <c>true</c> draw the mesh.</param>
            <param name="drawWireframe">if set to <c>true</c> draw the wireframe.</param>
            <param name="drawContours">if set to <c>true</c> draw the wireframe.</param>
            <param name="contourThickness"></param>
            <param name="contourInterval"></param>
            <param name="contourOffset"></param>
            <param name="contourColor"></param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.GridMesh.UpdateMeshCellsColors(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D)">
            <summary>
            Update mesh cells colors
            </summary>
            <param name="series">Renderable series</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.GridMesh.Draw(SciChart.Charting3D.Texture2D,SciChart.Charting3D.Texture2D,SciChart.Charting3D.Texture2D,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Single,System.Single,System.Single,System.Single,SciChart.Charting3D.Primitives.MeshOffsets)">
            <summary>
            Draws the cached GridMesh
            </summary>
            <param name="heightsTexture">The heights texture.</param>
            <param name="paletteTexture">The palette texture.</param>
            <param name="paletteMin">The palette minimum.</param>
            <param name="paletteMax">The palette maximum.</param>
            <param name="opacity">The opacity.</param>
            <param name="useGradient">if set to <c>true</c> use gradient.</param>
            <param name="useSolidCells">if set to <c>true</c> use solid cells.</param>
            <param name="heightScale">The height scale, e.g. when set to zero, the mesh is flag</param>
            <param name="yOffset">The vertical (Y) Offset for positioning the mesh</param>
            <exception cref="T:System.ArgumentNullException">heightsTexture</exception>
            <exception cref="T:System.ArgumentException">heightsTexture has not yet been initialized. Please call Texture2D.WritePixels to initialize</exception>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.GridMesh.GetMaxPointsSize">
            <summary>
            Gets maximum size of point along X or Z axis.
            Note: returning value can differ on restarting the Engine with different DirectX mode ( see: <see cref="M:SciChart.Charting3D.Viewport3D.Restart3DEngineWith(SciChart.Charting3D.DirectXMode,SciChart.Charting3D.FullScreenAntiAliasingMode,System.Boolean)" /> ).
            </summary>
            <returns>Maximum size of point along X or Z axis.</returns>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.IAxisCubeDescriptor">
            <summary>
            The AxisCubeDescriptpr passes information from WPF about the 3D Axis Cube to the 3D Engine
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisCubeDescriptor.Dimensions">
            <summary>
            Gets or sets the World-dimensions of the Axis Cube. 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisCubeDescriptor.XAxisDescriptor">
            <summary>
            Gets or sets the x axis descriptor.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisCubeDescriptor.YAxisDescriptor">
            <summary>
            Gets or sets the y axis descriptor.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisCubeDescriptor.ZAxisDescriptor">
            <summary>
            Gets or sets the z axis descriptor.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisCubeDescriptor.IsVisible">
            <summary>
            Gets or sets whether the Axis Cube is visible or not
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisCubeDescriptor.PlaneVisibilityMode">
            <summary>
            Gets or sets the axis Plane Visibility Mode
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisCubeDescriptor.ZxPlaneDrawLabelsMode">
            <summary>
            Gets or sets the axis Draw Labels Mode for ZX plane
            </summary>   
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisCubeDescriptor.XyPlaneDrawLabelsMode">
            <summary>
            Gets or sets the axis Draw Labels Mode for XY plane
            </summary>  
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisCubeDescriptor.ZyPlaneDrawLabelsMode">
            <summary>
            Gets or sets the axis Draw Labels Mode for ZY plane
            </summary>  
        </member>
        <member name="T:SciChart.Charting3D.Primitives.AxisCubeDescriptor">
            <summary>
            The AxisCubeDescriptpr passes information from WPF about the 3D Axis Cube to the 3D Engine
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisCubeDescriptor.Dimensions">
            <summary>
            Gets or sets the World-dimensions of the Axis Cube.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisCubeDescriptor.XAxisDescriptor">
            <summary>
            Gets or sets the x axis descriptor.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisCubeDescriptor.YAxisDescriptor">
            <summary>
            Gets or sets the y axis descriptor.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisCubeDescriptor.ZAxisDescriptor">
            <summary>
            Gets or sets the z axis descriptor.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisCubeDescriptor.IsVisible">
            <summary>
            Gets or sets whether the Axis Cube is visible or not
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisCubeDescriptor.PlaneVisibilityMode">
            <summary>
            Gets or sets the axis Plane Visibility Mode
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisCubeDescriptor.ZxPlaneDrawLabelsMode">
            <summary>
            Gets or sets the axis Draw Labels Mode for ZX plane
            </summary>   
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisCubeDescriptor.XyPlaneDrawLabelsMode">
            <summary>
            Gets or sets the axis Draw Labels Mode for XY plane
            </summary>  
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisCubeDescriptor.ZyPlaneDrawLabelsMode">
            <summary>
            Gets or sets the axis Draw Labels Mode for ZY plane
            </summary>  
        </member>
        <member name="T:SciChart.Charting3D.Primitives.IAxisDescriptor">
            <summary>
            Defines the interface to an <see cref="T:SciChart.Charting3D.Primitives.AxisDescriptor"/>, a class which passes information from WPF to the 3D Engine about how to render a 3D Axis
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.AxisTitle">
            <summary>
            Gets or sets the axis title text
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.AxisSize">
            <summary>
            Gets or sets the axis title text font size
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.MajorCoordinates">
            <summary>
            Gets or sets the world-coordinates for major gridlines and labels
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.MinorCoordinates">
            <summary>
            Gets or sets the world-coordinates for minor gridlines and labels
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.TickLabels">
            <summary>
            Gets or sets the tick labels to draw at each major coordinate
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.ExponentialTickLabels">
            <summary>
            Gets or sets the tick labels to draw at each major coordinate
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.MajorLineStyle">
            <summary>
            Gets or sets the style to apply to major grid lines
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.MajorTickStyle">
            <summary>
            Gets or sets the style to apply to major tick lines
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.MinorLineStyle">
            <summary>
            Gets or sets the style to apply to minor grid lines
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.MinorTickStyle">
            <summary>
            Gets or sets the style to apply to minor tick lines
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.TitleStyle">
            <summary>
            Gets or sets the style to apply to title text
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.LabelStyle">
            <summary>
            Gets or sets the style to apply to axis labels
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.DrawMajorGridLines">
            <summary>
            Gets or sets whether to draw Major Grid Lines
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.DrawMinorGridLines">
            <summary>
            Gets or sets whether to draw Minor Grid Lines
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.DrawMajorTicks">
            <summary>
            Gets or sets whether to draw Major Tick Lines
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.DrawMinorTicks">
            <summary>
            Gets or sets whether to draw Minor Grid Lines
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.DrawBands">
            <summary>
            Gets or sets whether to draw Bands between Major Grid Lines
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.DrawLabels">
            <summary>
            Gets or sets whether to draw Labels
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.BandColor">
            <summary>
            Gets or sets the Color for Major Bands
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.BackgroundColor">
            <summary>
            Gets or sets the color of the background of the axis plane
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.IsVisible">
            <summary>
            Gets or sets whether The axis is visible
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.BorderThickness">
            <summary>
            Gets or sets a thickness of border
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.LabelDepthTestEnabled">
            <summary>
            Gets or sets if labels text is ignoring depth or not
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.BorderColor">
            <summary>
            Gets or sets a Color of the border
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.TitleOffset">
            <summary>
            Gets or sets title text offset from the axis plane
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IAxisDescriptor.TickLabelsOffset">
            <summary>
            Gets or sets tick labels offset from the axis plane
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.AxisDescriptor">
            <summary>
            A class which passes information from WPF to the 3D Engine about how to render a 3D Axis
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.AxisDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Primitives.AxisDescriptor"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.AxisTitle">
            <summary>
            Gets or sets the axis title text
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.AxisSize">
            <summary>
            Gets or sets the axis title text font size
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.MajorCoordinates">
            <summary>
            Gets or sets the world-coordinates for major gridlines and labels
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.MinorCoordinates">
            <summary>
            Gets or sets the world-coordinates for minor gridlines and labels
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.TickLabels">
            <summary>
            Gets or sets the tick labels to draw at each major coordinate
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.ExponentialTickLabels">
            <summary>
            Gets or sets the tick labels to draw at each major coordinate
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.MajorLineStyle">
            <summary>
            Gets or sets the style to apply to major grid lines
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.MajorTickStyle">
            <summary>
            Gets or sets the style to apply to major tick lines
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.MinorLineStyle">
            <summary>
            Gets or sets the style to apply to minor grid lines
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.MinorTickStyle">
            <summary>
            Gets or sets the style to apply to minor tick lines
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.TitleStyle">
            <summary>
            Gets or sets the style to apply to title text
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.LabelStyle">
            <summary>
            Gets or sets the style to apply to axis labels
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.DrawMajorGridLines">
            <summary>
            Gets or sets whether to draw Major Grid Lines
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.DrawMinorGridLines">
            <summary>
            Gets or sets whether to draw Minor Grid Lines
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.DrawMajorTicks">
            <summary>
            Gets or sets whether to draw Major Tick Lines
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.LabelDepthTestEnabled">
            <summary>
            Gets or sets if labels text is ignoring depth or not
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.DrawMinorTicks">
            <summary>
            Gets or sets whether to draw Minor Grid Lines
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.DrawBands">
            <summary>
            Gets or sets whether to draw Bands between Major Grid Lines
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.DrawLabels">
            <summary>
            Gets or sets whether to draw Labels
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.BandColor">
            <summary>
            Gets or sets the Color for Major Bands
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.BackgroundColor">
            <summary>
            Gets or sets the color of the background of the axis plane
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.IsVisible">
            <summary>
            Gets or sets whether The axis is visible
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.BorderThickness">
            <summary>
            Gets or sets a thickness of the plane.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.BorderColor">
            <summary>
            Gets or sets a Color of the border
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.TickLabelsOffset">
            <summary>
            Gets or sets tick labels offset from the axis plane
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.AxisDescriptor.TitleOffset">
            <summary>
            Gets or sets title text offset from the axis plane
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.HeightMapIndex">
            <summary>
            Structure which contains the Z,X Index of a heightmap
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Primitives.HeightMapIndex.ZIndex">
            <summary>
            The z index
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Primitives.HeightMapIndex.XIndex">
            <summary>
            The x index
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.IBaseSceneEntity">
            <summary>
            Defines the interface to an Entity in the 3D Scene. 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IBaseSceneEntity.Children">
            <summary>
            Gets the collection of children for this entity
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IBaseSceneEntity.EntityId">
            <summary>
            Gets or sets a unique <see cref="T:System.UInt32"/> identifier for this entity.
            </summary>   
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IBaseSceneEntity.Viewport3D">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.IViewport3D"/> instance that hosts this root entity
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IBaseSceneEntity.EntityIdProvider">
            <summary>
            <para>Gets or sets an <see cref="T:SciChart.Charting3D.Primitives.IEntityIdProvider"/> which encodes and decodes <see cref="T:SciChart.Charting3D.Primitives.VertexId"/>s</para>
            <para>VertexIds consist of MeshID (object ID) and vertex ID. </para>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IBaseSceneEntity.IsVisible">
            <summary>
            Gets or sets whether this entity is visible or not
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IBaseSceneEntity.IsDirty">
            <summary>
            When true, meshes need to be recreated on the next Render Pass
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IBaseSceneEntity.Parent">
            <summary>
            Gets or sets the parent <see cref="T:SciChart.Charting3D.Primitives.IBaseSceneEntity"/>
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IBaseSceneEntity.RootSceneEntity">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.IRootSceneEntity"/> at the root of the 
            </summary>        
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IBaseSceneEntity.Update">
            <summary>
            Updates this entity with the current scene time
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IBaseSceneEntity.Render">
            <summary>
            Renders this entity with the current scene and render pass data
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IBaseSceneEntity.VisitEntities(System.Action{SciChart.Charting3D.Primitives.IBaseSceneEntity})">
            <summary>
            <para>Implements the Visitor Pattern, visiting all Child entities (and their children) performing the operation on each one.</para>
            <para>Use this when you want to set a property on all entities in the scene, or perform a certain function on all entities</para>
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IBaseSceneEntity.SetRenderPassData(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Sets the current <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D"/>, which contains the data needed for this render pass
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D"/>.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IBaseSceneEntity.PerformSelection(System.Boolean,System.Collections.Generic.List{SciChart.Charting3D.Primitives.VertexId})">
            <summary>
            Performs selection on this entity, setting the IsSelected flag to True or False on the specified <see cref="T:SciChart.Charting3D.Primitives.VertexId">Vertex Ids</see>
            </summary>
            <param name="isSelected">if set to <c>true</c> the vertices become .</param>
            <param name="vertexIds">The vertex ids.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IBaseSceneEntity.GetEntity``1">
            <summary>
            Gets the first child entity of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of entity to search for</typeparam>
            <returns>The entity instance, or default{T}</returns>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IBaseSceneEntity.GetSelectionId(System.Windows.Point)">
            <summary>
            Gets the selection identifier under the mouse point. Use <see cref="T:SciChart.Charting3D.Primitives.IEntityIdProvider"/> to decode into mesh and vertex Ids
            </summary>
            <param name="mousePoint">The mouse point.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IBaseSceneEntity.GetSelectionId(System.Windows.Point,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the selection identifier under the mouse point. Use <see cref="T:SciChart.Charting3D.Primitives.IEntityIdProvider"/> to decode into mesh and vertex Ids
            </summary>
            <param name="mousePoint">The mouse point.</param>
            <param name="entityId">When method returns, contains selected entity ID.</param>
            <param name="vertexId">When method returns, contains selected vertex ID.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IBaseSceneEntity.GetSelectionId(System.Windows.Point,System.UInt32@,SciChart.Charting3D.Primitives.HeightMapIndex@)">
            <summary>
            Gets the selection identifier under the mouse point. Use <see cref="T:SciChart.Charting3D.Primitives.IEntityIdProvider"/> to decode into mesh and vertex Ids
            </summary>
            <param name="mousePoint">The mouse point.</param>
            <param name="entityId">When method returns, contains selected entity ID.</param>
            <param name="heightMapIndex">When method returns, contains selected height map index.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IBaseSceneEntity.GetHeightmapIndices(System.Windows.Point)">
            <summary>
            Gets the heightmap indices under the mouse point. Use <see cref="T:SciChart.Charting3D.Primitives.IEntityIdProvider"/> to decode into mesh and vertex Ids
            </summary>
            <param name="mousePoint">The mouse point.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IBaseSceneEntity.OnAttached">
            <summary>
            Called immediately after an entity is attached to a parent
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IBaseSceneEntity.OnDetached">
            <summary>
            Called immediate before an entity is detached from a parent 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IBaseSceneEntity.OnEngineRestart">
            <summary>
            Called when the D3DEngine Restarts. Meshes and DirectX related objects should be recreated
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.BaseSceneEntity">
            <summary>
            Defines an Entity in the 3D Scene. All types inheriting from <see cref="T:SciChart.Charting3D.Primitives.BaseSceneEntity"/> have the abilty to be postioned and rendered using geometry and primitives defined in the 3D engine
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.#cctor">
            <summary>
            Initializes the <see cref="T:SciChart.Charting3D.Primitives.BaseSceneEntity"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Primitives.BaseSceneEntity"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.#ctor(SciChart.Charting3D.Primitives.IBaseSceneEntity[])">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Primitives.BaseSceneEntity"/> class with predefined child entities
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:SciChart.Charting3D.Primitives.BaseSceneEntity"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.BaseSceneEntity.Viewport3D">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.IViewport3D"/> instance that hosts this root entity
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.BaseSceneEntity.Parent">
            <summary>
            Gets or sets the parent <see cref="T:SciChart.Charting3D.Primitives.IBaseSceneEntity"/>
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Primitives.BaseSceneEntity.Children">
            <summary>
            Gets the collection of children for this entity.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.BaseSceneEntity.EntityId">
            <summary>
            Gets or sets a unique <see cref="T:System.UInt32"/> identifier for this entity.
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Primitives.BaseSceneEntity.IsVisible">
            <summary>
            Gets or sets whether this entity is visible or not.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.BaseSceneEntity.RequiresSelectionId">
            <summary>
            <para>Gets a value indicating whether this entity requires a SelectionID.</para>
            <para>If TRUE (default), then the <see cref="M:SciChart.Charting3D.Primitives.IEntityIdProvider.GetEntityId"/> method will be called on setting <see cref="P:SciChart.Charting3D.Primitives.BaseSceneEntity.EntityIdProvider"/>. This selection ID is passed through to the
            3D Graphics engine to enable selection, tooltips on the entity.</para>
            <para>If FALSE, then no entity ID will be set. It will be the default value of <see cref="F:System.UInt32.MaxValue"/>. The item will be considered ignored for selection and tooltips.</para>
            </summary>
            <value>
            <c>true</c> if [requires selection identifier]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.BaseSceneEntity.EntityIdProvider">
            <summary>
            <para>Gets or sets an <see cref="T:SciChart.Charting3D.Primitives.IEntityIdProvider"/> which encodes and decodes <see cref="T:SciChart.Charting3D.Primitives.VertexId"/>s</para>
            <para>VertexIds consist of MeshID (object ID) and vertex ID. </para>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.Update(System.Single)">
            <summary>
            Updates this entity with the current scene time
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.BaseSceneEntity.RootSceneEntity">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.IRootSceneEntity" /> at the root of the
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.BaseSceneEntity.IsDirty">
            <summary>
            When true, meshes need to be recreated on the next Render Pass
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.Update">
            <summary>
            Called when the 3D Engine wishes to update the geometry in this element. This is where we need to cache geometry before draw.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.UpdateScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to update the geometry in this element. This is where we need to cache geometry before draw.
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D"/> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.Render">
            <summary>
            Renders this entity with the current scene and render pass data
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.OnEngineRestart">
            <summary>
            Called when the D3DEngine Restarts. Meshes and DirectX related objects should be recreated
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.RenderScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to render this element. This is where geometry must be drawn to the 3D scene
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D"/> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.BeginMesh(SciChart.Charting3D.Primitives.TSRRenderMode)">
            <summary>
            Begins an Immediate Mesh, which can be used to draw dynamic 3D meshes on the fly. Accepts <see cref="T:SciChart.Charting3D.Primitives.TSRRenderMode"/> which defines the DirectX primitive type
            </summary>
            <param name="renderMode">The render mode.</param>
            <returns>The <see cref="T:SciChart.Charting3D.Primitives.IImmediateMeshContext"/> which can be used for creating dynamic 3D meshes on the fly</returns>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.BeginLitMesh(SciChart.Charting3D.Primitives.TSRRenderMode)">
            <summary>
            Begins an Immediate Mesh, which can be used to draw dynamic 3D meshes on the fly. Accepts <see cref="T:SciChart.Charting3D.Primitives.TSRRenderMode"/> which defines the DirectX primitive type
            </summary>
            <param name="renderMode">The render mode.</param>
            <returns>The <see cref="T:SciChart.Charting3D.Primitives.IImmediateMeshContext"/> which can be used for creating dynamic 3D meshes on the fly</returns>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.BeginLines(System.Single,System.Boolean)">
            <summary>
            <para>Begins an Immediate Lines Mesh, which can be used to draw dynamic continuous (Poly) 3D lines on the fly.</para>
            <para>Accepts <see cref="T:System.Single"/> StrokeThickness which defines the stroke thickness in world coordinates for the line</para>
            </summary>
            <param name="isAntialiased">When true, lines are antialised</param>
            <param name="strokeThickness">The StrokeThickness.</param>
            <returns>The <see cref="T:SciChart.Charting3D.Primitives.ILinesMesh"/> which can be used for creating dynamic 3D lines on the fly</returns>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.BeginLineStrips(System.Single,System.Boolean)">
            <summary>
            <para>Begins an Immediate Lines Mesh, which can be used to draw dynamic disjointed (discontinuous) 3D lines on the fly. </para>
            <para>Accepts <see cref="T:System.Single"/> StrokeThickness which defines the stroke thickness in world coordinates for the line</para>
            </summary>
            <param name="strokeThickness">The StrokeThickness.</param>
            <param name="isAntialiased">When true, lines are antialised</param>
            <returns>The <see cref="T:SciChart.Charting3D.Primitives.ILinesMesh"/> which can be used for creating dynamic 3D lines on the fly</returns>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.BeginPoints(System.Single,SciChart.Charting3D.PointMarkers.BasePointMarker3D)">
            <summary>
            <para>Begins an Immediate Points Mesh, which can be used to draw dynamic points (as textures, pixels or 3D models) on the fly. </para>
            <para>Accepts <paramref cref="T:System.Single"/> PointSize which defines the default size of the 3D point in world coordinates</para>
            <para>Accepts <paramref cref="T:SciChart.Charting3D.PointMarkers.BasePointMarker3D"/> pointMarker which defines the geometry of the 3D point</para>
            </summary>
            <param name="pointSize">The Point Size.</param>
            <param name="pointMarker">The Point Marker to draw at each XYZ point</param>
            <returns>The <see cref="T:SciChart.Charting3D.Primitives.IPointsMesh"/> which can be used for creating dynamic 3D points on the fly</returns>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.BeginColumns(SciChart.Charting3D.Interop.TSRIndexedMesh)">
            <summary>
            <para>Begins an Immediate Columns Mesh, which can be used to draw dynamic columns on the fly. </para>
            <para>Accepts <paramref cref="T:System.Single"/> columnSize which defines the default X,Z size of the 3D column in world coordinates</para>
            <para>Accepts <paramref cref="!:IndexedMesh3D"/> which defines the geometry of the 3D column</para>
            </summary>
            <param name="columnsMesh">The <see cref="!:IndexedMesh3D"/> which defines the geometry of the 3D column</param>
            <returns>The <see cref="T:SciChart.Charting3D.Primitives.IPointsMesh"/> which can be used for creating dynamic 3D points on the fly</returns>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.BeginSolidMesh(System.Boolean)">
            <summary>
            <para>Begins an Immediate Solid Mesh, which can be used to draw dynamic 3D planes on the fly.</para>
            </summary>
            <returns>The <see cref="T:SciChart.Charting3D.Visuals.Primitives.ISolidMesh"/> which can be used for creating dynamic 3D planes on the fly.</returns>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.SetRenderPassData(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Sets the current <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D"/>, which contains the data needed for this render pass.
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D"/>.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.GetEntity``1">
            <summary>
            Gets the first child entity of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of entity to search for</typeparam>
            <returns>The entity instance, or default{T}</returns>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.PerformSelection(System.Boolean,System.Collections.Generic.List{SciChart.Charting3D.Primitives.VertexId})">
            <summary>
            Performs selection on this entity, setting the IsSelected flag to True or False on the specified <see cref="T:SciChart.Charting3D.Primitives.VertexId">Vertex Ids</see>
            </summary>
            <param name="isSelected">if set to <c>true</c> the vertices become .</param>
            <param name="vertexIds">The vertex ids.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.GetKind">
            <summary>
            Gets Scene Entity Kind that determines rendering pass during which scene entity has to be rendered.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.InvalidateScene">
            <summary>
            Forces the entire scene to redraw
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.OnAttached">
            <summary>
            Called immediately after an entity is attached to a parent
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.OnDetached">
            <summary>
            Called immediately before an entity is detached from a parent
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.AttachChild(SciChart.Charting3D.Primitives.IBaseSceneEntity)">
            <summary>
            Attaches a <see cref="T:SciChart.Charting3D.Primitives.IBaseSceneEntity"/> to the <see cref="P:SciChart.Charting3D.Primitives.BaseSceneEntity.Children"/> collection.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.DetachChild(SciChart.Charting3D.Primitives.IBaseSceneEntity)">
            <summary>
            Detaches a <see cref="T:SciChart.Charting3D.Primitives.IBaseSceneEntity"/> and removes from the <see cref="P:SciChart.Charting3D.Primitives.BaseSceneEntity.Children"/> collection
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.GetSelectionId(System.Windows.Point)">
            <summary>
            Gets the selection identifier under the mouse point. Use <see cref="T:SciChart.Charting3D.Primitives.IEntityIdProvider"/> to decode into mesh and vertex Ids
            </summary>
            <param name="mousePoint">The mouse point.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.GetHeightmapIndices(System.Windows.Point)">
            <summary>
            Gets the heightmap indices under the mouse point. Use <see cref="T:SciChart.Charting3D.Primitives.IEntityIdProvider"/> to decode into mesh and vertex Ids
            </summary>
            <param name="mousePoint">The mouse point.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.VisitEntities(System.Action{SciChart.Charting3D.Primitives.IBaseSceneEntity})">
            <summary>
            <para>Implements the Visitor Pattern, visiting all Child entities (and their children) performing the operation on each one.</para>
            <para>Use this when you want to set a property on all entities in the scene, or perform a certain function on all entities</para>
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.BaseSceneEntity.OnChildEntitiesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="P:SciChart.Charting3D.Primitives.BaseSceneEntity.Children"/> child entities collection changes 
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.BlendStates">
            <summary>
            Provides Blend State options to the 3D renderer
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.BlendStates.Default">
            <summary>
            The Default Depth Stencil State: Alpha Blend is disabled
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.BlendStates.AlphaBlendState">
            <summary>
            The Alpha Blend State: Alpha Blend is enabled
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.BlendStates.HudAlphaBlendState">
            <summary>
            The HUD Alpha Blend State: Alpha Blend is enabled for first render target only ( preserves hit-test )
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.BlendStates.TSRBlendState">
            <summary>
            Gets the <see cref="P:SciChart.Charting3D.Primitives.BlendStates.TSRBlendState"/> - the wrapper object sent to 3D Engine
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.DefaultEntityIdProvider">
            <summary>
            <para>An <see cref="T:SciChart.Charting3D.Primitives.IEntityIdProvider"/> encodes into a single <see cref="T:System.UInt32"/> a unique ID to identify a mesh and a vertex.</para>
            <para>This means there is a maximum count of 4 Billion vertices in the scene, but the UInt32 must be split into two parts <see cref="T:System.UInt32"/> VertexID and <see cref="T:System.UInt32"/> Entity (Mesh ID).</para>
            <para>The EntityIdprovider accepts integer entity/vertex ID and encodes into a single <see cref="T:SciChart.Charting3D.Primitives.VertexId"/> struct. It can also decode from <see cref="T:SciChart.Charting3D.Primitives.VertexId"/> back into Mesh and Vertex ID.</para>
            <para>The <see cref="T:SciChart.Charting3D.Primitives.DefaultEntityIdProvider"/> encodes with a schema of 10-bits for EntityId and 22-bits for VertexId. This means the 3D scene can have a maximum of 1024 meshes, and each mesh can have a maximum of 4 million vertices</para>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Primitives.DefaultEntityIdProvider.MaxBitsCount">
            <summary>
            Maximal allowed number of bits in an ID.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.DefaultEntityIdProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Primitives.DefaultEntityIdProvider"/> class.
            </summary>
            <param name="meshBits">The mesh bits (number of bits out of 32 used to encode Entity ID).</param>
            <param name="vertexBits">The vertex bits (number of bits out of 32 used to encode Vertex ID).</param>
            <exception cref="T:System.ArgumentException">MeshBits + VertexBits must be positive and add up to 32bits, e.g. MeshBits=10, VertexBits=22. Please choose how many bits in the unsigned integer (32bit) to assign to MeshID and how many to VertexId</exception>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.DefaultEntityIdProvider.MaxMeshId">
            <summary>
            Gets the maximum mesh ID.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.DefaultEntityIdProvider.MaxVertexId">
            <summary>
            Gets the maximum vertex ID
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.DefaultEntityIdProvider.GetEntityId">
            <summary>
            Gets the next available Entity ID
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">The Maximum Mesh ID has been exceeded. Please see www.scichart.com/maximum-mesh-id</exception>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.DefaultEntityIdProvider.EncodeVertexId(System.UInt32,System.UInt32)">
            <summary>
            Encodes the vertex identifier.
            </summary>
            <param name="entityId">The entity identifier.</param>
            <param name="vertexId">The vertex identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.DefaultEntityIdProvider.DecodeVertexId(SciChart.Charting3D.Primitives.VertexId,System.UInt32@,System.UInt32@)">
            <summary>
            Encodes a 32-bit <see cref="T:SciChart.Charting3D.Primitives.VertexId" /> into <see cref="T:System.UInt32">Entity ID</see> and <see cref="T:System.UInt32">Vertex ID</see> according to the schema that this EntityIdProvider uses
            </summary>
            <param name="vertexId">The VertexId</param>
            <param name="entity">The entity Id.</param>
            <param name="vertex">The vertex Id.</param>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.DepthStencilStates">
            <summary>
            Provides Depth Stencil options to the 3D renderer
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.DepthStencilStates.Default">
            <summary>
            The Default Depth Stencil State: Depth test is enabled
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.DepthStencilStates.DepthTestDisabledState">
            <summary>
            The Disabled Depth Stencil State: Depth test is disabled
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.DepthStencilStates.DepthWriteDisabledState">
            <summary>
            The Disabled Depth Stencil State: Depth write is disabled
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.DepthStencilStates.TSRDepthStencilState">
            <summary>
            Gets the <see cref="P:SciChart.Charting3D.Primitives.DepthStencilStates.TSRDepthStencilState"/> - the wrapper object sent to 3D Engine
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.VertexId">
            <summary>
            VertexId is a single 32-bit struct to store encoded vertex and entity IDs
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Primitives.VertexId.Id">
            <summary>
            The identifier - an encoded 32-bit Id which combines vertex and mesh ID
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.EntityVertexId">
            <summary>
            EntityVertexId is a 64-bit struct to store decoded vertex and entity IDs
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Primitives.EntityVertexId.EntityId">
            <summary>
            The entity identifier
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Primitives.EntityVertexId.VertexId">
            <summary>
            The vertex identifier
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.IEntityIdProvider">
            <summary>
            <para>An EntityIdProvider encodes into a single <see cref="T:System.UInt32"/> a unique ID to identify a mesh and a vertex.</para>
            <para>This means there is a maximum count of 4 Billion vertices in the scene, but the UInt32 must be split into two parts <see cref="T:System.UInt32"/> VertexID and <see cref="T:System.UInt32"/> Entity (Mesh ID).</para>
            <para>The EntityIdprovider accepts integer entity/vertex ID and encodes into a single <see cref="T:SciChart.Charting3D.Primitives.VertexId"/> struct. It can also decode from <see cref="T:SciChart.Charting3D.Primitives.VertexId"/> back into Mesh and Vertex ID.</para>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IEntityIdProvider.GetEntityId">
            <summary>
            Gets the next available Entity ID.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IEntityIdProvider.ReleaseEntityId(System.UInt32)">
            <summary>
            Releases the <paramref name="id"/> and puts it back into an <see cref="T:SciChart.Core.ObjectPool`1"/>.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IEntityIdProvider.EncodeVertexId(System.UInt32,System.UInt32)">
            <summary>
            Encodes a <see cref="T:System.UInt32">Entity ID</see> and <see cref="T:System.UInt32">Vertex ID</see> into a single 32-bit <see cref="T:SciChart.Charting3D.Primitives.VertexId"/> struct according to the schema that this EntityIdProvider uses.
            </summary>
            <param name="entity">The entity Id.</param>
            <param name="vertex">The vertex Id.</param>
            <returns>The encoded VertexId</returns>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.IEntityIdProvider.DecodeVertexId(SciChart.Charting3D.Primitives.VertexId,System.UInt32@,System.UInt32@)">
            <summary>
            Encodes a 32-bit <see cref="T:SciChart.Charting3D.Primitives.VertexId"/> into <see cref="T:System.UInt32">Entity ID</see> and <see cref="T:System.UInt32">Vertex ID</see> according to the schema that this EntityIdProvider uses.
            </summary>
            <param name="vertexId">The VertexId</param>
            <param name="entity">The entity Id.</param>
            <param name="vertex">The vertex Id.</param>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D">
            <summary>
            Defines constants and parameters for the current render pass
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IRenderPassInfo3D.XCalc">
            <summary>
            Gets or sets the <see cref="P:SciChart.Charting3D.SciChart3DSurface.XAxis"/> CoordinateCalculator, 
            which transforms data-coordinates to world coordinates in the 3D scene
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IRenderPassInfo3D.YCalc">
            <summary>
            Gets or sets the <see cref="P:SciChart.Charting3D.SciChart3DSurface.YAxis"/> CoordinateCalculator, 
            which transforms data-coordinates to world coordinates in the 3D scene
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IRenderPassInfo3D.ZCalc">
            <summary>
            Gets or sets the <see cref="P:SciChart.Charting3D.SciChart3DSurface.ZAxis"/> CoordinateCalculator, 
            which transforms data-coordinates to world coordinates in the 3D scene
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IRenderPassInfo3D.HasChanges">
            <summary>
            Gets or sets a value indicating whether the scene has changes, requiring a re-build of geometry
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IRenderPassInfo3D.Warnings">
            <summary>
            Gets or sets a list of warnings outputted during render
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IRenderPassInfo3D.WorldDimensions">
            <summary>
            Gets or sets the WorldDimensions on the parent SciChart3DSurface
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IRenderPassInfo3D.WorldClipPlanes">
            <summary>
            Gets or sets clip planes on the parent SciChart3DSurface
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.IRenderPassInfo3D.SceneDescriptor">
            <summary>
            Gets or sets the SceneDescriptor, which contains information for the current scene to be drawn
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.RenderPassInfo3D">
            <summary>
            Defines constants and parameters for the current render pass
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.RenderPassInfo3D.XCalc">
            <summary>
            Gets or sets the <see cref="P:SciChart.Charting3D.SciChart3DSurface.XAxis" /> CoordinateCalculator,
            which transforms data-coordinates to world coordinates in the 3D scene
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.RenderPassInfo3D.YCalc">
            <summary>
            Gets or sets the <see cref="P:SciChart.Charting3D.SciChart3DSurface.YAxis" /> CoordinateCalculator,
            which transforms data-coordinates to world coordinates in the 3D scene
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.RenderPassInfo3D.ZCalc">
            <summary>
            Gets or sets the <see cref="P:SciChart.Charting3D.SciChart3DSurface.ZAxis" /> CoordinateCalculator,
            which transforms data-coordinates to world coordinates in the 3D scene
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.RenderPassInfo3D.HasChanges">
            <summary>
            Gets or sets a value indicating whether the scene has changes, requiring a re-build of geometry
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.RenderPassInfo3D.Warnings">
            <summary>
            Gets or sets a list of warnings outputted during render
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.RenderPassInfo3D.WorldDimensions">
            <summary>
            Gets or sets the WorldDimensions on the parent SciChart3DSurface
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.RenderPassInfo3D.WorldClipPlanes">
            <summary>
            Gets or sets clip planes on the parent SciChart3DSurface
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.RenderPassInfo3D.SceneDescriptor">
            <summary>
            Gets or sets the SceneDescriptor, which contains information for the current scene to be drawn
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.ISceneDescriptor">
            <summary>
            The SceneDescriptor passes information from WPF about the scene to the 3D Engine
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.ISceneDescriptor.DrawFps">
            <summary>
            When True, draw the FPS Counter in the bottom left of the Viewport
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Primitives.ISceneDescriptor.DrawXyzGizmo">
            <summary>
            When True, draw the XYZ Orientation Gizmo in the bottom left of the Viewport
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.Primitives.ISceneDescriptor.AxisCubeDescriptor">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.Primitives.IAxisCubeDescriptor"/>, which passes information from WPF about the Axis Cube to the 3D Engine
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.SceneDescriptor">
            <summary>
            The SceneDescriptor passes information from WPF about the scene to the 3D Engine
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.SceneDescriptor.DrawFps">
            <summary>
            When True, draw the FPS Counter in the bottom left of the Viewport
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.SceneDescriptor.DrawXyzGizmo">
            <summary>
            When True, draw the XYZ Orientation Gizmo in the bottom left of the Viewport
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.SceneDescriptor.AxisCubeDescriptor">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.Primitives.IAxisCubeDescriptor" />, which passes information from WPF about the Axis Cube to the 3D Engine
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.TextAlignment">
            <summary>
            Enumarates possible types of text alignment.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.ITextStyle">
            <summary>
            Defines the interface to a class which passes Text Style information from WPF to the 3D Engine
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.ITextStyle.FontFamily">
            <summary>
            Gets or sets the font family.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.ITextStyle.FontSize">
            <summary>
            Gets or sets the font size.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.ITextStyle.Foreground">
            <summary>
            Gets or sets the font color.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.ITextStyle.Alignment">
            <summary>
            Gets or sets a type of the text aligned.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.TextStyle">
            <summary>
            A class which passes Text Style information from WPF to the 3D Engine
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.TextStyle.FontFamily">
            <summary>
            Gets or sets the font family.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.TextStyle.FontSize">
            <summary>
            Gets or sets the font size.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.TextStyle.DpiScaling">
            <summary>
            Gets or sets the DPI Scaling factor, e.g. 1.0f = normal 96 DPI. 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.TextStyle.Foreground">
            <summary>
            Gets or sets the font color.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.TextStyle.Alignment">
            <summary>
            Gets or sets a type of the text aligned.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.ILineStyle">
            <summary>
            Defines the interface to a class which passes Line Style information from WPF to the 3D Engine
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.ILineStyle.Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.ILineStyle.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.ILineStyle.X1">
            <summary>
            Gets or sets the x1 position of the line (e.g. when drawing ticks, x1, x2 specify the tick length)
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.ILineStyle.X2">
            <summary>
            Gets or sets the x2 position of the line (e.g. when drawing ticks, x1, x2 specify the tick length)
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.ILineStyle.StrokeDashArray">
            <summary>
            Gets or sets the stroke dash array.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Primitives.LineStyle">
            <summary>
            A class which passes Line Style information from WPF to the 3D Engine
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.LineStyle.Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.LineStyle.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.LineStyle.X1">
            <summary>
            Gets or sets the x1 position of the line (e.g. when drawing ticks, x1, x2 specify the tick length)
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.LineStyle.X2">
            <summary>
            Gets or sets the x2 position of the line (e.g. when drawing ticks, x1, x2 specify the tick length)
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Primitives.LineStyle.StrokeDashArray">
            <summary>
            Gets or sets the stroke dash array.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Primitives.LineStyle.FromStyle(System.Windows.Shapes.Line,SciChart.Charting3D.Primitives.LineStyle,System.Windows.Style,System.String)">
            <summary>
            Converts a <see cref="T:System.Windows.Style"/> with TargetType Line to <see cref="T:SciChart.Charting3D.Primitives.LineStyle"/>
            </summary>
            <param name="style">The style.</param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.ColumnSpacingMode">
            <summary>
            Enumerates possible column spacing modes.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ColumnSpacingMode.MaxNonOverlapping">
            <summary>
            Max possible column size where columns don't overlap each other in regards to series data points.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ColumnSpacingMode.FixedSize">
            <summary>
            Fixed size column mode.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.FreeSurfacePaletteMinMaxMode">
            <summary>
            Enumerates possible mode of a palette of the Free Surface.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfacePaletteMinMaxMode.Relative">
            <summary>
            <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteMinimum"/> and <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteMaximum"/> values
            are defined relatively to the offset of the free surface.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfacePaletteMinMaxMode.Absolute">
            <summary>
            <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteMinimum"/> and <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteMaximum"/> values
            are defined as absolute X/Y/Z values of the 3D Axis.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.BaseGridMeshSceneEntityHelper">
            <summary>
            A base class for a <see cref="T:SciChart.Charting3D.RenderableSeries.ISceneEntityHelper"/> which uses <see cref="T:SciChart.Charting3D.Model.UniformGridDataSeries3D`3"/> data as input, and transforms
            into scene geometry 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseGridMeshSceneEntityHelper.PerformSelection(SciChart.Charting3D.Model.IDataSeries3D,System.Boolean,System.Collections.Generic.List{SciChart.Charting3D.Primitives.VertexId})">
            <summary>
            Performs selection, setting the <paramref name="isSelected"/> flag to true or false on the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> for the given list of <see cref="T:SciChart.Charting3D.Primitives.VertexId">Vertex Ids</see>
            </summary>
            <param name="dataSeries">The data series.</param>
            <param name="isSelected">if set to <c>true</c> [is selected].</param>
            <param name="vertexIds">The vertex ids.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseGridMeshSceneEntityHelper.GetXyzDataValue(SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.Model.IPointSeries3D)">
            <summary>
            Gets the hit data value from the <paramref name="lastPointSeries"/> based on the <paramref name="hitTestInfo"/> 
            </summary>
            <returns>
            null if the <paramref name="hitTestInfo"/> isn't valid
            Vector3D hit data value if <paramref name="hitTestInfo"/> is valid
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseGridMeshSceneEntityHelper.GetMetadata(SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.Model.IPointSeries3D)">
            <summary>
            Gets the Metadata value from the <paramref name="lastPointSeries"/> based on the <paramref name="hitTestInfo"/> 
            </summary>
            <param name="hitTestInfo">The hit test information.</param>
            <param name="lastPointSeries"></param>
            <returns>
            null if the <paramref name="hitTestInfo"/> isn't valid or if metadata not supported on this series type. 
            IPointMetadata3D hit data value if <paramref name="hitTestInfo"/> is valid
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseGridMeshSceneEntityHelper.ToPointSeries(SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D)">
            <summary>
            Converts a DataSeries to a <see cref="T:SciChart.Charting3D.Model.IGridPointSeries3D" /> derived type, for use during the render pass
            </summary>
            <returns>
            The PointSeries, which may be used for drawing
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseGridMeshSceneEntityHelper.GetDataValues(SciChart.Charting3D.Model.IPointSeries3D,System.Collections.Generic.List{SciChart.Charting3D.Model.IPointMetadata3D}@)">
            <summary>
            Transforms data from an IPointSeries3D into a list of data-values (Vector3D) and PointMetadata3D. Used to create the mesh
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseGridMeshSceneEntityHelper.HitTest(System.Windows.Point,SciChart.Charting3D.Primitives.IBaseSceneEntity)">
            <summary>
            Performs a HitTest operation on the <paramref name="baseSceneEntity"/> of type <see cref="T:SciChart.Charting3D.Primitives.IBaseSceneEntity"/>, returning the <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D" /> containing the result
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseGridMeshSceneEntityHelper.ToSeriesInfo(SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.RenderableSeries.IRenderableSeries3D,System.UInt32,System.Func{SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.Vector3},System.Func{SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3},System.Func{SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.Model.IPointMetadata3D})">
            <summary>
            Converts the result of a Hit-Test operation (<see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D" />) to a <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D" /> class, which may be used as a
            ViewModel when outputting series values as bindings. <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D" /> is used by the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D" /> class
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.BaseXyzSceneEntityHelper">
            <summary>
            A base class for a <see cref="T:SciChart.Charting3D.RenderableSeries.ISceneEntityHelper"/> which uses <see cref="T:SciChart.Charting.Model.DataSeries.XyzDataSeries`1"/> data as input, and transforms
            into scene geometry 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseXyzSceneEntityHelper.PerformSelection(SciChart.Charting3D.Model.IDataSeries3D,System.Boolean,System.Collections.Generic.List{SciChart.Charting3D.Primitives.VertexId})">
            <summary>
            Performs selection, setting the <paramref name="isSelected"/> flag to true or false on the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> for the given list of <see cref="T:SciChart.Charting3D.Primitives.VertexId">Vertex Ids</see>
            </summary>
            <param name="dataSeries">The data series.</param>
            <param name="isSelected">if set to <c>true</c> [is selected].</param>
            <param name="vertexIds">The vertex ids.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseXyzSceneEntityHelper.GetXyzDataValue(SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.Model.IPointSeries3D)">
            <summary>
            Gets the hit data value from the <paramref name="lastPointSeries"/> based on the <paramref name="hitTestInfo"/> 
            </summary>
            <returns>
            null if the <paramref name="hitTestInfo"/> isn't valid
            Vector3D hit data value if <paramref name="hitTestInfo"/> is valid
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseXyzSceneEntityHelper.GetMetadata(SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.Model.IPointSeries3D)">
            <summary>
            Gets the Metadata value from the <paramref name="lastPointSeries"/> based on the <paramref name="hitTestInfo"/> 
            </summary>
            <param name="hitTestInfo">The hit test information.</param>
            <param name="lastPointSeries"></param>
            <returns>
            null if the <paramref name="hitTestInfo"/> isn't valid or if metadata not supported on this series type. 
            IPointMetadata3D hit data value if <paramref name="hitTestInfo"/> is valid
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseXyzSceneEntityHelper.ToPointSeries(SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D)">
            <summary>
            Converts a DataSeries to a <see cref="T:SciChart.Charting3D.Model.IXyzPointSeries3D" /> derived type, for use during the render pass
            </summary>
            <returns>
            The PointSeries, which may be used for drawing
            </returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseXyzSceneEntityHelper.GetDataValues(SciChart.Charting3D.Model.IPointSeries3D,System.Collections.Generic.List{SciChart.Charting3D.Model.IPointMetadata3D}@)">
            <summary>
            Transforms data from an IPointSeries3D into a list of data-values (Vector3D) and PointMetadata3D. Used to create the mesh
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseXyzSceneEntityHelper.HitTest(System.Windows.Point,SciChart.Charting3D.Primitives.IBaseSceneEntity)">
            <summary>
            Performs a HitTest operation on the <paramref name="baseSceneEntity"/> of type <see cref="T:SciChart.Charting3D.Primitives.IBaseSceneEntity"/>, returning the <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D" /> containing the result
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseXyzSceneEntityHelper.ToSeriesInfo(SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.RenderableSeries.IRenderableSeries3D,System.UInt32,System.Func{SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.Vector3},System.Func{SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3},System.Func{SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.Model.IPointMetadata3D})">
            <summary>
            Converts the result of a Hit-Test operation (<see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D" />) to a <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D" /> class, which may be used as a
            ViewModel when outputting series values as bindings. <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D" /> is used by the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D" /> class
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.ColumnSceneEntity">
            <summary>
            A SceneEntity added to the 3D Scene which draws a Column Chart. 
            See also the <see cref="T:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D"/>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ColumnSceneEntity.#ctor(SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.ColumnSceneEntity"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ColumnSceneEntity.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ColumnSceneEntity.RenderScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to render this element. This is where geometry must be drawn to the 3D scene
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ColumnSceneEntity.OverrideOpacity">
            <summary>
            Overrides the opacity of the entity.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ColumnSceneEntity.UpdateMeshes(SciChart.Charting3D.Model.IPointSeries3D,System.Collections.Generic.List{System.Windows.Media.Media3D.Vector3D},System.Collections.Generic.List{SciChart.Charting3D.Model.IPointMetadata3D})">
            <summary>
            When overridden in a derived class, updates all 3D meshes from Data
            </summary>
            <param name="points">The <see cref="T:SciChart.Charting3D.Model.IPointSeries3D"/> containing the data.</param>
            <param name="dataValues">The data values.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ColumnSceneEntity.GetHeightMapIndex(System.UInt32)">
            <summary>
            Gets Hieght Map Index by specified vertex ID value from selection buffer.
            </summary>
            <param name="vertexId">Vertex ID value from selection buffer</param>
            <returns>Hieght Map Index</returns>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D">
            <summary>
            Provides 3D Columns series rendering 
            </summary>
            <remarks>
            A RenderableSeries has a <see cref="T:SciChart.Charting3D.Model.IXyzPointSeries3D"/> or <see cref="T:SciChart.Charting3D.Model.IGridPointSeries3D"/> data-source.
            </remarks>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.FillProperty">
            <summary>
            Defines the Fill DependencyProperty
            </summary>   
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.SelectedDataPointFillProperty">
            <summary>
            Defines the SelectedDataPointFill DependencyProperty
            </summary>   
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.ColumnShapeProperty">
            <summary>
            Defines the ColumnShape DependencyProperty
            </summary>   
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.DataPointWidthProperty">
            <summary>
            Defines the DataPointWidth DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.DataPointWidthXProperty">
            <summary>
            Defines the DataPointWidthX DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.DataPointWidthZProperty">
            <summary>
            Defines the DataPointWidthZ DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.ColumnSpacingModeProperty">
            <summary>
            Defines the ColumnSizeCalculationMode DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.CoulmnFixedSizeProperty">
            <summary>
            Defines the FixedSizeCoulmnValue DependencyProperty
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.Fill">
            <summary>
            Gets or sets the Fill Color for columns
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.SelectedDataPointFill">
            <summary>
            Gets or sets the Fill Color for selected data points 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.ColumnShape">
            <summary>
            Gets or sets the Shape of the colums. Should be of <see cref="T:SciChart.Charting3D.PointMarkers.BaseMeshPointMarker3D"/> type
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.DataPointWidth">
            <summary>
            Gets or sets the DataPointWidth, a value between 0.0 and 1.0 which defines the fraction of available space each column should occupy in X and Z dimension
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.DataPointWidthX">
            <summary>
            Gets or sets the DataPointWidthX, a value between 0.0 and 1.0 which defines the fraction of available space each column should occupy in X dimension.
            This property overrides value from <see cref="P:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.DataPointWidth"/> property in case it contains less value.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.DataPointWidthZ">
            <summary>
            Gets or sets the DataPointWidthZ, a value between 0.0 and 1.0 which defines the fraction of available space each column should occupy in Z dimension
            This property overrides value from <see cref="P:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.DataPointWidth"/> property in case it contains less value.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.ColumnSpacingMode">
            <summary>
            Gets or sets value determining how column size and spacing between them is calculated.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.CoulmnFixedSize">
            <summary>
            Gets or sets size of column used in Fixed size mode of <see cref="P:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.ColumnSpacingMode"/>.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.MeshPointMarker3D">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.PointMarkers.BaseMeshPointMarker3D"/> which is defines the columns shape 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.GetSceneEntity">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.RenderableSeries.ColumnSceneEntity"/> that represent this <see cref="T:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D"/>. This is the entity which will actually do the drawing in the 3D Viewport. 
            NOTE: The specification requires that subsequent calls to <see cref="M:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.GetSceneEntity"/> should return the <b>same</b> instance.
            </summary>
            <returns>The <see cref="T:SciChart.Charting3D.RenderableSeries.ColumnSceneEntity"/> instance which draws this <see cref="T:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D"/></returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D.AttachDataSeries(SciChart.Charting3D.Model.IDataSeries3D)">
            <summary>
            Attaches listeners for DataSeries.DataSeriesChanged
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.ColumnUniformGridSceneEntityHelper">
            <summary>
            Defines the interface to a Columns <see cref="T:SciChart.Charting3D.RenderableSeries.ISceneEntityHelper"/>, which is basically a strategy for dealing with 
            3D Geometry in <see cref="T:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D"/> for different data schemas
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ColumnUniformGridSceneEntityHelper.GetDataPointWidth(SciChart.Charting3D.Model.IPointSeries3D,System.Windows.Media.Media3D.Vector3D[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets the width of a Data-Point, depending on data and coordinate transformation
            </summary>
            <param name="pointSeries">The point series.</param>
            <param name="coordinates">Data in world coordinates space.</param>
            <param name="xAxisSize">Size of the X Axis.</param>
            <param name="xWidthFraction">The data point width in X.</param>
            <param name="zAxisSize">Size of the Z Axis.</param>
            <param name="zWidthFraction">The data point width in Z.</param>
            <returns>
            the width of a Data-Point, depending on data and coordinate transformation
            </returns>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.ColumnXyzSceneEntityHelper">
            <summary>
            Defines the interface to a Columns <see cref="T:SciChart.Charting3D.RenderableSeries.ISceneEntityHelper"/>, which is basically a strategy for dealing with 
            3D Geometry in <see cref="T:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D"/> for different data schemas
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ColumnXyzSceneEntityHelper.GetDataPointWidth(SciChart.Charting3D.Model.IPointSeries3D,System.Windows.Media.Media3D.Vector3D[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets the width of a Data-Point, depending on data and coordinate transformation
            </summary>
            <param name="pointSeries">The point series.</param>
            <param name="coordinates">Data in world coordinates space.</param>
            <param name="xAxisSize">Size of the X Axis.</param>
            <param name="xWidthFraction">The data point width in X.</param>
            <param name="zAxisSize">Size of the Z Axis.</param>
            <param name="zWidthFraction">The data point width in Z.</param>
            <returns>
            the width of a Data-Point, depending on data and coordinate transformation
            </returns>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.IColumnSceneEntityHelper">
            <summary>
            Defines the interface to a Columns <see cref="T:SciChart.Charting3D.RenderableSeries.ISceneEntityHelper"/>, which is basically a strategy for dealing with 
            3D Geometry in <see cref="T:SciChart.Charting3D.RenderableSeries.ColumnRenderableSeries3D"/> for different data schemas
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.IColumnSceneEntityHelper.GetDataPointWidth(SciChart.Charting3D.Model.IPointSeries3D,System.Windows.Media.Media3D.Vector3D[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets the width of a Data-Point, depending on data and coordinate transformation 
            </summary>
            <param name="pointSeries">The point series.</param>
            <param name="coordinates">Data in world coordinates space.</param>
            <param name="xAxisSize">Size of the X Axis.</param>
            <param name="xWidthFraction">The data point width in X.</param>
            <param name="zAxisSize">Size of the Z Axis.</param>
            <param name="zWidthFraction">The data point width in Z.</param>
            <returns>the width of a Data-Point, depending on data and coordinate transformation </returns>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.ImpulseSceneEntity">
            <summary>
            A SceneEntity added to the 3D Scene which draws a 3D Impulse (Stem) Chart. 
            See also the <see cref="T:SciChart.Charting3D.RenderableSeries.ImpulseRenderableSeries3D"/>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ImpulseSceneEntity.#ctor(SciChart.Charting3D.RenderableSeries.ImpulseRenderableSeries3D)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.ImpulseSceneEntity"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ImpulseSceneEntity.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ImpulseSceneEntity.RenderScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to render this element. This is where geometry must be drawn to the 3D scene
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ImpulseSceneEntity.OverrideOpacity">
            <summary>
            Overrides the opacity of the entity.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ImpulseSceneEntity.UpdateMeshes(SciChart.Charting3D.Model.IPointSeries3D,System.Collections.Generic.List{System.Windows.Media.Media3D.Vector3D},System.Collections.Generic.List{SciChart.Charting3D.Model.IPointMetadata3D})">
            <summary>
            When overridden in a derived class, updates all 3D meshes from Data
            </summary>
            <param name="points">The <see cref="T:SciChart.Charting3D.Model.IPointSeries3D"/> containing the data.</param>
            <param name="dataValues">The data values.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.ImpulseRenderableSeries3D">
            <summary>
            Provides 3D Impulse series rendering 
            </summary>
            <remarks>
            A RenderableSeries has a <see cref="T:SciChart.Charting3D.Model.IXyzPointSeries3D"/> or <see cref="T:SciChart.Charting3D.Model.IGridPointSeries3D"/> data-source.
            </remarks>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ImpulseRenderableSeries3D.SelectedDataPointStrokeProperty">
            <summary>
            Defines the SelectedDataPointStroke DependencyProperty
            </summary>   
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ImpulseRenderableSeries3D.StrokeThicknessProperty">
            <summary>
            Defines the StrokeThickness DependencyProperty
            </summary>   
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.ImpulseRenderableSeries3D.SelectedDataPointStroke">
            <summary>
            Gets or sets the Stroke Color for selected data points 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.ImpulseRenderableSeries3D.StrokeThickness">
            <summary>
            Gets or sets the StrokeThickness of the lines. 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ImpulseRenderableSeries3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.ImpulseRenderableSeries3D"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ImpulseRenderableSeries3D.GetSceneEntity">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.RenderableSeries.ImpulseSceneEntity"/> that represent this <see cref="T:SciChart.Charting3D.RenderableSeries.ImpulseRenderableSeries3D"/>. This is the entity which will actually do the drawing in the 3D Viewport. 
            NOTE: The specification requires that subsequent calls to <see cref="M:SciChart.Charting3D.RenderableSeries.ImpulseRenderableSeries3D.GetSceneEntity"/> should return the <b>same</b> instance.
            </summary>
            <returns>The <see cref="T:SciChart.Charting3D.RenderableSeries.ImpulseSceneEntity"/> instance which draws this <see cref="T:SciChart.Charting3D.RenderableSeries.ImpulseRenderableSeries3D"/></returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ImpulseRenderableSeries3D.AttachDataSeries(SciChart.Charting3D.Model.IDataSeries3D)">
            <summary>
            Attaches listeners for DataSeries.DataSeriesChanged
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.ISceneEntityHelper">
            <summary>
            Defines the interface to a Scene Entity Helper, which is basically a strategy for dealing with 3D Geometry in the scene for different data schemas
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ISceneEntityHelper.PerformSelection(SciChart.Charting3D.Model.IDataSeries3D,System.Boolean,System.Collections.Generic.List{SciChart.Charting3D.Primitives.VertexId})">
            <summary>
            Performs selection, setting the <paramref name="isSelected"/> flag to true or false on the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> for the given list of <see cref="T:SciChart.Charting3D.Primitives.VertexId">Vertex Ids</see>
            </summary>
            <param name="dataSeries">The data series.</param>
            <param name="isSelected">if set to <c>true</c> [is selected].</param>
            <param name="vertexIds">The vertex ids.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ISceneEntityHelper.GetXyzDataValue(SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.Model.IPointSeries3D)">
            <summary>
            Gets the hit data value from the <paramref name="lastPointSeries"/> based on the <paramref name="hitTestInfo"/> 
            </summary>
            <returns>
            null if the <paramref name="hitTestInfo"/> isn't valid
            Vector3D hit data value if <paramref name="hitTestInfo"/> is valid
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ISceneEntityHelper.GetMetadata(SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.Model.IPointSeries3D)">
            <summary>
            Gets the Metadata value from the <paramref name="lastPointSeries"/> based on the <paramref name="hitTestInfo"/> 
            </summary>
            <param name="hitTestInfo">The hit test information.</param>
            <param name="lastPointSeries"></param>
            <returns>
            null if the <paramref name="hitTestInfo"/> isn't valid or if metadata not supported on this series type. 
            IPointMetadata3D hit data value if <paramref name="hitTestInfo"/> is valid
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ISceneEntityHelper.ToPointSeries(SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D)">
            <summary>
            Converts a DataSeries to a <see cref="T:SciChart.Charting3D.Model.IPointSeries3D" /> derived type, for use during the render pass
            </summary>
            <returns>
            The PointSeries, which may be used for drawing
            </returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ISceneEntityHelper.GetDataValues(SciChart.Charting3D.Model.IPointSeries3D,System.Collections.Generic.List{SciChart.Charting3D.Model.IPointMetadata3D}@)">
            <summary>
            Transforms data from an IPointSeries3D into a list of data-values (Vector3D) and PointMetadata3D. Used to create the mesh
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ISceneEntityHelper.HitTest(System.Windows.Point,SciChart.Charting3D.Primitives.IBaseSceneEntity)">
            <summary>
            Performs a HitTest operation on the <paramref name="baseSceneEntity"/> of type <see cref="T:SciChart.Charting3D.Primitives.IBaseSceneEntity"/>, returning the <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D" /> containing the result
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ISceneEntityHelper.ToSeriesInfo(SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.RenderableSeries.IRenderableSeries3D,System.UInt32,System.Func{SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.Vector3},System.Func{SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3},System.Func{SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.Model.IPointMetadata3D})">
            <summary>
            Converts the result of a Hit-Test operation (<see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D" />) to a <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D" /> class, which may be used as a
            ViewModel when outputting series values as bindings. <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D" /> is used by the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D" /> class
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.PointLineSceneEntity">
            <summary>
            A SceneEntity added to the 3D Scene which draws a 3D Impulse (Stem) Chart. 
            See also the <see cref="T:SciChart.Charting3D.RenderableSeries.PointLineRenderableSeries3D"/> 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.PointLineSceneEntity.#ctor(SciChart.Charting3D.RenderableSeries.PointLineRenderableSeries3D)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.PointLineSceneEntity"/> class.
            </summary>
            <param name="renderableSeries">The renderable series.</param>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.PointLineSceneEntity.IsVisible">
            <summary>
            Gets or sets whether this entity is visible or not.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.PointLineSceneEntity.OverrideOpacity">
            <summary>
            Overrides the opacity of the entity.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.PointLineSceneEntity.UpdateMeshes(SciChart.Charting3D.Model.IPointSeries3D,System.Collections.Generic.List{System.Windows.Media.Media3D.Vector3D},System.Collections.Generic.List{SciChart.Charting3D.Model.IPointMetadata3D})">
            <summary>
            When overridden in a derived class, updates all 3D meshes from Data
            </summary>
            <param name="points">The <see cref="T:SciChart.Charting3D.Model.IPointSeries3D"/> containing the data.</param>
            <param name="dataValues">The data values.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.PointLineRenderableSeries3D">
            <summary>
            Provides 3D Line series rendering 
            </summary>
            <remarks>
            A RenderableSeries has a <see cref="T:SciChart.Charting3D.Model.IXyzPointSeries3D"/> data-source.
            </remarks>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.PointLineRenderableSeries3D.SelectedDataPointStrokeProperty">
            <summary>
            Defines the SelectedDataPointStroke DependencyProperty
            </summary>   
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.PointLineRenderableSeries3D.StrokeThicknessProperty">
            <summary>
            Defines the StrokeThickness DependencyProperty
            </summary>   
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.PointLineRenderableSeries3D.IsLineStripsProperty">
            <summary>
            Defines the IsLineStrips DependencyProperty
            </summary>  
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.PointLineRenderableSeries3D.IsAntialiasedProperty">
            <summary>
            Defines the IsAntialiased DependencyProperty
            </summary>  
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.PointLineRenderableSeries3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.PointLineRenderableSeries3D"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.PointLineRenderableSeries3D.SelectedDataPointStroke">
            <summary>
            Gets or sets the Stroke Color for selected data points 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.PointLineRenderableSeries3D.StrokeThickness">
            <summary>
            Gets or sets the StrokeThickness of the lines. 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.PointLineRenderableSeries3D.IsLineStrips">
            <summary>
            Gets or sets the IsLineStrips
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.PointLineRenderableSeries3D.IsAntialiased">
            <summary>
            Gets or sets whether the Lines are antialiased (default FALSE). 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.PointLineRenderableSeries3D.GetSceneEntity">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D" /> that represent this RenderableSeries. This is the entity which will actually do the drawing in the 3D Viewport.
            NOTE: The specification requires that subsequent calls to <see cref="M:SciChart.Charting3D.RenderableSeries.PointLineRenderableSeries3D.GetSceneEntity" /> should return the <b>same</b> instance.
            </summary>
            <returns>
            The <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D" /> instance which draws this RenderableSeries
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.Lines3DSceneEntity.#ctor(SciChart.Charting3D.RenderableSeries.PointLineRenderableSeries3D)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.Points3DSceneEntity"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.Lines3DSceneEntity.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.Lines3DSceneEntity.RenderScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to render this element. This is where geometry must be drawn to the 3D scene
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.Lines3DSceneEntity.OverrideOpacity">
            <summary>
            Overrides the opacity.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.Lines3DSceneEntity.PerformSelection(System.Boolean,System.Collections.Generic.List{SciChart.Charting3D.Primitives.VertexId})">
            <summary>
            Parent entity should select data point.
            </summary>
            <param name="isSelected"></param>
            <param name="vertexIds"></param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.Lines3DSceneEntity.UpdateMeshesFast(SciChart.Charting3D.Model.IXyzPointSeries3D)">
            <summary>
            When overridden in a derived class, updates all 3D meshes from Data
            </summary>
            <param name="points">The <see cref="T:SciChart.Charting3D.Model.IPointSeries3D"/> containing the data.</param>
            <param name="dataValues">The data values.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D">
            <summary>
            Provides Surface series rendering 
            </summary>
            <remarks>
            A RenderableSeries has a <see cref="T:SciChart.Charting3D.Model.IFreeSurfaceDataSeries3D"/> data-source.
            </remarks>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.DrawMeshAsProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.DrawMeshAs"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.StrokeThicknessProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.StrokeThickness"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.MeshColorPaletteProperty">
            <summary>
            Defines the <see cref="T:System.Drawing.Imaging.ColorPalette"/> DependencyProperty. Setting this property will overwrite the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ColorMapTexture"/> property
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteMinMaxModeProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteMinMaxMode"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteMinimumProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteMinimum"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteMaximumProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteMaximum"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteRadialFactorProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteRadialFactor"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteAxialFactorProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteAxialFactor"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteAzimuthalFactorProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteAzimuthalFactor"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PalettePolarFactorProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PalettePolarFactor"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.MeshPaletteModeProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.MeshPaletteMode"/> DependencyProperty, which defines how the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ColorMapTexture"/> is applied to the surface geometry
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ColorMapTextureProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ColorMapTexture"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ColorMapTextureSizeProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ColorMapTextureSize"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.CellHardnessFactorProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.CellHardnessFactor"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ContourStrokeThicknessProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ContourStrokeThickness"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ContourAxisProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ContourInterval"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ContourIntervalProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ContourInterval"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ContourOffsetProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ContourOffset"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ContourStrokeProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ContourStroke"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.HighlightProperty">
            <summary>
            Defines the Highlight DependencyProperty
            </summary>   
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.DrawBackSideProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.DrawBackSide"/> DependencyProperty
            </summary>   
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ContourStroke">
            <summary>
            Gets or sets the contour <see cref="T:System.Windows.Media.Color"/>.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ContourOffset">
            <summary>
            Gets or sets the contour offset.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ContourAxis">
            <summary>
            Gets or sets a value determining by which 3D axis the contour is calculated.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ContourInterval">
            <summary>
            Gets or sets the contour interval.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ContourStrokeThickness">
            <summary>
            Gets or sets contour thickness.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.CellHardnessFactor">
            <summary>
            Gets or sets a factor from 0.0f - 1.0f which defines how hard a Cell looks. e.g. 0.0f = smooth and 1.0f = hard faces
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness to apply to the wireframe. Used when <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.DrawMeshAs"/> is WireFrame or SolidWireFrame
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.DrawMeshAs">
            <summary>
            Gets or sets how to draw the mesh
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.MeshColorPalette">
            <summary>
            Gets or sets the MeshColorPalette which is used to calculate color from data value
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteMinMaxMode">
            <summary>
            Gets or sets the mode of <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteMaximum"/> and <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteMaximum"/> values.
            For more information see: <see cref="T:SciChart.Charting3D.RenderableSeries.FreeSurfacePaletteMinMaxMode"/>.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteMinimum">
            <summary>
            Gets or sets palette minimum color in regards to X, Y and Z axis.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteMaximum">
            <summary>
            Gets or sets palette maximum color in regards to X, Y and Z axis.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteRadialFactor">
            <summary>
            Gets or sets palette color intensity in regards to surface distance from origin.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteAxialFactor">
            <summary>
            Gets or sets palette color intensity in regards to X, Y and Z axis.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PaletteAzimuthalFactor">
            <summary>
            Gets or sets palette color intensity in regards to surface orientation in azimuthal space.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.PalettePolarFactor">
            <summary>
            Gets or sets palette color intensity in regards to surface orientation in polar space.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.MeshPaletteMode">
            <summary>
            Gets or sets the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.MeshPaletteMode"/>, which defines how to apply the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ColorMapTexture"/>
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ColorMapTexture">
            <summary>
            Gets or sets the ColorMapTexture generated when the <see cref="T:System.Drawing.Imaging.ColorPalette"/> property changes. Alternatively, this property may be set by the user if a custom texture is required. 
            Also see <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.MeshPaletteMode"/>, which defines how the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ColorMapTexture"/> is applied to the surface geometry
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ColorMapTextureSize">
            <summary>
            Gets or sets the Size of the texture to create when the <see cref="T:System.Drawing.Imaging.ColorPalette"/> property is set. If the user sets the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.ColorMapTexture"/> directly, this property is ignored
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.Highlight">
            <summary>
            Gets or sets value in range 0...1 that defines how much the surface is highlighted its in low lit parts.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.DrawBackSide">
            <summary>
            Gets or sets value determining if back side of chart should be drawn.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.GetSceneEntity">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D" /> that represent this RenderableSeries. This is the entity which will actually do the drawing in the 3D Viewport.
            NOTE: The specification requires that subsequent calls to <see cref="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.GetSceneEntity" /> should return the <b>same</b> instance.
            </summary>
            <returns>
            The <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D" /> instance which draws this RenderableSeries
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.OnPaletteProviderAttached(SciChart.Charting3D.RenderableSeries.IPaletteProvider3D,SciChart.Charting3D.RenderableSeries.IPaletteProvider3D)">
            <summary>
            Called when a new <see cref="T:SciChart.Charting3D.RenderableSeries.IPaletteProvider3D"/> instance is attached to a <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.OnColorPaletteChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D.MeshColorPalette"/> property changes
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntity">
            <summary>
            A SceneEntity added to the 3D Scene which draws a Surface Chart. See also the <see cref="T:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3"/>
            </summary>
        </member>
        <member name="E:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntity.EngineRestarted">
            <summary>
            Occurs when the D3DEngine has been restarted
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntity.#ctor(SciChart.Charting3D.RenderableSeries.FreeSurfaceRenderableSeries3D)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntity"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntity.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntity.RenderScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to render this element. This is where geometry must be drawn to the 3D scene
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntity.CreateMeshes(SciChart.Charting3D.Primitives.IRenderPassInfo3D,SciChart.Charting3D.Model.IPointSeries3D)">
            <summary>
            When overridden in a derived class, creates meshes from <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> and <see cref="T:SciChart.Charting3D.Model.IPointSeries3D" /> data
            </summary>
            <param name="e">The IRenderPassInfo3D.</param>
            <param name="pointSeries">The point series containing the data.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntity.UpdateScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to update the geometry in this element. This is where we need to cache geometry before draw.
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntity.OverrideOpacity">
            <summary>
            Overrides the opacity of the entity.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntity.UpdateMeshes(SciChart.Charting3D.Model.IPointSeries3D,System.Collections.Generic.List{System.Windows.Media.Media3D.Vector3D},System.Collections.Generic.List{SciChart.Charting3D.Model.IPointMetadata3D})">
            <summary>
            When overridden in a derived class, updates all 3D meshes from Data
            </summary>
            <param name="points">The <see cref="T:SciChart.Charting3D.Model.IPointSeries3D"/> containing the data.</param>
            <param name="dataValues">The data values.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntity.OnEngineRestart">
            <summary>
            Called when the D3DEngine Restarts. Meshes and DirectX related objects should be recreated
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntityHelper">
            <summary>
            A base class for a <see cref="T:SciChart.Charting3D.RenderableSeries.ISceneEntityHelper"/> which uses <see cref="T:SciChart.Charting3D.Model.FreeSurfaceDataSeries3D`3"/> data as input, and transforms
            into scene geometry 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntityHelper.PerformSelection(SciChart.Charting3D.Model.IDataSeries3D,System.Boolean,System.Collections.Generic.List{SciChart.Charting3D.Primitives.VertexId})">
            <summary>
            Performs selection, setting the <paramref name="isSelected"/> flag to true or false on the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> for the given list of <see cref="T:SciChart.Charting3D.Primitives.VertexId">Vertex Ids</see>
            </summary>
            <param name="dataSeries">The data series.</param>
            <param name="isSelected">if set to <c>true</c> [is selected].</param>
            <param name="vertexIds">The vertex ids.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntityHelper.GetXyzDataValue(SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.Model.IPointSeries3D)">
            <summary>
            Gets the hit data value from the <paramref name="lastPointSeries"/> based on the <paramref name="hitTestInfo"/> 
            </summary>
            <returns>
            null if the <paramref name="hitTestInfo"/> isn't valid
            Vector3D hit data value if <paramref name="hitTestInfo"/> is valid
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntityHelper.GetMetadata(SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.Model.IPointSeries3D)">
            <summary>
            Gets the Metadata value from the <paramref name="lastPointSeries"/> based on the <paramref name="hitTestInfo"/> 
            </summary>
            <param name="hitTestInfo">The hit test information.</param>
            <param name="lastPointSeries"></param>
            <returns>
            null if the <paramref name="hitTestInfo"/> isn't valid or if metadata not supported on this series type. 
            IPointMetadata3D hit data value if <paramref name="hitTestInfo"/> is valid
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntityHelper.ToPointSeries(SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D)">
            <summary>
            Converts a DataSeries to a <see cref="T:SciChart.Charting3D.Model.IFreeSurfacePointSeries3D" /> derived type, for use during the render pass
            </summary>
            <returns>
            The PointSeries, which may be used for drawing
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntityHelper.GetDataValues(SciChart.Charting3D.Model.IPointSeries3D,System.Collections.Generic.List{SciChart.Charting3D.Model.IPointMetadata3D}@)">
            <summary>
            Transforms data from an IPointSeries3D into a list of data-values (Vector3D) and PointMetadata3D. Used to create the mesh
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntityHelper.HitTest(System.Windows.Point,SciChart.Charting3D.Primitives.IBaseSceneEntity)">
            <summary>
            Performs a HitTest operation on the <paramref name="baseSceneEntity"/> of type <see cref="T:SciChart.Charting3D.Primitives.IBaseSceneEntity"/>, returning the <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D" /> containing the result
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.FreeSurfaceSceneEntityHelper.ToSeriesInfo(SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.RenderableSeries.IRenderableSeries3D,System.UInt32,System.Func{SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.Vector3},System.Func{SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3},System.Func{SciChart.Charting3D.RenderableSeries.HitTestInfo3D,SciChart.Charting3D.Model.IPointMetadata3D})">
            <summary>
            Converts the result of a Hit-Test operation (<see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D" />) to a <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D" /> class, which may be used as a
            ViewModel when outputting series values as bindings. <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D" /> is used by the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D" /> class
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.BrushColorPalette">
            <summary>
            The <see cref="T:SciChart.Charting3D.RenderableSeries.BrushColorPalette"/> provides a color palette converted from <see cref="T:System.Windows.Media.Brush"/>. 
            The palette is to be applied to a <see cref="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D"/> e.g. to give a height-map at runtime. 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.BrushColorPalette.BrushProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.BrushColorPalette.Brush"/> DependencyProperty
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BrushColorPalette.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.BrushColorPalette"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.BrushColorPalette.Brush">
            <summary>
            Gets or sets the brush to create color-palette from. 
            </summary>        
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BrushColorPalette.GetTexture(System.Windows.Size)">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.Texture2D" /> to apply to the <see cref="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D" />, given the size passed in.
            </summary>
            <param name="size">The size.</param>
            <returns>
            The <see cref="T:SciChart.Charting3D.Texture2D" /> instance to map to the surface
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BrushColorPalette.GetTexture(System.Windows.Size,System.Windows.Media.Brush)">
            <summary>
            Creates a <see cref="T:SciChart.Charting3D.Texture2D" /> based on the input <param name="size"/> and <param name="brush"/>.
            </summary>
            <returns>
            The <see cref="T:SciChart.Charting3D.Texture2D" /> instance to map to the surface
            </returns>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.DrawMeshAs">
            <summary>
            Enumeration constants which define how to draw a <see cref="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D"/>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.DrawMeshAs.SolidWireFrame">
            <summary>
            Draw the mesh as solid surface plus wireframe
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.DrawMeshAs.Wireframe">
            <summary>
            Draw the mesh as wireframe only
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.DrawMeshAs.SolidMesh">
            <summary>
            Draw the mesh as Solid only 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.DrawMeshAs.Contours">
            <summary>
            Draw the mesh as Contours only 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.DrawMeshAs.SolidWithContours">
            <summary>
            Draw the mesh as Solid plus contours 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.DrawMeshAs.SolidWireframeWithContours">
            <summary>
            Draw the mesh as solid surface plus wireframe plus contours
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.GradientColorPalette">
            <summary>
            <para>The <see cref="T:SciChart.Charting3D.RenderableSeries.BrushColorPalette"/> provides a color palette converted from <see cref="T:System.Windows.Media.GradientStop"/> collection.</para> 
            <para>The palette is to be applied to a <see cref="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D"/> e.g. to give a height-map at runtime. </para>
            <para>This allows you to switch between stepped and linear interpolated palettes by changing the <see cref="P:SciChart.Charting3D.RenderableSeries.GradientColorPalette.IsStepped"/> property</para>
            <para>Also, you can change Contour Stroke with the <see cref="P:SciChart.Charting3D.RenderableSeries.GradientColorPalette.ContourColor"/> and <see cref="P:SciChart.Charting3D.RenderableSeries.GradientColorPalette.ContourStrokeThickness"/> properties</para>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.GradientColorPalette.GradientStopsProperty">
            <summary>
            Defines the GradientStops DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.GradientColorPalette.IsSteppedProperty">
            <summary>
            Defines the IsStepped DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.GradientColorPalette.ContourColorProperty">
            <summary>
            Defines the ContourStroke DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.GradientColorPalette.ContourStrokeThicknessProperty">
            <summary>
            Defines the ContourStrokeThickness DependencyProperty
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.GradientColorPalette.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.GradientColorPalette"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.GradientColorPalette.GradientStops">
            <summary>
            Gets or sets the collection of gradient stops
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.GradientColorPalette.IsStepped">
            <summary>
            Gets or sets a value indicating whether the palette is stepped (true), or linear interpolated (false)
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.GradientColorPalette.ContourColor">
            <summary>
            Gets or sets the optional color of the contour / separator between gradient stops
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.GradientColorPalette.ContourStrokeThickness">
            <summary>
            Gets or sets the stroke thickness of the optional contour / separator between gradient stops
            </summary>        
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.GradientColorPalette.UpdateBrush">
            <summary>
            Updates the brush on property changed
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.MeshColorPalette">
            <summary>
            A MeshColorPalette is the base class for palettes for the <see cref="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D"/> type. 
            </summary>
        </member>
        <member name="E:SciChart.Charting3D.RenderableSeries.MeshColorPalette.ColorPaletteChanged">
            <summary>
            Occurs when the Color Palette changes and requires updating
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.MeshColorPalette.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.MeshColorPalette"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.MeshColorPalette.GetTexture(System.Windows.Size)">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.Texture2D"/> to apply to the <see cref="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D"/>, given the size passed in
            </summary>
            <param name="size">The size.</param>
            <returns>The <see cref="T:SciChart.Charting3D.Texture2D"/> instance to map to the surface</returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.MeshColorPalette.OnColorPaletteChanged">
            <summary>
            Raises the <see cref="E:SciChart.Charting3D.RenderableSeries.MeshColorPalette.ColorPaletteChanged"/> event
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.MeshPaletteMode">
            <summary>
            Enumerable constants which define the Mesh Palette mode. See the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MeshPaletteMode"/> property for more information
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.MeshPaletteMode.HeightMapInterpolated">
            <summary>
            Draw the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MeshColorPalette"/> as a Height-map with intepolation between cells
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.MeshPaletteMode.HeightMapSolidCells">
            <summary>
            Draw the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MeshColorPalette"/> as a Height-map with solid color stepping between cells
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.MeshPaletteMode.Textured">
            <summary>
            Draw the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MeshColorPalette"/> as a Texture (e.g. ignores height mapping) with interpolation between cells
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.MeshPaletteMode.TexturedSolidCells">
            <summary>
            Draw the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MeshColorPalette"/> as a Texture (e.g. ignores height mapping) with solid color stepping between cells
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.SolidColorBrushPalette">
            <summary>
            The <see cref="T:SciChart.Charting3D.RenderableSeries.SolidColorBrushPalette"/> provides a color palette converted from <see cref="T:System.Windows.Media.Color"/>. 
            The palette is to be applied to a <see cref="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D"/> e.g. to color the entire mesh a single color at runtime.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SolidColorBrushPalette.FillProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.SolidColorBrushPalette.Fill"/> DependencyProperty
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.SolidColorBrushPalette.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.SolidColorBrushPalette"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SolidColorBrushPalette.Fill">
            <summary>
            Gets or sets solid color Fill to apply to the entire mesh
            </summary>        
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.MountainRenderableSeries3D.StrokeThicknessProperty">
            <summary>
            Defines the StrokeThickness DependencyProperty.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.MountainRenderableSeries3D.FillProperty">
            <summary>
            Defines the Fill DependencyProperty.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.ClipMode">
            <summary>
            Defines an enumeration of possible clipping modes for data points in a <see cref="T:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D"/>.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ClipMode.AboveZero">
            <summary>
            All vertices that have Y values greater than zero will be clipped to zero.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ClipMode.BelowZero">
            <summary>
            All vertices that have Y values less than zero will be clipped to zero.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ClipMode.None">
            <summary>
            All vertices will appear as they are. This is the default mode.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D">
            <summary>
            Provides a series type for Waterfall chart rendering.
            </summary>
            <remarks>
            A RenderableSeries has a <see cref="T:SciChart.Charting3D.Model.DataSeries.Waterfall.WaterfallDataSeries3D`1"/> data-source.
            </remarks>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.StrokeThicknessProperty">
            <summary>
            Defines the StrokeThickness DependencyProperty.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.SliceThicknessProperty">
            <summary>
            Defines the SliceThickness DependencyProperty.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.SelectedColorMappingProperty">
            <summary>
            Defines the SelectedColorMapping DependencyProperty.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.SelectedStrokeProperty">
            <summary>
            Defines the SelectedStroke DependencyProperty.
            </summary>   
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.YColorMappingProperty">
            <summary>
            Defines the YColorMapping DependencyProperty.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.ZColorMappingProperty">
            <summary>
            Defines the ZColorMapping DependencyProperty.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.YStrokeColorMappingProperty">
            <summary>
            Defines the YStrokeColorMapping DependencyProperty.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.ZStrokeColorMappingProperty">
            <summary>
            Defines the YStrokeColorMapping DependencyProperty.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.ClipModeProperty">
            <summary>
            Defines the ClipMode DependencyProperty.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.ClipMode">
            <summary>
            Gets or sets how a Waterfall Chart renders its data.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.YColorMapping">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.RenderableSeries.BrushColorPalette"/> for filling slices of a waterfall chart.
            The slices will be painted along Y axis.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.ZColorMapping">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.RenderableSeries.BrushColorPalette"/> for filling slices of a waterfall chart.
            The slices will be painted along Z axis.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.YStrokeColorMapping">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.RenderableSeries.BrushColorPalette"/> for filling Y stroke of a waterfall chart.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.ZStrokeColorMapping">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.RenderableSeries.BrushColorPalette"/> for filling Z stroke of a waterfall chart.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.SelectedColorMapping">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.RenderableSeries.BrushColorPalette"/> for filling selected slices of a waterfall chart.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.SelectedStroke">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.RenderableSeries.BrushColorPalette"/> for paining outlines of selected slices of a waterfall chart.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness of waterfall chart slices.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.SliceThickness">
            <summary>
            Gets or sets the thickness of waterfall chart slices.
            Produces volumetric slices if set to a value > 0.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D.#ctor">
            <summary>
            Creates a <see cref="T:SciChart.Charting3D.RenderableSeries.WaterfallRenderableSeries3D"/> instance.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D">
            <summary>
            <para>Defines an entity for <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/> to draw the series in the 3D Scene.</para>
            <para>All types inheriting from <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/> have the abilty to be postioned and rendered using geometry and primitives defined in the 3D engine</para>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D._renderableSeries">
            <summary>
            The wrapped <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/> instance that we are drawing
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D._xCalc">
            <summary>
            The XAxis <see cref="T:SciChart.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/>, which converts pixel to world coordinates. 
            Valid for the current render pass only
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D._yCalc">
            <summary>
            The YAxis <see cref="T:SciChart.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/>, which converts pixel to world coordinates. 
            Valid for the current render pass only
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D._zCalc">
            <summary>
            The ZAxis <see cref="T:SciChart.Charting.Numerics.CoordinateCalculators.ICoordinateCalculator`1"/>, which converts pixel to world coordinates. 
            Valid for the current render pass only
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D.SceneEntityHelper">
            <summary>
            The strategy for dealing with 3D Geometry in the scene for different data schemas
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D.#ctor(SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D"/> class.
            </summary>
            <param name="renderableSeries">The renderable series.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D.GetVertexAt(SciChart.Charting3D.RenderableSeries.HitTestInfo3D)">
            <summary>
            Gets the X,Y,Z Vertex in world-coordinates nearest the Hit-test site specified by <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D"/>
            </summary>
            <param name="hitTestInfo">The hit test information.</param>
            <returns>The X,Y,Z Vertex in world-coordinates</returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D.GetVertexCoords(SciChart.Charting3D.Vector3)">
            <summary>
            Gets the X,Y,Z Vertex coordinate in world-coordinates nearest the Hit-test site specified by <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D"/>
            </summary>
            <param name="hitTestInfo">The hit test information.</param>
            <returns>The X,Y,Z Vertex in world-coordinates</returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D.PerformSelection(System.Boolean,System.Collections.Generic.List{SciChart.Charting3D.Primitives.VertexId})">
            <summary>
            Performs selection on this entity, setting the IsSelected flag to True or False on the specified <see cref="T:SciChart.Charting3D.Primitives.VertexId">Vertex Ids</see>
            </summary>
            <param name="isSelected">if set to <c>true</c> the vertices become .</param>
            <param name="vertexIds">The vertex ids.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D.UpdateScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to update the geometry in this element. This is where we need to cache geometry before draw.
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D.ChangeHelper(SciChart.Charting3D.RenderableSeries.ISceneEntityHelper)">
            <summary>
            Changes the Scene Entity Helper: a strategy for dealing with 3D Geometry in the scene for different data schemas
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D.CreateMeshes(SciChart.Charting3D.Primitives.IRenderPassInfo3D,SciChart.Charting3D.Model.IPointSeries3D)">
            <summary>
            When overridden in a derived class, creates meshes from <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D"/> and <see cref="T:SciChart.Charting3D.Model.IPointSeries3D"/> data
            </summary>
            <param name="e">The IRenderPassInfo3D.</param>
            <param name="pointSeries">The point series containing the data.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D.HitTest(System.Windows.Point)">
            <summary>
            Performs a HitTest operation on the <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D" />, 
            returning the <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D" /> containing the result
            </summary>
            <param name="screenPoint">The screen point (X,Y Pixel coordinates in 2D screen space).</param>
            <returns> The <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D" /> containing the result  </returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D.ToSeriesInfo(SciChart.Charting3D.RenderableSeries.HitTestInfo3D)">
            <summary>
            Converts a <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D"/> struct, containing information about a Hit-Test operation, into a <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D"/>, which is a viewmodel for tooltips, legends in the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> libary
            </summary>
            <param name="hitTestInfo">The hit test information.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D.OverrideOpacity">
            <summary>
            Overrides the opacity of the entity. 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D.UpdateMeshes(SciChart.Charting3D.Model.IPointSeries3D,System.Collections.Generic.List{System.Windows.Media.Media3D.Vector3D},System.Collections.Generic.List{SciChart.Charting3D.Model.IPointMetadata3D})">
            <summary>
            When overridden in a derived class, updates all 3D meshes from Data
            </summary>
            <param name="points">The <see cref="T:SciChart.Charting3D.Model.IPointSeries3D"/> containing the data.</param>
            <param name="dataValues">The data values.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D.GetTexture(System.Windows.Media.Brush,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:SciChart.Charting3D.Texture2D"/> with the given dimentions and fills it using the <paramref name="brush"/>.
            </summary>
            <param name="brush">A Brush to fill a texture with.</param>
            <param name="width">The desired width of a texture.</param>
            <param name="height">The desired height of a texture.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D.GetBitmap(System.Windows.Media.Brush,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> with the given dimentions and fills it using the <paramref name="brush"/>.
            </summary>
            <param name="brush">A Brush to fill a texture with.</param>
            <param name="width">The desired width of a texture.</param>
            <param name="height">The desired height of a texture.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D.UpdatePointMarkerColor(SciChart.Charting3D.Primitives.IPointsMesh,System.Int32,System.Windows.Media.Color@,SciChart.Charting3D.RenderableSeries.IPointMarkerPaletteProvider3D,SciChart.Charting3D.Model.IPointMetadata3D)">
            <summary>
            Called by a SceneEntity to update <paramref name="pointsMesh"/> if a <see cref="T:SciChart.Charting3D.RenderableSeries.IPaletteProvider3D"/> is used.
            </summary>
            <param name="pointsMesh">The <see cref="T:SciChart.Charting3D.Primitives.IPointsMesh"/> to update.</param>
            <param name="index">The index of the corresponding data point in a DataSeries.</param>
            <param name="lastColor"></param>
            <param name="paletteProvider"></param>
            <param name="pointMetadata3D"></param>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D">
            <summary>
            Provides information on a series hit test operation, see <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/> HitTest method for more information.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.HitTestInfo3D.Empty">
            <summary>
            Gets special value which represents a <see cref="T:SciChart.Charting.Visuals.RenderableSeries.HitTestInfo"/> instance without data
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.HitTestInfo3D.IsHit">
            <summary>
            Gets or sets whether the HitTest operation was a hit or not
            </summary>
            <remarks>Defined as the input point being within a small distance of the output hittest point</remarks>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.HitTestInfo3D.VertexId">
            <summary>
            Gets or sets the VertexID for the vertex which has been hit (ignore if <see cref="P:SciChart.Charting3D.RenderableSeries.HitTestInfo3D.IsHit"/> is false)
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.HitTestInfo3D.EntityId">
            <summary>
            Gets or sets the EntityId for the <see cref="T:SciChart.Charting3D.Primitives.BaseSceneEntity"/> which has been hit (ignore if <see cref="P:SciChart.Charting3D.RenderableSeries.HitTestInfo3D.IsHit"/> is false)
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.HitTestInfo3D.IjIndices">
            <summary>
            Gets or sets the I,J Indices for the 2d entity which has been hit (ignore if <see cref="P:SciChart.Charting3D.RenderableSeries.HitTestInfo3D.IsHit"/> is false)
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.HitTestInfo3D.IsEmpty">
            <summary>
            Returns the value, indicating whether current instance of <see cref="T:SciChart.Charting.Visuals.RenderableSeries.HitTestInfo"/> is empty
            </summary>
            <returns></returns>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.IPaletteProvider3D">
            <summary>
            A placeholder interface for paletteproviders in SciChart3D, which allow colouring of 
            <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/> vertices or geometry depending on data values
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.IPaletteProvider3D.OnAttach(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D)">
            <summary>
            Called when the <see cref="T:SciChart.Charting3D.RenderableSeries.IPaletteProvider3D"/> instance is attached to a <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/>
            </summary>
            <param name="renderSeries">The render series.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.IPaletteProvider3D.OnDetached">
            <summary>
            Called when the <see cref="T:SciChart.Charting3D.RenderableSeries.IPaletteProvider3D"/> instance is detached from a <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ISurfaceMeshPaletteProvider3D.OverrideCellColor(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D,System.Int32,System.Int32)">
            <summary>
            Overrides the color of the outline on the attached <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D" />.
            Return null to keep the default series color.
            Return a value to override the series color.
            </summary>
            <param name="series">The source <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D" />.</param>
            <param name="xIndex">The x index</param>
            <param name="zIndex">The z index</param>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.IStrokePaletteProvider3D">
            <summary>
            Defines the interface to a PaletteProvider. By implementing this interface, you can override the stroke color on a <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>
            by setting or binding to the <see cref="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.PaletteProvider"/> property. 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.IStrokePaletteProvider3D.OverrideStrokeColor(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D,System.Int32,SciChart.Charting3D.Model.IPointMetadata3D)">
            <summary>
            Overrides the color of the outline on the attached <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D" />.
            Return null to keep the default series color.
            Return a value to override the series color.
            </summary>
            <param name="series">The source <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D" />.</param>
            <param name="index">The index of the point.</param>
            <param name="metadata">The metadata of the point.</param>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.IFillPaletteProvider3D">
            <summary>
            Defines the interface to a PaletteProvider. By implementing this interface, you can override the stroke color on a <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>
            by setting or binding to the <see cref="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.PaletteProvider"/> property. 
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.IFillPaletteProvider3D.OverrideFillColor(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D,System.Int32,SciChart.Charting3D.Model.IPointMetadata3D)">
            <summary>
            Overrides the fill brush of the attached <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D" />.
            Return null to keep the default series fill.
            Return a value to override the series fill.
            </summary>
            <param name="series">The source <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D" />.</param>
            <param name="index">The index of the point.</param>
            <param name="metadata">The metadata of the point.</param>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.IPointMarkerPaletteProvider3D">
            <summary>
            Defines the interface to a PaletteProvider. By implementing this interface, you can override the Fill color of <see cref="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.PointMarker"/>
            by setting or binding to the <see cref="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.PaletteProvider"/> property.
            </summary> 
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.IPointMarkerPaletteProvider3D.OverridePointMarker(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D,System.Int32,SciChart.Charting3D.Model.IPointMetadata3D)">
            <summary>
            Overrides the color of the PointMarkers on the attached <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D" />.
            Return <value>Null</value> to keep the default <see cref="P:SciChart.Charting3D.PointMarkers.BasePointMarker3D.Fill"/>.
            </summary>
            <param name="series">The source <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D" />.</param>
            <param name="index">The index of the point.</param>
            <param name="metadata">The metadata of the point.</param>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.Points3DSceneEntity">
            <summary>
            A SceneEntity added to the 3D Scene which draws a Scatter or Point Cloud from <see cref="T:SciChart.Charting3D.Model.IXyzPointSeries3D"/> data. See also the <see cref="T:SciChart.Charting3D.RenderableSeries.ScatterRenderableSeries3D"/>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.Points3DSceneEntity.#ctor(SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.Points3DSceneEntity"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.Points3DSceneEntity.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.Points3DSceneEntity.RenderScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to render this element. This is where geometry must be drawn to the 3D scene
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.Points3DSceneEntity.OverrideOpacity">
            <summary>
            Overrides the opacity.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.Points3DSceneEntity.UpdateMeshesFast(SciChart.Charting3D.Model.IXyzPointSeries3D)">
            <summary>
            When overridden in a derived class, updates all 3D meshes from Data
            </summary>
            <param name="points">The <see cref="T:SciChart.Charting3D.Model.IPointSeries3D"/> containing the data.</param>
            <param name="dataValues">The data values.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.Points3DSceneEntity.UpdateScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to update the geometry in this element. This is where we need to cache geometry before draw.
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.ScatterRenderableSeries3D">
            <summary>
            Provides 3D Scatter series rendering 
            </summary>
            <remarks>
            A RenderableSeries has a <see cref="T:SciChart.Charting3D.Model.IXyzPointSeries3D"/> data-source.
            </remarks>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ScatterRenderableSeries3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.ScatterRenderableSeries3D"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ScatterRenderableSeries3D.GetSceneEntity">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D" /> that represent this RenderableSeries. This is the entity which will actually do the drawing in the 3D Viewport.
            NOTE: The specification requires that subsequent calls to <see cref="M:SciChart.Charting3D.RenderableSeries.ScatterRenderableSeries3D.GetSceneEntity" /> should return the <b>same</b> instance.
            </summary>
            <returns>
            The <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D" /> instance which draws this RenderableSeries
            </returns>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.MeshResolution">
            <summary>
            Enumeration constants for oversampling the mesh
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.MeshResolution.x1">
            <summary>
            1:1 mesh resolution
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.MeshResolution.x2">
            <summary>
            2:1 oversampling e.g. 2 mesh vertices for every cell
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.MeshResolution.x4">
            <summary>
            4:1 oversampling e.g. 4 mesh vertices for every cell
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D">
            <summary>
            Provides SurfaceMesh series rendering 
            </summary>
            <remarks>
            A RenderableSeries has a <see cref="T:SciChart.Charting3D.Model.IGridPointSeries3D"/> data-source.
            </remarks>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.DrawMeshAsProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.DrawMeshAs"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.StrokeThicknessProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.StrokeThickness"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.DrawSkirtProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.DrawSkirt"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MeshColorPaletteProperty">
            <summary>
            Defines the <see cref="T:System.Drawing.Imaging.ColorPalette"/> DependencyProperty. Setting this property will overwrite the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ColorMapTexture"/> property
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MinimumProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.Minimum"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MaximumProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.Maximum"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MeshPaletteModeProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MeshPaletteMode"/> DependencyProperty, which defines how the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ColorMapTexture"/> is applied to the surface mesh geometry
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ColorMapTextureProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ColorMapTexture"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ColorMapTextureSizeProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ColorMapTextureSize"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.HeightScaleFactorProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.HeightScaleFactor"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MeshResolutionProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MeshResolution"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.YOffsetProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.YOffset"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.CellHardnessFactorProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.CellHardnessFactor"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.LightingFactorProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.LightingFactor"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ContourStrokeThicknessProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ContourStrokeThickness"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ContourIntervalProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ContourInterval"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ContourOffsetProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ContourOffset"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ContourStrokeProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ContourStroke"/> DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.HighlightProperty">
            <summary>
            Defines the Highlight DependencyProperty
            </summary>   
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ShininessProperty">
            <summary>
            Defines the Shininess DependencyProperty
            </summary>   
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.HeightScaleFactor">
            <summary>
            Gets or sets the height scale factor. Default is 1.0f. Value of 0.0f will render a flat Uniform Surface Mesh. Value of 1.0f will use the scaling of the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> YAxis
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ContourStroke">
            <summary>
            Gets or sets the contour <see cref="T:System.Windows.Media.Color"/>.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ContourOffset">
            <summary>
            Gets or sets the contour offset.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ContourInterval">
            <summary>
            Gets or sets the contour interval.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ContourStrokeThickness">
            <summary>
            Gets or sets contour thickness.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.YOffset">
            <summary>
            Gets or sets a Y-Offset in World Coordinates. This offset will change the base position of the <see cref="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D"/> on the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> YAxis
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.CellHardnessFactor">
            <summary>
            Gets or sets a factor from 0.0f - 1.0f which defines how hard a Cell looks. e.g. 0.0f = smooth and 1.0f = hard faces
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.LightingFactor">
            <summary>
            Gets or sets a factor from 0.0f - 1.0f which defines how much ligthing is used on cells, 0.0f = no lighting and 1.0f = fully lit
            a default value of 0.8 is used
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MeshResolution">
            <summary>
            Gets or sets the mesh resolution. By default for each point in the <see cref="T:SciChart.Charting3D.Model.UniformGridDataSeries3D`3"/>, there will be one vertex in the resulting mesh. To increase the resolution, use <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MeshResolution"/> x2 or <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MeshResolution"/> x4
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness to apply to the wireframe. Used when <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.DrawMeshAs"/> is WireFrame or SolidWireFrame
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.DrawMeshAs">
            <summary>
            Gets or sets how to draw the mesh
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.DrawSkirt">
            <summary>
            Gets or sets whether to draw the skirt (geometry from the edges of the surface mesh to the zero line in Y)
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MeshColorPalette">
            <summary>
            Gets or sets the MeshColorPalette which is used to calculate color from data value
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.Minimum">
            <summary>
            Gets or sets value which corresponds to min color
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.Maximum">
            <summary>
            Gets or sets value which corresponds to max color
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MeshPaletteMode">
            <summary>
            Gets or sets the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MeshPaletteMode"/>, which defines how to apply the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ColorMapTexture"/>
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ColorMapTexture">
            <summary>
            Gets or sets the ColorMapTexture generated when the <see cref="T:System.Drawing.Imaging.ColorPalette"/> property changes. Alternatively, this property may be set by the user if a custom texture is required. 
            Also see <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MeshPaletteMode"/>, which defines how the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ColorMapTexture"/> is applied to the surface mesh geometry
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ColorMapTextureSize">
            <summary>
            Gets or sets the Size of the texture to create when the <see cref="T:System.Drawing.Imaging.ColorPalette"/> property is set. If the user sets the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.ColorMapTexture"/> directly, this property is ignored
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.Highlight">
            <summary>
            Gets or sets value in range [0..1] that defines how much the surface mesh is highlighted at its low lit parts.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.Shininess">
            <summary>
            Gets or sets value in range [0..1] that defines an amount of the specular highlight.
            For more information see: https://en.wikipedia.org/wiki/Specular_highlight
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.GetSceneEntity">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D" /> that represent this RenderableSeries. This is the entity which will actually do the drawing in the 3D Viewport.
            NOTE: The specification requires that subsequent calls to <see cref="M:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.GetSceneEntity" /> should return the <b>same</b> instance.
            </summary>
            <returns>
            The <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D" /> instance which draws this RenderableSeries
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.OnPaletteProviderAttached(SciChart.Charting3D.RenderableSeries.IPaletteProvider3D,SciChart.Charting3D.RenderableSeries.IPaletteProvider3D)">
            <summary>
            Called when a new <see cref="T:SciChart.Charting3D.RenderableSeries.IPaletteProvider3D"/> instance is attached to a <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.OnColorPaletteChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D.MeshColorPalette"/> property changes
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshSceneEntity">
            <summary>
            A SceneEntity added to the 3D Scene which draws a Surface Mesh Chart. See also the <see cref="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D"/>
            </summary>
        </member>
        <member name="E:SciChart.Charting3D.RenderableSeries.SurfaceMeshSceneEntity.EngineRestarted">
            <summary>
            Occurs when the D3DEngine has been restarted
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.SurfaceMeshSceneEntity.#ctor(SciChart.Charting3D.RenderableSeries.SurfaceMeshRenderableSeries3D)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.SurfaceMeshSceneEntity"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.SurfaceMeshSceneEntity.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.SurfaceMeshSceneEntity.RenderScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to render this element. This is where geometry must be drawn to the 3D scene
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.SurfaceMeshSceneEntity.CreateMeshes(SciChart.Charting3D.Primitives.IRenderPassInfo3D,SciChart.Charting3D.Model.IPointSeries3D)">
            <summary>
            When overridden in a derived class, creates meshes from <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> and <see cref="T:SciChart.Charting3D.Model.IPointSeries3D" /> data
            </summary>
            <param name="e">The IRenderPassInfo3D.</param>
            <param name="pointSeries">The point series containing the data.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.SurfaceMeshSceneEntity.UpdateScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to update the geometry in this element. This is where we need to cache geometry before draw.
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.SurfaceMeshSceneEntity.OverrideOpacity">
            <summary>
            Overrides the opacity of the entity.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.SurfaceMeshSceneEntity.UpdateMeshes(SciChart.Charting3D.Model.IPointSeries3D,System.Collections.Generic.List{System.Windows.Media.Media3D.Vector3D},System.Collections.Generic.List{SciChart.Charting3D.Model.IPointMetadata3D})">
            <summary>
            When overridden in a derived class, updates all 3D meshes from Data
            </summary>
            <param name="points">The <see cref="T:SciChart.Charting3D.Model.IPointSeries3D"/> containing the data.</param>
            <param name="dataValues">The data values.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.SurfaceMeshSceneEntity.OnEngineRestart">
            <summary>
            Called when the D3DEngine Restarts. Meshes and DirectX related objects should be recreated
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D">
            <summary>
            Defines the Base class for all BaseRenderableSeries3D within SciChart3D. 
            </summary>
            <remarks>
            A RenderableSeries has a <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> data-source, 
            and provides configuration properties to draw a series or surface type onto a specific <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>.
            A given <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> may have 0..N <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>, each of which may map to, or share a <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/>
            </remarks>
            <seealso cref="T:SciChart.Charting3D.Model.IDataSeries3D"/>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.DataSeriesProperty">
            <summary>
            Defines the DataSeries DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.IsSelectedProperty">
            <summary>
            Defines the IsSelected DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.StrokeProperty">
            <summary>
            Defines the Stroke DependencyProperty
            </summary>   
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.PaletteProviderProperty">
            <summary>
            Defines the PaletteProvider DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.IsVisibleProperty">
            <summary>
            Defines the IsVisible DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.LegendMarkerTemplateProperty">
            <summary>
            Defines the LegendMarkerTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.PointMarkerTemplateProperty">
            <summary>
            Defines the PointMarkerTemplate DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.PointMarkerProperty">
            <summary>
            Defines the PointMarker DependencyProperty
            </summary>
        </member>
        <member name="E:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.IsVisibleChanged">
            <summary>
            Event raised whenever IsVisible property changed
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.#cctor">
            <summary>
            Initializes the <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.DataSeries">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> associated with this <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.HasChanges">
            <summary>
            Gets or whether this instance has changes. When true, caches will be invalidated and the entire series drawn afresh. When false, where possible vertices will be cached
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.IsVisible">
            <summary>
            Gets or sets whether the series is visible when drawn
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.Services">
            <summary>
            Gets the <see cref="T:SciChart.Core.Utility.ServiceContainer" /> which provides access to services throughout SciChart. ServiceContainers are created one per 
            <see cref="T:SciChart.Charting3D.SciChart3DSurface" /> instance, and shared between peripheral components such as <see cref="T:SciChart.Charting3D.Axis.AxisBase3D" />, <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D" />, <see cref="T:SciChart.Charting3D.Modifiers.IChartModifier3D" /> instances.
            For a full list of available services, see the remarks on <see cref="T:SciChart.Core.Utility.ServiceContainer" />
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.IsSelected">
            <summary>
            Gets or sets the IsSelectedProperty.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.Stroke">
            <summary>
            Gets or sets the Stroke
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.PaletteProvider">
            <summary>
            Gets or sets an optional <see cref="T:SciChart.Charting3D.RenderableSeries.IPaletteProvider3D"/> instance, which may be used to colour vertices or points on the <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>. 
            For more information, please see the derived types of <see cref="T:SciChart.Charting3D.RenderableSeries.IPaletteProvider3D"/>, which are specific per renderable series type
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.LegendMarkerTemplate">
            <summary>
            Gets or sets the DataTemplate, which defines how the <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/> is rendered on the <see cref="T:SciChart.Charting.Visuals.SciChartLegend"/> as a series marker.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.PointMarkerTemplate">
            <summary>
            <para>Gets or sets the point marker template. </para>
            <para>NOTE: This is for instantiating <see cref="T:SciChart.Charting3D.PointMarkers.BasePointMarker3D"/> types in a template fashion only. It does not respond to WPF ControlTemplates</para>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.PointMarker">
            <summary>
            Gets or sets the point marker which may be rendered at points on the 3D series.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.OnVisibilityChanged">
            <summary>
            Called when the Visibility Changes
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.OnDependencyPropertyChanged(System.Boolean)">
            <summary>
            Causes the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> to invalidate, setting the HasChanges flag
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.InvalidateWithHasChanges(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Causes the <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/> to invalidate (redraw) with the <see cref="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.HasChanges"/> flag set, which triggers a slower update and regeneration of geometry
            </summary>        
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.InvalidateWithoutHasChanges(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Causes the <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/> to invalidate (redraw) without the <see cref="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.HasChanges"/> flag set, which triggers a faster update without regeneration of geometry
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.OnDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the DataContext property changes
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.GetParentSurface">
            <summary>
            Gets the parent <see cref="T:SciChart.Charting3D.ISciChart3DSurface"/> for this <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.OnBeforeDraw">
            <summary>
            Called immediately before draw, to setup any constants or data for rendering
            </summary>                
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.InvalidateParent">
            <summary>
            Passes a message up to the parent that a property has changed and the scene needs invalidating (redrawing)
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.GetXRange">
            <summary>
            Returns the data range of the <see cref="T:SciChart.Charting.Visuals.RenderableSeries.IRenderableSeriesBase" /> by querying the associated DataSeries.
            Individual RenderableSeries implementations may override this method to provide custom ranging on a per-series basis
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.GetSceneEntity">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D" /> that represent this RenderableSeries. This is the entity which will actually do the drawing in the 3D Viewport.
            NOTE: The specification requires that subsequent calls to <see cref="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.GetSceneEntity" /> should return the <b>same</b> instance.
            </summary>
            <returns>
            The <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D" /> instance which draws this RenderableSeries
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.HitTest(System.Windows.Point)">
            <summary>
            Performs a HitTest operation on the series, returning the <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D" /> containing the result
            </summary>
            <param name="screenPoint">The screen point (X,Y Pixel coordinates in 2D screen space).</param>
            <returns>
            The <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D" /> containing the result
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.ToSeriesInfo(SciChart.Charting3D.RenderableSeries.HitTestInfo3D)">
            <summary>
            Converts the result of a Hit-Test operation (<see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D" />) to a <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D" /> class, which may be used as a
            ViewModel when outputting series values as bindings. <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D" /> is used by the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D" /> class
            </summary>
            TODO should not be virtual
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.OnPaletteProviderAttached(SciChart.Charting3D.RenderableSeries.IPaletteProvider3D,SciChart.Charting3D.RenderableSeries.IPaletteProvider3D)">
            <summary>
            Called when a new <see cref="T:SciChart.Charting3D.RenderableSeries.IPaletteProvider3D"/> instance is attached to a <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.AssertPaletteProviderType``1(SciChart.Charting3D.RenderableSeries.IPaletteProvider3D)">
            <summary>
            Asserts the type of the palette provider <paramref name="p"/> is TPaletteProvider. Throw an exception if not
            </summary>
            <typeparam name="TPaletteProvider">The type of the palette provider.</typeparam>
            <param name="p">The p.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.AssertDataSeriesType">
            <summary>
            Asserts whether the <see cref="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.DataSeries"/> is of type <see cref="T:SciChart.Charting3D.Model.IXyzDataSeries3D"/>.
            Throw an exception if not, or if DataSeries is null.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.AssertDataSeriesType``1">
            <summary>
            Asserts whether the <see cref="P:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.DataSeries"/> is of type T. Throw an exception if not, or if DataSeries is null
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D.AttachDataSeries(SciChart.Charting3D.Model.IDataSeries3D)">
            <summary>
            Attaches listeners for DataSeries.DataSeriesChanged
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.ColorMapPoint">
            <summary>
            Specifies a point in a <see cref="T:SciChart.Charting3D.RenderableSeries.LinearColorMap"/>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ColorMapPoint.Color">
            <summary>
            The color
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ColorMapPoint.Offset">
            <summary>
            The offset
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ColorMapPoint.ScaleFactor">
            <summary>
            The scale factor
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.ColorMapMode">
            <summary>
            Specifies a Color Map mode
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ColorMapMode.Interpolated">
            <summary>
            Gradient stops are interpolated
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.ColorMapMode.Stepped">
            <summary>
            Gradient stops are Stepped
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.LinearColorMap">
            <summary>
            Specifies a Linear Gradient color map
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.LinearColorMap.Mode">
            <summary>
            Gets or sets the ColorMapMode
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.LinearColorMap.GradientStops">
            <summary>
            The gradient stops
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.LinearColorMap.Minimum">
            <summary>
            The minimum
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.LinearColorMap.Maximum">
            <summary>
            The maximum
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.RenderableSeries.LinearColorMap.ScaleFactor">
            <summary>
            The scale factor
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.LinearColorMap.InitializeConstants">
            <summary>
            Initializes the constants.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.ColorUtil">
            <summary>
            ColorUtil converts to and from <see cref="T:System.Windows.Media.Color"/> structs and <see cref="T:System.UInt32"/> for use in the 3D renderer
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ColorUtil.ToUInt(System.Windows.Media.Color)">
            <summary>
            Converts a <see cref="T:System.Windows.Media.Color"/> struct to <see cref="T:System.UInt32"/>
            </summary>
            <param name="color">The color.</param>
            <returns>The UInt32 equivalent</returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ColorUtil.FromUInt(System.UInt32)">
            <summary>
            Converts a <see cref="T:System.UInt32"/> to <see cref="T:System.Windows.Media.Color"/>
            </summary>
            <param name="color">The color as UInt32.</param>
            <returns>The Color equivalent</returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ColorUtil.FromRgb(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a <see cref="T:System.UInt32" /> Color from R G B values
            </summary>
            <param name="red">The red value (0-255).</param>
            <param name="green">The green value (0-255).</param>
            <param name="blue">The blue value (0-255).</param>
            <returns>
            The UInt32 equivalent
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ColorUtil.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a <see cref="T:System.UInt32" /> Color from A R G B values
            </summary>
            <param name="alpha">The alpha value (0-255).</param>
            <param name="red">The red value (0-255).</param>
            <param name="green">The green value (0-255).</param>
            <param name="blue">The blue value (0-255).</param>
            <returns>
            The UInt32 equivalent
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ColorUtil.Lerp(System.Windows.Media.Color,System.Windows.Media.Color,System.Single)">
            <summary>
            Linearly interpolates between two colors based on the ratio passed in. E.g. Ratio = 0.0f returns From color, ratio = 1.0f returns To Color. Ratio = 0.5f returns a mix of the two
            </summary>
            <param name="from">The From color</param>
            <param name="to">The Two color</param>
            <param name="ratio">The ratio of the two colors to mix</param>
            <returns>A new color formed by (ratio * from) + ((1.0-ratio) * to)</returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ColorUtil.Lerp(System.UInt32,System.UInt32,System.Single)">
            <summary>
            Linearly interpolates between two colors based on the ratio passed in. E.g. Ratio = 0.0f returns From color, ratio = 1.0f returns To Color. Ratio = 0.5f returns a mix of the two
            </summary>
            <param name="from">The From color</param>
            <param name="to">The Two color</param>
            <param name="ratio">The ratio of the two colors to mix</param>
            <returns>A new color formed by (ratio * from) + ((1.0-ratio) * to)</returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.ColorUtil.Lerp(SciChart.Charting3D.RenderableSeries.LinearColorMap,System.Double)">
            <summary>
            Linearly interpolates a data-value in a <see cref="T:SciChart.Charting3D.RenderableSeries.LinearColorMap"/>, which specifies Gradient Stops, Data Minimum and Maximum and color stepping mode
            </summary>        
            <paramref name="colorMap">The LinearColorMap</paramref>
            <paramref name="dataValue">The data-value</paramref>
            <returns>A linear intepolated color</returns>
        </member>
        <member name="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D">
            <summary>
            Defines the interface to a <see cref="T:SciChart.Charting.Visuals.RenderableSeries.BaseRenderableSeries"/>, which is visual element of the RenderSeries - DataSeries pair in the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
            <seealso cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            <seealso cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D.HasChanges">
            <summary>
            Gets or sets whether this instance has changes. When true, caches will be invalidated and the entire series drawn afresh. When false, where possible vertices will be cached
            </summary>        
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D.DataSeries">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> that acts as a datasource for this <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D.Visibility">
            <summary>
            Gets or sets whether the series is visible when drawn
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D.Stroke">
            <summary>
            Gets or sets the Stroke. 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D.IsSelected">
            <summary>
            Gets or sets value, indicates whether this <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/> is selected
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D.GetSceneEntity">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D"/> that represent this RenderableSeries. This is the entity which will actually do the drawing in the 3D Viewport. 
            NOTE: The specification requires that subsequent calls to <see cref="M:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D.GetSceneEntity"/> should return the <b>same</b> instance.
            </summary>
            <returns>The <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeriesSceneEntity3D"/> instance which draws this RenderableSeries</returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D.HitTest(System.Windows.Point)">
            <summary>
            Performs a HitTest operation on the series, returning the <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D"/> containing the result 
            </summary>
            <param name="screenPoint">The screen point (X,Y Pixel coordinates in 2D screen space).</param>
            <returns>The <see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D"/> containing the result </returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D.ToSeriesInfo(SciChart.Charting3D.RenderableSeries.HitTestInfo3D)">
            <summary>
            Converts the result of a Hit-Test operation (<see cref="T:SciChart.Charting3D.RenderableSeries.HitTestInfo3D"/>) to a <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D"/> class, which may be used as a
            ViewModel when outputting series values as bindings. <see cref="T:SciChart.Charting3D.Model.ChartData.SeriesInfo3D"/> is used by the <see cref="T:SciChart.Charting3D.Modifiers.Tooltip3D.TooltipModifier3D"/> class
            </summary>
            <param name="hitTestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D.ShowsTooltipForModifier(System.Func{SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D,System.Boolean})">
            <summary>
            Returns the value indicating whether show tooltip for modifier or not
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.TextureFormat">
            <summary>
            Enumeration constants to define the DirectX Texture format passed between WPF and the 3D Engine
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_NONE">
            <summary>The textureformat is None</summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_R8G8B8">
            <summary>The textureformat is R8G8B8</summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_A8R8G8B8">
            <summary>The textureformat is 32-bit ARGB</summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_A8B8G8R8">
            <summary>The textureformat is 32-bit ABGR</summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_A32B32G32R32F">
            <summary>The textureformat is 128-bit float ABGR</summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_A16B16G16R16F">
            <summary>The textureformat is 64-bit float ABGR</summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_R32G32F">
            <summary>The textureformat is float RG</summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_R16G16F">
            <summary>The textureformat is half-float RG</summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_R32F">
            <summary>The textureformat is float R</summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_R16F">
            <summary>The textureformat is half-float R</summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_A8">
            <summary>The textureformat is 8-bit Alpha</summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_DXT1">
            <summary>The textureformat is DXT1</summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_DXT5">
            <summary>The textureformat is DXT5</summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_ETC1">
            <summary>The textureformat is NoneETC1</summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_PVRTC_RGB_4BPP">
            <summary>The textureformat is PVRTC_RGB</summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_PVRTC_RGBA_4BPP">
            <summary>The textureformat is PVRTC_RGBA</summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_PVRTC_RGB_2BPP">
            <summary>The textureformat is PVRTC_RGB</summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_PVRTC_RGBA_2BPP">
            <summary>The textureformat is PVRTC_RGBA</summary>
        </member>
        <member name="F:SciChart.Charting3D.TextureFormat.TEXTUREFORMAT_END">
            <summary>The textureformat is Unknown</summary>
        </member>
        <member name="T:SciChart.Charting3D.Texture2D">
            <summary>
            The Texture2D represents a Texture in the 3D engine stored in GPU memory
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Texture2D.#cctor">
            <summary>
            Initializes the <see cref="T:SciChart.Charting3D.Texture2D"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Texture2D.#ctor(System.Int32,System.Int32,SciChart.Charting3D.TextureFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Texture2D"/> class.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="textureFormat">The texture format.</param>
            <exception cref="T:System.InvalidOperationException">Texture2D Width and Height must be greater than 1</exception>
        </member>
        <member name="M:SciChart.Charting3D.Texture2D.#ctor(SciChart.Charting3D.Interop.TSRTexture,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Texture2D"/> class.
            </summary>
            <param name="tsrTexture">The wrapped <see cref="T:SciChart.Charting3D.Interop.TSRTexture"/>.</param>
            <param name="noDispose">if set to <c>true</c> does not dispose the wrapped .</param>
        </member>
        <member name="M:SciChart.Charting3D.Texture2D.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:SciChart.Charting3D.Texture2D"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Texture2D.TextureFormat">
            <summary>
            Gets the <see cref="P:SciChart.Charting3D.Texture2D.TextureFormat"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Texture2D.Width">
            <summary>
            Gets the width of the texture
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Texture2D.Height">
            <summary>
            Gets the height of the texture
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Texture2D.WritePixels(System.Single[])">
            <summary>
            Writes float[] data into the texture. The <see cref="P:SciChart.Charting3D.Texture2D.TextureFormat"/> must be a floating point format
            </summary>
            <param name="pixelData">The pixel data.</param>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="M:SciChart.Charting3D.Texture2D.WritePixels(System.UInt32[])">
            <summary>
            Writes uint[] rgba into the texture. The <see cref="P:SciChart.Charting3D.Texture2D.TextureFormat"/> must be a 8-bit format
            </summary>
            <param name="rgbaData">The pixel data.</param>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="M:SciChart.Charting3D.Texture2D.FromWriteableBitmap(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Creates a <see cref="T:SciChart.Charting3D.Texture2D"/> from WPF <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/>
            </summary>
            <param name="wbmp">The WriteableBitmap.</param>
            <returns>The <see cref="T:SciChart.Charting3D.Texture2D"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">WriteableBitmap is null</exception>
        </member>
        <member name="M:SciChart.Charting3D.Texture2D.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:SciChart.Charting3D.Texture2D"/> from byte array
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <returns>The <see cref="T:SciChart.Charting3D.Texture2D"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">byte[] array is null</exception>
        </member>
        <member name="M:SciChart.Charting3D.Texture2D.FromArgb(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:SciChart.Charting3D.Texture2D"/> from ARGB format uint array
            </summary>
            <param name="argb">The ARGB data.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <returns>The <see cref="T:SciChart.Charting3D.Texture2D"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">argb[] array is null</exception>
        </member>
        <member name="M:SciChart.Charting3D.Texture2D.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SciChart.Charting3D.Texture2D.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChartDirectXVersion.D3D9">
            <summary>
            Forces DirectX9 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChartDirectXVersion.D3D1011">
            <summary>
            Forces DirectX10/11. WARNING! May cause crashes on computers without DirectX10 or 11 GPU Capabilities 
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.SCRTDllLoader">
            <summary>
            Loads unmanaged DLLs, dynamically choosing 32 or 64 bit depending on the current platform architecture
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SCRTDllLoader.InitNativeLibs">
            <summary>
            Initializes the native libraries
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.SCRTDllLoader.ForceDirectXVersion">
            <summary>
            Allows forcing DirectX Version. Must be called once before SciChart3D is loaded in the application
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.IViewportManager3D">
            <summary>
            <para>Defines the interface to a Viewportmanager, assigned to <see cref="P:SciChart.Charting3D.SciChart3DSurface.ViewportManager"/> property.</para>
            <para>The ViewportManager allows control over the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> and allows you to override X,Y,Z AutoRanging algorithms</para>
            <para>See derived types <seealso cref="T:SciChart.Charting3D.ViewportManager3DBase"/> and <seealso cref="T:SciChart.Charting3D.DefaultViewportManager3D"/> for concrete implementations</para>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.IViewportManager3D.Services">
            <summary>
            Gets the <see cref="T:SciChart.Core.Utility.ServiceContainer"/> which provides access to services throughout SciChart. 
            ServiceContainers are created one per <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:SciChart.Charting3D.Axis.AxisBase3D"/>, <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>, <see cref="T:SciChart.Charting3D.Modifiers.ChartModifierBase3D"/> instances.
            For a full list of available services, see the remarks on <see cref="T:SciChart.Core.Utility.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.IViewportManager3D.IsAttached">
            <summary>
            Returns <value>True</value> when a <see cref="T:SciChart.Charting3D.ViewportManager3DBase"/> has the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> attached to.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.IViewportManager3D.OnVisibleRangeChanged(SciChart.Charting3D.Axis.IAxis3D)">
            <summary>
            Called when the <see cref="P:SciChart.Charting.Visuals.Axes.IAxisParams.VisibleRange"/> changes for an axis. Override in derived types to get a notification of this occurring
            </summary>
            <param name="axis">The <see cref="T:SciChart.Charting3D.Axis.IAxis3D"/>instance</param>
        </member>
        <member name="M:SciChart.Charting3D.IViewportManager3D.CalculateAutoRange(SciChart.Charting3D.Axis.IAxis3D)">
            <summary>
            Called by the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> during render to perform autoranging. Override in derived types to return a custom value
            </summary>
            <param name="axis">The axis  to calculate for</param>
            <returns>
            The new <see cref="T:SciChart.Data.Model.IRange"/> VisibleRange for the axis
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.IViewportManager3D.OnParentSurfaceRendered(SciChart.Charting3D.ISciChart3DSurface)">
            <summary>
            Called when the <see cref="T:SciChart.Charting3D.ISciChart3DSurface"/> is rendered. 
            </summary>
            <param name="sciChartSurface">The SciChart3DSurface instance</param>
        </member>
        <member name="M:SciChart.Charting3D.IViewportManager3D.AttachSciChartSurface(SciChart.Charting3D.ISciChart3DSurface)">
            <summary>
            Called when the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> is attached to a ViewportManager. May be overridden to get notification of attachment. 
            </summary>
            <param name="scs">The <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> instance</param>
        </member>
        <member name="M:SciChart.Charting3D.IViewportManager3D.DetachSciChartSurface">
            <summary>
            Called when the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> is detached from a ViewportManager. May be overridden to get notification of detachment. 
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.ViewportManager3DBase">
            <summary>
            <para>Defines the base implementation of a Viewportmanager, assigned to <see cref="P:SciChart.Charting3D.SciChart3DSurface.ViewportManager"/> property.</para>
            <para>The ViewportManager allows control over the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> and allows you to override X,Y,Z AutoRanging algorithms</para>
            <para>See derived types <seealso cref="T:SciChart.Charting3D.ViewportManager3DBase"/> and <seealso cref="T:SciChart.Charting3D.DefaultViewportManager3D"/> for concrete implementations</para>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.ViewportManager3DBase.Services">
            <summary>
            Gets the <see cref="T:SciChart.Core.Utility.ServiceContainer"/> which provides access to services throughout SciChart. 
            ServiceContainers are created one per <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> instance, 
            and shared between peripheral components such as <see cref="T:SciChart.Charting3D.Axis.AxisBase3D"/>, <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>, <see cref="T:SciChart.Charting3D.Modifiers.ChartModifierBase3D"/> instances.
            For a full list of available services, see the remarks on <see cref="T:SciChart.Core.Utility.ServiceContainer"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.ViewportManager3DBase.IsAttached">
            <summary>
            Gets the value indicating whether a <see cref="T:SciChart.Charting.ViewportManagers.ViewportManagerBase"/> has the <see cref="T:SciChart.Charting.Visuals.SciChartSurface"/> attached to.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.AttachSciChartSurface(SciChart.Charting3D.ISciChart3DSurface)">
            <summary>
            Called when the <see cref="T:SciChart.Charting.ViewportManagers.ViewportManagerBase"/> is attached to a parent <see cref="T:SciChart.Charting.Visuals.SciChartSurface"/>
            </summary>
            <param name="scs">The SciChartSurface instance</param>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.DetachSciChartSurface">
            <summary>
            Called when the <see cref="T:SciChart.Charting.ViewportManagers.ViewportManagerBase"/> is detached from a parent <see cref="T:SciChart.Charting.Visuals.SciChartSurface"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.ViewportManager3DBase.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>
            The disposable Update Suspender
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.ResumeUpdates(SciChart.Core.Framework.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by IUpdateSuspender
            </summary>
            <param name="suspender"></param>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.InvalidateElement">
            <summary>
            Asynchronously requests that the element redraws itself plus children.
            Will be ignored if the element is ISuspendable and currently IsSuspended (within a SuspendUpdates/ResumeUpdates call)
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.ZoomExtents">
            <summary>
            Zooms the chart to the extents of the data, plus any X or Y Grow By fraction set on the X and Y Axes
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.AnimateZoomExtents(System.TimeSpan)">
            <summary>
            Zooms to extents with the specified animation duration
            </summary>
            <param name="duration">The duration of animation when zooming to extents</param>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.ZoomExtentsX">
            <summary>
            Zooms the chart to the extents of the data in the X-Direction
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.AnimateZoomExtentsX(System.TimeSpan)">
            <summary>
            Zooms the chart to the extents of the data in the X-Direction
            </summary>
            <param name="duration"></param>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.ZoomExtentsY">
            <summary>
            Zooms the chart to the extents of the data in the Y-Direction, accounting for the current data in view in the X-direction
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.AnimateZoomExtentsY(System.TimeSpan)">
            <summary>
            Zooms the chart to the extents of the data in the Y-Direction, accounting for the current data in view in the X-direction
            </summary>
            <param name="duration"></param>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.ZoomExtentsZ">
            <summary>
            Zooms the chart to the extents of the data in the Z-Direction, accounting for the current data in view in the XY-direction
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.AnimateZoomExtentsZ(System.TimeSpan)">
            <summary>
            Zooms the chart to the extents of the data in the Z-Direction, accounting for the current data in view in the XY-direction
            </summary>
            <param name="duration"></param>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.CalculateAutoRange(SciChart.Charting3D.Axis.IAxis3D)">
            <summary>
            Overridden by derived types, called when the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" /> requests to perform autoranging.
            The Range returned by this method will be applied to the chart on render
            </summary>
            <param name="axis">The axis</param>
            <returns>
            The new VisibleRange for the YAxis
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.CalculateNewXAxisRange(SciChart.Charting3D.Axis.IAxis3D)">
            <summary>
            Called by the <see cref="T:SciChart.Charting3D.SciChart3DSurface" /> during render to calculate the new XAxis VisibleRange. Override in derived types to return a custom value
            </summary>
            <param name="xAxis"></param>
            <returns>
            The new <see cref="T:SciChart.Data.Model.IRange" /> VisibleRange for the axis
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.CalculateNewYAxisRange(SciChart.Charting3D.Axis.IAxis3D,SciChart.Charting3D.Primitives.RenderPassInfo3D)">
            <summary>
            Called by the <see cref="T:SciChart.Charting3D.SciChart3DSurface" /> during render to calculate the new YAxis VisibleRange. Override in derived types to return a custom value
            </summary>
            <param name="yAxis">The YAxis to calculate for</param>
            <param name="renderPassInfo">The current <see cref="T:SciChart.Charting3D.Primitives.RenderPassInfo3D" /> containing render data</param>
            <returns>
            The new <see cref="T:SciChart.Data.Model.IRange" /> VisibleRange for the axis
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.CalculateNewZAxisRange(SciChart.Charting3D.Axis.IAxis3D,SciChart.Charting3D.Primitives.RenderPassInfo3D)">
            <summary>
            Called by the <see cref="T:SciChart.Charting3D.SciChart3DSurface" /> during render to calculate the new YAxis VisibleRange. Override in derived types to return a custom value
            </summary>
            <param name="yAxis">The YAxis to calculate for</param>
            <param name="renderPassInfo">The current <see cref="T:SciChart.Charting3D.Primitives.RenderPassInfo3D" /> containing render data</param>
            <returns>
            The new <see cref="T:SciChart.Data.Model.IRange" /> VisibleRange for the axis
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.OnCalculateNewXRange(SciChart.Charting3D.Axis.IAxis3D)">
            <summary>
            Overridden by derived types, called when the parent <see cref="T:SciChart.Charting.Visuals.SciChartSurface"/> requests the XAxis VisibleRange. 
            
            The Range returned by this method will be applied to the chart on render
            </summary>
            <param name="xAxis">The XAxis</param>
            <returns>The new VisibleRange for the XAxis</returns>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.OnCalculateNewYRange(SciChart.Charting3D.Axis.IAxis3D,SciChart.Charting3D.Primitives.RenderPassInfo3D)">
            <summary>
            Overridden by derived types, called when the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" /> requests a YAxis VisibleRange.
            The Range returned by this method will be applied to the chart on render
            </summary>
            <param name="yAxis">The YAxis</param>
            <param name="renderPassInfo">The render pass info.</param>
            <returns>
            The new VisibleRange for the YAxis
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.OnCalculateNewZRange(SciChart.Charting3D.Axis.IAxis3D,SciChart.Charting3D.Primitives.RenderPassInfo3D)">
            <summary>
            Overridden by derived types, called when the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" /> requests a ZAxis VisibleRange.
            The Range returned by this method will be applied to the chart on render
            </summary>
            <param name="zAxis">The ZAxis</param>
            <param name="renderPassInfo">The render pass info.</param>
            <returns>
            The new VisibleRange for the ZAxis
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.OnVisibleRangeChanged(SciChart.Charting3D.Axis.IAxis3D)">
            <summary>
            Called when the <see cref="P:SciChart.Charting.Visuals.Axes.IAxisParams.VisibleRange"/> changes for an axis. Override in derived types to get a notification of this occurring
            </summary>
            <param name="axis">The <see cref="T:SciChart.Charting.Visuals.Axes.IAxis"/>instance</param>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.OnParentSurfaceRendered(SciChart.Charting3D.ISciChart3DSurface)">
            <summary>
            Called when the <see cref="T:SciChart.Charting.Visuals.ISciChartSurface" /> is rendered.
            </summary>
            <param name="sciChartSurface">The SciChartSurface instance</param>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.InvalidateParentSurface(SciChart.Charting.Model.DataSeries.RangeMode)">
            <summary>
            Triggers a redraw on the parent surface with the specified RangeMode
            </summary>
            <param name="rangeMode">The <see cref="T:SciChart.Charting.Model.DataSeries.RangeMode"/> specifying how to redraw the parent surface</param>
        </member>
        <member name="M:SciChart.Charting3D.ViewportManager3DBase.OnInvalidateParentSurface(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:InvalidateParentSurface" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:SciChart.Charting3D.Camera3D">
            <summary>
            <para>Defines a FrameworkElement-based implementation of <see cref="T:SciChart.Charting3D.ICameraController"/>, which may be constructed in XAML and properties may be bound to as they are DependencyProperties</para>
            <para>You can set Position, Target as Vectors in world coordinates, Field of View, Aspect ratio etc...</para>
            <para>A camera can be switched from prespective to orthogonal, or rotated around it's target.</para>
            <para>Cameras may be attached to the <see cref="P:SciChart.Charting3D.SciChart3DSurface.Camera"/> property and there are several implementations for MVVM or XAML based construction</para>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Camera3D.CameraIdProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Camera3D.CameraId"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Camera3D.PositionProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Camera3D.Position"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Camera3D.TargetProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Camera3D.Target"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Camera3D.FieldOfViewProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Camera3D.FieldOfView"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Camera3D.NearClipProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Camera3D.NearClip"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Camera3D.FarClipProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Camera3D.FarClip"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Camera3D.OrbitalPitchProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Camera3D.OrbitalPitch"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Camera3D.OrbitalYawProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Camera3D.OrbitalYaw"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Camera3D.RadiusProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Camera3D.Radius"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Camera3D.AspectRatioProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Camera3D.AspectRatio"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Camera3D.ProjectionModeProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Camera3D.ProjectionMode"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Camera3D.OrthoWidthProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Camera3D.OrthoWidth"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Camera3D.OrthoHeightProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Camera3D.OrthoHeight"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.Camera3D.ZoomToFitOnAttachProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.Camera3D.ZoomToFitOnAttach"/> DependencyProperty</summary>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Camera3D"/> class.
            </summary>
        </member>
        <member name="E:SciChart.Charting3D.Camera3D.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:SciChart.Charting3D.Camera3D.CameraUpdated">
            <summary>
            Event raised whenever the Camera properties are updated and the parent requires a redraw
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.ZoomToFitOnAttach">
            <summary>
            When true, the Camera is zoomed to fit the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface" /> scene bounds on attached
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.CameraId">
            <summary>
            Gets or sets the Name or ID of the camera. Does not need to be unique, but can be used by the user to identify a camera
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.Position">
            <summary>
            Gets or sets the Position of the Camera as an XYZ Vector3 in World Coordinates
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.Target">
            <summary>
            Gets or sets the Target of the Camera as an XYZ Vector3 in World Coordinates
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.FieldOfView">
            <summary>
            Gets or sets the Field of View Angle of the Camera in Degrees
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.NearClip">
            <summary>
            Gets or sets the Near Clipping distance of the camera. Objects closer than this distance will be invisible to the camera
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.FarClip">
            <summary>
            Gets or sets the Far Clipping distance of the camera. Objects farther than this distance will be invisible to the camera
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.OrbitalPitch">
            <summary>
            Gets or sets the Pitch angle of the camera position relative to the target in DEGREES. This property may be manipulated to change the camera position
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.OrbitalYaw">
            <summary>
            Gets or sets the Yaw angle of the camera position relative to the target in DEGREES. This property may be manipulated to change the camera position
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.Radius">
            <summary>
            Calculated Property: Gets or sets the Radius distance of the camera to target in World Units. This property may be manipulated to change the camera position
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.AspectRatio">
            <summary>
            Gets or sets the Aspect Ratio of the viewport, e.g. 1.333f suggests width is 1.333 * height
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.OrthoHeight">
            <summary>
            Gets or sets the Camera Orthogonal Viewport height, used when ProjectionMode is Orthogonal
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.OrthoWidth">
            <summary>
            Gets or sets the Camera Orthogonal Viewport width, used when ProjectionMode is Orthogonal
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.ProjectionMode">
            <summary>
            Gets or sets the Camera projection mode, e.g. perspective or orthogonal
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.Up">
            <summary>
            Calculated Property: Gets the Normalized Up Vector of the Camera as an XYZ Vector3 in World Coordinates
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.UpGlobal">
            <summary>
            Calculated Property: Gets the Normalized Global Up Vector equal to Vector3(0,1,0) in LH Coordinate system
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.Side">
            <summary>
            Calculated Property: Gets the Normalized Side Vector of the Camera as an XYZ Vector3 in World Coordinates
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.Forward">
            <summary>
            Calculated Property: Gets the Normalized Forward (direction) Vector of the Camera as an XYZ Vector3 in World Coordinates
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Camera3D.IsAttached">
            <summary>
            INTERNAL USE ONLY: Gets or sets whether this camera is attached to the viewport
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.ToOrthogonal">
            <summary>
            Switches the camera to Orthogonal mode
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.ToPerspective">
            <summary>
            Switches the camera to Perspective mode
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.ResetToDefaults">
            <summary>
            Resets the camera to default position, target and orientation
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.AttachCameraToViewport(SciChart.Charting3D.IViewport3D)">
            <summary>
            INTERNAL USE: Attaches the camera to the viewport
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.WorldToScreenSpace(SciChart.Charting3D.Vector3)">
            <summary>
            Converts the Vector3 in world space to a 2D screen coordinate, using the current View and Projection matrices
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.LocalCoordinateToScreenSpace(SciChart.Charting3D.Vector3)">
            <summary>
            Converts the Vector3 in local coordinate space to a 2D screen coordinate, using the current View and Projection matrices
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.CalculateRadiusToFit(SciChart.Charting3D.BoundingBox,SciChart.Charting3D.Vector3@,System.Single@)">
            <summary>
            Calculates a Camera target and radius that will fit the bounding box completely inside the viewport.
            Uses a simple bounding-sphere algorithm
            </summary>
            <param name="bounds"></param>
            <param name="newTarget"></param>
            <param name="newRadius"></param>
            <example>
              <code>
            // Given a current position, target (which gives camera direction)
            camera.Target = new Vector3(0,0,0);
            camera.Position = new Vector3(100,100,100);
            // Calculate optimum radius to fit the bounding box
            Vector3 newTarget;
            float newRadius;
            camera.CalculateRadiusToFit(new BoundingBox(/* ... */), out newTarget, out newRadius);
            // Update camera target and radius
            camera.Target = newTarget;
            camear.Radius = newRadius;
            </code>
            </example>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>
            The disposable Update Suspender
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.ResumeUpdates(SciChart.Core.Framework.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by IUpdateSuspender
            </summary>
            <param name="suspender"></param>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.OnCameraIdDependencyPropertyChanged(System.String,System.String)">
            <summary>
            Called when the CameraId DependencyProperty changes
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.OnPositionDependencyPropertyChanged(SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3)">
            <summary>
            Called when the Position DependencyProperty changes
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.OnTargetDependencyPropertyChanged(SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3)">
            <summary>
            Called when the Target DependencyProperty changes
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.OnFieldOfViewDependencyPropertyChanged(System.Single,System.Single)">
            <summary>
            Called when the FieldOfView DependencyProperty changes
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.OnNearClipDependencyPropertyChanged(System.Single,System.Single)">
            <summary>
            Called when the NearClip DependencyProperty changes
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.OnFarClipDependencyPropertyChanged(System.Single,System.Single)">
            <summary>
            Called when the FarClip DependencyProperty changes
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.OnOrbitalPitchDependencyPropertyChanged(System.Single,System.Single)">
            <summary>
            Called when the OrbitalPitch DependencyProperty changes
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.OnOrbitalYawDependencyPropertyChanged(System.Single,System.Single)">
            <summary>
            Called when the OrbitalYaw DependencyProperty changes
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.OnRadiusDependencyPropertyChanged(System.Single,System.Single)">
            <summary>
            Called when the Radius DependencyProperty changes
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.OnAspectRatioDependencyPropertyChanged(System.Single,System.Single)">
            <summary>
            Called when the AspectRatio DependencyProperty changes
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.OnProjectionModeDependencyPropertyChanged(SciChart.Charting3D.CameraProjectionMode,SciChart.Charting3D.CameraProjectionMode)">
            <summary>
            Called when the ProjectionMode DependencyProperty changes
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.OnOrthoWidthDependencyPropertyChanged(System.Single,System.Single)">
            <summary>
            Called when the OrthoWidth DependencyProperty changes
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SciChart.Charting3D.Camera3D.OnOrthoHeightDependencyPropertyChanged(System.Single,System.Single)">
            <summary>
            Called when the OrthoHeight DependencyProperty changes
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:SciChart.Charting3D.CameraProjectionMode">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.ICameraController.ProjectionMode"/> enum values
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.CameraProjectionMode.Perspective">
            <summary>
            The camera renders in perspective mode
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.CameraProjectionMode.Orthogonal">
            <summary>
            The camera renders in Orthogonal mode
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.ICameraController">
            <summary>
            <para>Defines the interface to a Camera in the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> scene</para>
            <para>You can set Position, Target as Vectors in world coordinates, Field of View, Aspect ratio etc...</para>
            <para>A camera can be switched from prespective to orthogonal, or rotated around it's target.</para>
            <para>Cameras may be attached to the <see cref="P:SciChart.Charting3D.SciChart3DSurface.Camera"/> property and there are several implementations for MVVM or XAML based construction</para>
            </summary>
        </member>
        <member name="E:SciChart.Charting3D.ICameraController.CameraUpdated">
            <summary>Event raised whenever the Camera properties are updated and the parent requires a redraw</summary>			
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.CameraId">
            <summary>Gets or sets the Name or ID of the camera. Does not need to be unique, but can be used by the user to identify a camera</summary>			
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.Position">
            <summary>Gets or sets the Position of the Camera as an XYZ Vector3 in World Coordinates</summary>			
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.Target">
            <summary>Gets or sets the Target of the Camera as an XYZ Vector3 in World Coordinates</summary>			
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.Up">
            <summary>Calculated Property: Gets the Normalized Up Vector of the Camera as an XYZ Vector3 in World Coordinates</summary>			
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.Forward">
            <summary>Calculated Property: Gets the Normalized Forward (direction) Vector of the Camera as an XYZ Vector3 in World Coordinates</summary>			
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.Side">
            <summary>Calculated Property: Gets the Normalized Side Vector of the Camera as an XYZ Vector3 in World Coordinates</summary>			
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.UpGlobal">
            <summary>Calculated Property: Gets the Normalized Global Up Vector equal to Vector3(0,1,0) in LH Coordinate system</summary>			
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.FieldOfView">
            <summary>Gets or sets the Field of View Angle of the Camera in Degrees</summary>			
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.NearClip">
            <summary>Gets or sets the Near Clipping distance of the camera. Objects closer than this distance will be invisible to the camera</summary>			
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.FarClip">
            <summary>Gets or sets the Far Clipping distance of the camera. Objects farther than this distance will be invisible to the camera</summary>			
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.OrbitalYaw">
            <summary>Gets or sets the Yaw angle of the camera position relative to the target in DEGREES. This property may be manipulated to change the camera position</summary>	
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.OrbitalPitch">
            <summary>Gets or sets the Pitch angle of the camera position relative to the target in DEGREES. This property may be manipulated to change the camera position</summary>			
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.Radius">
            <summary>Calculated Property: Gets or sets the Radius distance of the camera to target in World Units. This property may be manipulated to change the camera position</summary>			
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.AspectRatio">
            <summary>Gets or sets the Aspect Ratio of the viewport, e.g. 1.333f suggests width is 1.333 * height</summary>			
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.IsAttached">
            <summary>INTERNAL USE ONLY: Gets or sets whether this camera is attached to the viewport</summary>			
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.ProjectionMode">
            <summary>Gets or sets the Camera projection mode, e.g. perspective or orthogonal</summary>			
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.OrthoWidth">
            <summary>Gets or sets the Camera Orthogonal Viewport width, used when ProjectionMode is Orthogonal</summary>			
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.OrthoHeight">
            <summary>Gets or sets the Camera Orthogonal Viewport height, used when ProjectionMode is Orthogonal</summary>			
        </member>
        <member name="P:SciChart.Charting3D.ICameraController.ZoomToFitOnAttach">
            <summary>
            When true, the Camera is zoomed to fit the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> scene bounds on attached
            </summary>        
        </member>
        <member name="M:SciChart.Charting3D.ICameraController.ToOrthogonal">
            <summary>
            Switches the camera to Orthogonal mode
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.ICameraController.ToPerspective">
            <summary>
            Switches the camera to Perspective mode
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.ICameraController.ResetToDefaults">
            <summary>Resets the camera to default position, target and orientation</summary>			
        </member>
        <member name="M:SciChart.Charting3D.ICameraController.AttachCameraToViewport(SciChart.Charting3D.IViewport3D)">
            <summary>INTERNAL USE: Attaches the camera to the viewport</summary>		
        </member>
        <member name="M:SciChart.Charting3D.ICameraController.WorldToScreenSpace(SciChart.Charting3D.Vector3)">
            <summary>Converts the Vector3 in world space to a 2D screen coordinate, using the current View and Projection matrices</summary>	
        </member>
        <member name="M:SciChart.Charting3D.ICameraController.LocalCoordinateToScreenSpace(SciChart.Charting3D.Vector3)">
            <summary>Converts the Vector3 in world space to a 2D screen coordinate, using the current View and Projection matrices</summary>	
        </member>
        <member name="M:SciChart.Charting3D.ICameraController.CalculateRadiusToFit(SciChart.Charting3D.BoundingBox,SciChart.Charting3D.Vector3@,System.Single@)">
            <summary>
            Calculates a Camera target and radius that will fit the bounding box completely inside the viewport. 
            
            Uses a simple bounding-sphere algorithm
            </summary>
            <example>
            <code>
            // Given a current position, target (which gives camera direction)
            camera.Target = new Vector3(0,0,0);
            camera.Position = new Vector3(100,100,100);
            
            // Calculate optimum radius to fit the bounding box
            Vector3 newTarget;
            float newRadius;
            camera.CalculateRadiusToFit(new BoundingBox(/* ... */), out newTarget, out newRadius);
            
            // Update camera target and radius
            camera.Target = newTarget;
            camear.Radius = newRadius;
            </code>
            </example>
        </member>
        <member name="T:SciChart.Charting3D.CameraController">
            <summary>
            <para>Defines a simple bindable (non FrameworkElement) implementation of <see cref="T:SciChart.Charting3D.ICameraController"/></para>
            <para>You can set Position, Target as Vectors in world coordinates, Field of View, Aspect ratio etc...</para>
            <para>A camera can be switched from prespective to orthogonal, or rotated around it's target.</para>
            <para>Cameras may be attached to the <see cref="P:SciChart.Charting3D.SciChart3DSurface.Camera"/> property and there are several implementations for MVVM or XAML based construction</para>
            </summary>
        </member>
        <member name="E:SciChart.Charting3D.CameraController.CameraUpdated">
            <summary>
            Event raised whenever the Camera properties are updated and the parent requires a redraw
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.CameraController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.CameraController"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.ParentViewport3D">
            <summary>
            Gets or sets the parent <see cref="T:SciChart.Charting3D.IViewport3D"/> where this camera is attached
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.CameraId">
            <summary>
            Gets or sets the Name or ID of the camera. Does not need to be unique, but can be used by the user to identify a camera
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.OrthoHeight">
            <summary>
            Gets or sets the Camera Orthogonal Viewport height, used when ProjectionMode is Orthogonal
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.OrthoWidth">
            <summary>
            Gets or sets the Camera Orthogonal Viewport width, used when ProjectionMode is Orthogonal
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.ProjectionMode">
            <summary>
            Gets or sets the Camera projection mode, e.g. perspective or orthogonal
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.AspectRatio">
            <summary>
            Gets or sets the Aspect Ratio of the viewport, e.g. 1.333f suggests width is 1.333 * height
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.IsAttached">
            <summary>
            INTERNAL USE ONLY: Gets or sets whether this camera is attached to the viewport
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.Radius">
            <summary>
            Calculated Property: Gets or sets the Radius distance of the camera to target in World Units. This property may be manipulated to change the camera position
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.OrbitalPitch">
            <summary>
            Gets or sets the Pitch angle of the camera position relative to the target in DEGREES. This property may be manipulated to change the camera position
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.OrbitalYaw">
            <summary>
            Gets or sets the Yaw angle of the camera position relative to the target in DEGREES. This property may be manipulated to change the camera position
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.FarClip">
            <summary>
            Gets or sets the Far Clipping distance of the camera. Objects farther than this distance will be invisible to the camera
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.NearClip">
            <summary>
            Gets or sets the Near Clipping distance of the camera. Objects closer than this distance will be invisible to the camera
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.FieldOfView">
            <summary>
            Gets or sets the Field of View Angle of the Camera in Degrees
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.UpGlobal">
            <summary>
            Calculated Property: Gets the Normalized Global Up Vector equal to Vector3(0,1,0) in LH Coordinate system
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.Side">
            <summary>
            Calculated Property: Gets the Normalized Side Vector of the Camera as an XYZ Vector3 in World Coordinates
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.Forward">
            <summary>
            Calculated Property: Gets the Normalized Forward (direction) Vector of the Camera as an XYZ Vector3 in World Coordinates
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.Up">
            <summary>
            Calculated Property: Gets the Normalized Up Vector of the Camera as an XYZ Vector3 in World Coordinates
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.Target">
            <summary>
            Gets or sets the Target of the Camera as an XYZ Vector3 in World Coordinates
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.Position">
            <summary>
            Gets or sets the Position of the Camera as an XYZ Vector3 in World Coordinates
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.CameraController.ZoomToFitOnAttach">
            <summary>
            When true, the Camera is zoomed to fit the parent <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> scene bounds on attached
            </summary>        
        </member>
        <member name="M:SciChart.Charting3D.CameraController.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>
            The disposable Update Suspender
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.CameraController.ResumeUpdates(SciChart.Core.Framework.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by IUpdateSuspender
            </summary>
            <param name="suspender"></param>
        </member>
        <member name="M:SciChart.Charting3D.CameraController.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.CameraController.ToOrthogonal">
            <summary>
            Switches the camera to Orthogonal mode
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.CameraController.ToPerspective">
            <summary>
            Switches the camera to Perspective mode
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.CameraController.ResetToDefaults">
            <summary>
            Resets the camera to default position, target and orientation
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.CameraController.AttachCameraToViewport(SciChart.Charting3D.IViewport3D)">
            <summary>
            INTERNAL USE: Attaches the camera to the viewport
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:SciChart.Charting3D.CameraController.WorldToScreenSpace(SciChart.Charting3D.Vector3)">
            <summary>
            Converts the Vector3 in world space to a 2D screen coordinate, using the current View and Projection matrices
            </summary>
            <param name="vertex">The position in world space</param>
            <returns>The point on the screen</returns>
        </member>
        <member name="M:SciChart.Charting3D.CameraController.LocalCoordinateToScreenSpace(SciChart.Charting3D.Vector3)">
            <summary>
            Converts the Vector3 in world space to a 2D screen coordinate, using the current View and Projection matrices
            </summary>
            <param name="vertex">The position in world space</param>
            <returns>The point on the screen</returns>
        </member>
        <member name="M:SciChart.Charting3D.CameraController.ScreenToWorldSpace(System.Windows.Point,System.Double)">
            <summary>
            Converts a point in Screen space to a <see cref="T:SciChart.Charting3D.Vector3"/> in world space, given the specified distance from the screen
            </summary>
            <param name="pt">The Screen point.</param>
            <param name="distance">The distance.</param>
            <returns>The <see cref="T:SciChart.Charting3D.Vector3"/> world coordinate</returns>
        </member>
        <member name="M:SciChart.Charting3D.CameraController.CalculateRadiusToFit(SciChart.Charting3D.BoundingBox,SciChart.Charting3D.Vector3@,System.Single@)">
            <summary>
            Calculates a Camera target and radius that will fit the bounding box completely inside the viewport.
            Uses a simple bounding-sphere algorithm
            </summary>
            <param name="bounds"></param>
            <param name="newTarget"></param>
            <param name="newRadius"></param>
            <example>
              <code>
            // Given a current position, target (which gives camera direction)
            camera.Target = new Vector3(0,0,0);
            camera.Position = new Vector3(100,100,100);
            // Calculate optimum radius to fit the bounding box
            Vector3 newTarget;
            float newRadius;
            camera.CalculateRadiusToFit(new BoundingBox(/* ... */), out newTarget, out newRadius);
            // Update camera target and radius
            camera.Target = newTarget;
            camear.Radius = newRadius;
            </code>
            </example>
        </member>
        <member name="M:SciChart.Charting3D.CameraController.Update">
            <summary>
            Updates the internal camera used by the 3D scene
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.CameraController.OnCameraUpdated">
            <summary>
            Raises the <see cref="E:SciChart.Charting3D.CameraController.CameraUpdated"/> event
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.ISciChartController3D">
            <summary>
                An interface to a subset of methods on the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.ISciChartController3D.ZoomExtentsZ">
            <summary>
            Zooms the chart to the extents of the data in the Z-Direction, accounting for the current data in view in the X-Y direction
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.ISciChartController3D.AnimateZoomExtentsZ(System.TimeSpan)">
            <summary>
            Zooms the chart to the extents of the data in the Z-Direction, accounting for the current data in view in the X-Y direction
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.PointMarkers.BaseMeshPointMarker3D">
            <summary>
            <para>Defines the base-class for a <see cref="T:SciChart.Charting3D.PointMarkers.BasePointMarker3D"/> which renders a 3D model at each point. </para>
            <para>Use in combination with the <see cref="T:SciChart.Charting3D.RenderableSeries.ScatterRenderableSeries3D"/> to render a point-cloud</para>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.BaseMeshPointMarker3D.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.BaseMeshPointMarker3D.PointsMesh">
            <summary>
            Gets the <see cref="!:IndexedMesh3D"/> which is the 3D model repeated at each data-point
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.BaseMeshPointMarker3D.MarkerType">
            <summary>
            Gets the <see cref="P:SciChart.Charting3D.PointMarkers.BaseMeshPointMarker3D.MarkerType" />
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.PointMarkers.MarkerType">
            <summary>
            Defines the <see cref="T:SciChart.Charting3D.PointMarkers.BasePointMarker3D"/> Marker Type.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.PointMarkers.MarkerType.Pixel">
            <summary>
            The pixel point marker type.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.PointMarkers.MarkerType.TexturedQuad">
            <summary>
            The textured quad.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.PointMarkers.MarkerType.InstancedMesh">
            <summary>
            The instanced mesh.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.PointMarkers.BasePointMarker3D">
            <summary>
            The base-class for Pointmarkers in SciChart 3D. This is used to repeat a texture or a 3D model at data-points in certain renderable series
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.PointMarkers.BasePointMarker3D.PointMarkerTemplateProperty">
            <summary>
            Defines the PointMarkerTemplate DependencyProperty.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.PointMarkers.BasePointMarker3D.FillProperty">
            <summary>
            Defines the Fill DependencyProperty.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.PointMarkers.BasePointMarker3D.SizeProperty">
            <summary>
            Defines the Size DependencyProperty.
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.PointMarkers.BasePointMarker3D.SelectedFillProperty">
            <summary>
            Defines the SelectedFill DependencyProperty.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.BasePointMarker3D.#cctor">
            <summary>
            Initializes the <see cref="T:SciChart.Charting3D.PointMarkers.BasePointMarker3D"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.BasePointMarker3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.PointMarkers.BasePointMarker3D"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.BasePointMarker3D.MarkerType">
            <summary>
            Gets the <see cref="P:SciChart.Charting3D.PointMarkers.BasePointMarker3D.MarkerType"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.BasePointMarker3D.PointMarkerTemplate">
            <summary>
            Gets or sets the PointMarker ControlTemplate, which defines the point-marker Visual to be rendered on each datapoint of the series.
            </summary>
            <remarks>The ControlTemplate is used to template the visuals only for a blank control, creating a new instance per <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/></remarks>. 
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.BasePointMarker3D.Fill">
            <summary>
            Gets or sets the fill.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.BasePointMarker3D.SelectedFill">
            <summary>
            Gets or sets the fill when selected
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.BasePointMarker3D.Size">
            <summary>
            Gets or sets the size of the PointMarker
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.BasePointMarker3D.RenderableSeries">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/> which this <see cref="T:SciChart.Charting3D.PointMarkers.BasePointMarker3D"/> instance is associated with.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.BasePointMarker3D.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:SciChart.Charting3D.PointMarkers.BasePointMarker3D"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.BasePointMarker3D.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.BasePointMarker3D.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.BasePointMarker3D.Attach(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D)">
            <summary>
            Called when a <see cref="T:SciChart.Charting3D.PointMarkers.BasePointMarker3D"/> instance is attached to an <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/>.
            </summary>
            <param name="series">The <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/> which this <see cref="T:SciChart.Charting3D.PointMarkers.BasePointMarker3D"/> instance is associated with.</param>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.BasePointMarker3D.Detach">
            <summary>
            Called when a <see cref="T:SciChart.Charting3D.PointMarkers.BasePointMarker3D"/> instance is detached from an <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/>.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.PointMarkers.BaseTexturePointMarker3D">
            <summary>
            <para>Defines the base-class for a <see cref="T:SciChart.Charting3D.PointMarkers.BasePointMarker3D"/> which renders a flat texture at each point. </para>
            <para>Use in combination with the <see cref="T:SciChart.Charting3D.RenderableSeries.ScatterRenderableSeries3D"/> to render a point-cloud</para>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.BaseTexturePointMarker3D.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.BaseTexturePointMarker3D.PointTexture">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.Texture2D"/> instance which is repeated across data-points 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.BaseTexturePointMarker3D.MarkerType">
            <summary>
            Gets the <see cref="P:SciChart.Charting3D.PointMarkers.BaseTexturePointMarker3D.MarkerType" />
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.PointMarkers.SpherePointMarker3D">
            <summary>
            Defines a Sphere Point-marker for used with 3D RenderableSeries
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.SpherePointMarker3D.#ctor">
            <summary>
            Initializes the instance of <see cref="T:SciChart.Charting3D.PointMarkers.SpherePointMarker3D"/>.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.SpherePointMarker3D.PointsMesh">
            <summary>
            Gets the <see cref="!:IndexedMesh3D" /> which is the 3D model repeated at each data-point
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.PointMarkers.CubePointMarker3D">
            <summary>
            Defines a Cube Point-marker for used with 3D RenderableSeries
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.CubePointMarker3D.#ctor">
            <summary>
            Initializes the instance of <see cref="T:SciChart.Charting3D.PointMarkers.CubePointMarker3D"/>.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.CubePointMarker3D.PointsMesh">
            <summary>
            Gets the <see cref="!:IndexedMesh3D" /> which is the 3D model repeated at each data-point
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.PointMarkers.PyramidPointMarker3D">
            <summary>
            Defines a Pyramid Point-marker for used with 3D RenderableSeries
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.PyramidPointMarker3D.#ctor">
            <summary>
            Initializes the instance of <see cref="T:SciChart.Charting3D.PointMarkers.PyramidPointMarker3D"/>.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.PyramidPointMarker3D.PointsMesh">
            <summary>
            Gets the <see cref="!:IndexedMesh3D" /> which is the 3D model repeated at each data-point
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.PointMarkers.CylinderPointMarker3D">
            <summary>
            Defines a Cylinder Point-marker for used with 3D RenderableSeries
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.CylinderPointMarker3D.#ctor">
            <summary>
            Initializes the instance of <see cref="T:SciChart.Charting3D.PointMarkers.CylinderPointMarker3D"/>.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.CylinderPointMarker3D.PointsMesh">
            <summary>
            Gets the <see cref="!:IndexedMesh3D" /> which is the 3D model repeated at each data-point
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.PointMarkers.PixelPointMarker3D">
            <summary>
            Defines a Pixel Point-marker for used with 3D RenderableSeries
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.PixelPointMarker3D.#ctor">
            <summary>
            Initializes the instance of <see cref="T:SciChart.Charting3D.PointMarkers.PixelPointMarker3D"/>.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.PixelPointMarker3D.MarkerType">
            <summary>
            Gets the <see cref="P:SciChart.Charting3D.PointMarkers.PixelPointMarker3D.MarkerType" />
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.PixelPointMarker3D.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:SciChart.Charting3D.PointMarkers.QuadPointMarker3D">
            <summary>
            Defines a Quad (flat texture) Point-marker for used with 3D RenderableSeries
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.QuadPointMarker3D.#ctor">
            <summary>
            Initializes the instance of <see cref="T:SciChart.Charting3D.PointMarkers.QuadPointMarker3D"/>.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.QuadPointMarker3D.PointTexture">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.Texture2D" /> instance which is repeated across data-points
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.PointMarkers.EllipsePointMarker3D">
            <summary>
            Defines an Ellipse (flat texture) Point-marker for used with 3D RenderableSeries
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.EllipsePointMarker3D.#ctor">
            <summary>
            Initializes the instance of <see cref="T:SciChart.Charting3D.PointMarkers.EllipsePointMarker3D"/>.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.EllipsePointMarker3D.PointTexture">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.Texture2D" /> instance which is repeated across data-points
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.PointMarkers.TrianglePointMarker3D">
            <summary>
            Defines a Triangle (flat texture) Point-marker for used with 3D RenderableSeries
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.TrianglePointMarker3D.#ctor">
            <summary>
            Initializes the instance of <see cref="T:SciChart.Charting3D.PointMarkers.TrianglePointMarker3D"/>.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.TrianglePointMarker3D.PointTexture">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.Texture2D" /> instance which is repeated across data-points
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.PointMarkers.CustomPointMarker3D">
            <summary>
            Defines a Custom texture Point-marker for used with 3D RenderableSeries. Accepts a <see cref="P:SciChart.Charting3D.PointMarkers.CustomPointMarker3D.Brush"/>, e.g. try <see cref="T:System.Windows.Media.VisualBrush"/> or <see cref="T:System.Windows.Media.ImageBrush"/>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.PointMarkers.CustomPointMarker3D.BrushProperty">
            <summary>
            Defines the <see cref="P:SciChart.Charting3D.PointMarkers.CustomPointMarker3D.Brush"/> DependencyProperty
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.PointMarkers.CustomPointMarker3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.PointMarkers.CustomPointMarker3D"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.PointMarkers.CustomPointMarker3D.Brush">
            <summary>
            Gets or sets the brush to create color-palette from. 
            </summary>        
        </member>
        <member name="T:SciChart.Charting3D.IRootSceneEntity">
            <summary>
            <para>Defines the interface to a <see cref="T:SciChart.Charting3D.Primitives.BaseSceneEntity"/> which is at the root of a <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> 3D Scene.</para>
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.SciChart3DRootSceneEntity">
            <summary>
            <para>A <see cref="T:SciChart.Charting3D.Primitives.BaseSceneEntity"/> which is at the root of a <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> 3D Scene.</para>
            <para>Contains an <see cref="T:SciChart.Charting3D.Axis.AxisCubeEntity"/>, <see cref="!:RenderableSeries3DEntity"/> which is the parent for <see cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/></para>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRootSceneEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.SciChart3DRootSceneEntity"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRootSceneEntity.#ctor(SciChart.Charting3D.Axis.AxisCubeEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.SciChart3DRootSceneEntity"/> class with predefined child entities
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRootSceneEntity.#ctor(SciChart.Charting3D.Primitives.IBaseSceneEntity[])">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.SciChart3DRootSceneEntity"/> class with predefined child entities
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DRootSceneEntity.AxisCube">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.Axis.AxisCubeEntity"/>, which draws the 3D Axis 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DRootSceneEntity.XyzGizmo">
            <summary>
            Gets XYZ Gizmo entity.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DRootSceneEntity.FpsPresenter">
            <summary>
            Gets FPS Presenter entity.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRootSceneEntity.UpdateScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to update the geometry in this element. This is where we need to cache geometry before draw.
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRootSceneEntity.RenderScene(SciChart.Charting3D.Primitives.IRenderPassInfo3D)">
            <summary>
            Called when the 3D Engine wishes to render this element. This is where geometry must be drawn to the 3D scene
            </summary>
            <param name="e">The <see cref="T:SciChart.Charting3D.Primitives.IRenderPassInfo3D" /> containing parameters for the current render pass.</param>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRootSceneEntity.PerformSelection(System.Boolean,System.Collections.Generic.List{SciChart.Charting3D.Primitives.VertexId})">
            <summary>
            Performs selection on this entity, setting the IsSelected flag to True or False on the specified <see cref="T:SciChart.Charting3D.Primitives.VertexId">Vertex Ids</see>
            </summary>
            <param name="isSelected">if set to <c>true</c> the vertices become .</param>
            <param name="vertexIds">The vertex ids.</param>
        </member>
        <member name="T:SciChart.Charting3D.ISciChart3DRenderer">
            <summary>
            Defines the interface to the <see cref="T:SciChart.Charting3D.SciChart3DRenderer"/>, which handles the render pass on the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.ISciChart3DRenderer.RenderLoop">
            <summary>
            Executes a single render pass
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.SciChart3DRenderer">
            <summary>
            Handles the render pass on the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRenderer.#ctor(SciChart.Charting3D.SciChart3DSurface)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.SciChart3DRenderer"/> class.
            </summary>
            <param name="sciChart3DSurface">The sci chart3 d surface.</param>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRenderer.RenderLoop">
            <summary>
            Executes a single render pass
            </summary>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRenderer.OnLayoutSciChart(SciChart.Charting3D.ISciChart3DSurface)">
            <summary>
            Step 1, perform layout, resize components
            </summary>
            <param name="scs"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRenderer.TryPerformAutorangeOn(SciChart.Charting3D.Axis.IAxis3D,SciChart.Charting3D.ISciChart3DSurface)">
            <summary>
            // Set a default range prior to layout if one doesn't exist
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.CoordinateSystem3D">
            <summary>
            Enumeration constants to define the Coordinate System (e.g. LHS, RHS) on the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.CoordinateSystem3D.LeftHanded">
            <summary>
            The left handed coordinate system (Default) which matches DirectX
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.CoordinateSystem3D.RightHanded">
            <summary>
            The right handed coordinate system, matches OpenGL
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.SciChart3DSurface">
            <summary>
            <para>Provides a high performance DirectX powered 3D chart surface.</para>
            <para>Multiple multiple <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D">Renderable Series</see> are drawn over an Axis Cube, which contains the visual representation of X,Y and Z <see cref="T:SciChart.Charting3D.Axis.IAxis3D"/> instances.</para>
            <para>Each <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D">Renderable Series</see> has a <see cref="T:SciChart.Charting3D.Model.IDataSeries3D">Data Series</see>, which provides the data-source either in code or via MVVM bindings.</para>
            <para>The <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> supports one or more <see cref="T:SciChart.Charting3D.Modifiers.ChartModifierBase3D"/> derived types via the <see cref="P:SciChart.Charting3D.SciChart3DSurface.ChartModifier"/> property. These are used to 
            affect behaviour such as zooming, panning and tooltips.</para>
            <para>Finally, a <see cref="T:SciChart.Charting3D.ICameraController"/> instance is applied to the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> to define the view into the 3D scene</para>
            </summary>
            <seealso cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>
            <seealso cref="T:SciChart.Charting3D.Model.IDataSeries3D"/>
            <seealso cref="T:SciChart.Charting3D.Modifiers.ChartModifierBase3D"/>
            <seealso cref="P:SciChart.Charting3D.SciChart3DSurface.Viewport3D"/>
            <seealso cref="T:SciChart.Charting3D.Axis.AxisBase3D"/>
        </member>
        <member name="F:SciChart.Charting3D.SciChart3DSurface.ChartModifierProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.SciChart3DSurface.ChartModifier"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChart3DSurface.RenderableSeriesProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.SciChart3DSurface.RenderableSeries"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChart3DSurface.XAxisProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.SciChart3DSurface.XAxis"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChart3DSurface.YAxisProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.SciChart3DSurface.YAxis"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChart3DSurface.ZAxisProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.SciChart3DSurface.ZAxis"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChart3DSurface.CameraProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.SciChart3DSurface.Camera"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChart3DSurface.WorldDimensionsProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.SciChart3DSurface.WorldDimensions"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChart3DSurface.ViewportManagerProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.SciChart3DSurface.ViewportManager"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChart3DSurface.IsAxisCubeVisibleProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.SciChart3DSurface.IsAxisCubeVisible"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChart3DSurface.AxisPlaneVisibilityModeProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.SciChart3DSurface.AxisPlaneVisibilityMode"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChart3DSurface.IsFpsCounterVisibleProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.SciChart3DSurface.IsFpsCounterVisible"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChart3DSurface.IsXyzGizmoVisibleProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.SciChart3DSurface.IsXyzGizmoVisible"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChart3DSurface.CoordinateSystemProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.SciChart3DSurface.CoordinateSystem"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChart3DSurface.RootSceneEntityProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.SciChart3DSurface.RootSceneEntity"/> DependencyProperty</summary>
        </member>
        <member name="F:SciChart.Charting3D.SciChart3DSurface.SceneObjectsProperty">
            <summary>Defines the <see cref="P:SciChart.Charting3D.SciChart3DSurface.SceneObjects"/> DependencyProperty</summary>
        </member>
        <member name="E:SciChart.Charting3D.SciChart3DSurface.RenderableSeriesChanged">
            <summary>
            Event raised when <see cref="P:SciChart.Charting3D.SciChart3DSurface.RenderableSeries"/> changes.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.#cctor">
            <summary>
            Initializes the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.#ctor(SciChart.Core.Utility.IServiceContainer)">
            <summary>
            Internal Ctor used for tests
            </summary>
            <param name="mockServices"></param>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DSurface.SupportsXamlRenderSurface">
            <summary>
            Returns True if the current <see cref="T:SciChart.Charting.Visuals.SciChartSurfaceBase"/> instance supports the <see cref="T:SciChart.Drawing.XamlRasterizer.XamlRenderSurface"/> for high quality vector rendering and export. By default this is True, but some chart types, e.g. 3D Charts, cannot support this output
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DSurface.RootSceneEntity">
            <summary>
            The Root Entity in the 3D Scene. This should always be defined and child entities are drawn in order
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DSurface.IsAxisCubeVisible">
            <summary>
            When True, the Axis Cube is visible, when false, the entire axis cube is hidden
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DSurface.AxisPlaneVisibilityMode">
            <summary>
            Defines how Axis Cube planes are drawn. 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DSurface.IsFpsCounterVisible">
            <summary>
            When True, the FPS Count (Refresh Rate, Hz) is shown in the bottom left corner of the SciChart3DSurface
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DSurface.IsXyzGizmoVisible">
            <summary>
            When True, the XYZ Orientation Gizmo is drawn in the bottom left of the SciChart3DSurface
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DSurface.CoordinateSystem">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.CoordinateSystem3D"/> to apply to the current SciChart3DSurface. 
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DSurface.Viewport3D">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.IViewport3D" /> which hosts the 3D Scene. This may be null if the <see cref="T:SciChart.Charting3D.SciChart3DSurface" /> has not yet loaded or initialized
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DSurface.RenderableSeries">
            <summary>
            Gets the collection of <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/> that this SciChart3DSurface draws.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DSurface.XAxis">
            <summary>
            Gets or sets the XAxis on the <see cref="T:SciChart.Charting3D.ISciChart3DSurface" />
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DSurface.YAxis">
            <summary>
            Gets or sets the YAxis on the <see cref="T:SciChart.Charting3D.ISciChart3DSurface" />
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DSurface.ZAxis">
            <summary>
            Gets or sets the ZAxis on the <see cref="T:SciChart.Charting3D.ISciChart3DSurface" />
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DSurface.ViewportManager">
            <summary>
            Gets or sets the ViewportManager instance on the chart, which handles behavior of the viewport on render
            </summary>
            <value>The renderable series.</value>
            <remarks></remarks>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DSurface.ChartModifier">
            <summary>
            Gets or sets the ChartModifier on the <see cref="T:SciChart.Charting3D.ISciChart3DSurface" />
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DSurface.WorldDimensions">
            <summary>
            Gets or sets the World Dimensions as a <see cref="T:SciChart.Charting3D.Vector3"/>. 
            </summary>
            <remarks>
            The default is X,Y,Z = 100,100,100.
            The extents of the X,Y,Z world ranges from -DimX/2 to +DimX/2, -DimY/2 to +DimY/2, -DimZ/2 to +DimZ/2
            </remarks>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DSurface.Camera">
            <summary>
            Gets or sets the <see cref="T:SciChart.Charting3D.ICameraController"/>, which allows direct control over the position, target of the camera and therefore the view, projection matrices of the viewport
            </summary>        
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.ZoomExtents">
            <summary>
            Zooms the X,Y,Z Axis to the extents of the data, plus any <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.GrowBy"/> fraction set on the X,Y and Z Axes
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.AnimateZoomExtents(System.TimeSpan)">
            <summary>
            Animated zoom-extents on the the X,Y,Z Axis to the extents of the data, plus any <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.GrowBy"/> fraction set on the X,Y and Z Axes
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.ZoomExtentsY">
            <summary>
            Zooms just the YAxis to extents, plus any <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.GrowBy"/> fraction set on the YAxis
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.AnimateZoomExtentsY(System.TimeSpan)">
            <summary>
            Animated zoom-extents just the YAxis, plus any <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.GrowBy"/> fraction set on the YAxis
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.ZoomExtentsX">
            <summary>
            Zooms just the XAxis to extents, plus any <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.GrowBy"/> fraction set on the XAxis
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.AnimateZoomExtentsX(System.TimeSpan)">
            <summary>
            Animated zoom-extents just the XAxis, plus any <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.GrowBy"/> fraction set on the XAxis
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.ZoomExtentsZ">
            <summary>
            Zooms just the ZAxis to extents, plus any <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.GrowBy"/> fraction set on the ZAxis
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.AnimateZoomExtentsZ(System.TimeSpan)">
            <summary>
            Animated zoom-extents just the ZAxis, plus any <see cref="P:SciChart.Charting.Visuals.Axes.AxisCore.GrowBy"/> fraction set on the ZAxis
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.OnArrangeSciChart">
            <summary>
            Preparations for a render pass, called internally, returns the viewport size
            </summary>
            <returns>The required Viewport Size</returns>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.RegisterServices(SciChart.Core.Utility.IServiceContainer)">
            <summary>
            Called in the constructor of <see cref="T:SciChart.Charting.Visuals.SciChartSurfaceBase" />, gives derived classes the opportunity to register services per <see cref="T:SciChart.Charting.Visuals.SciChartSurfaceBase" /> instance
            </summary>
            <param name="serviceContainer">The service container instance.</param>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.OnSciChartSurfaceLoaded">
            <summary>
            Called when the <see cref="T:SciChart.Charting.Visuals.SciChartSurfaceBase" /> is loaded. Perform initialization operations here.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.OnSciChartSurfaceUnloaded">
            <summary>
            Called when the <see cref="T:SciChart.Charting.Visuals.SciChartSurfaceBase" /> is Unloaded and removed from the visual tree. Perform cleanup operations here
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.OnRenderSurfaceDependencyPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called with the <see cref="F:SciChart.Charting.Visuals.SciChartSurfaceBase.RenderSurfaceProperty" /> changes.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.DoDrawingLoop">
            <summary>
            The inner drawing loop. Called once per frame. Do your drawing here.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.PrepareSurfaceForExport(System.Double,System.Double)">
            <summary>
            Prepares the <see cref="T:SciChart.Charting.Visuals.SciChartSurfaceBase" /> for export to bitmap or file
            </summary>
            <param name="width">The width of the <see cref="T:SciChart.Charting.Visuals.SciChartSurfaceBase" />.</param>
            <param name="height">The height of the <see cref="T:SciChart.Charting.Visuals.SciChartSurfaceBase" />.</param>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DSurface.OnChildStyleChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the RenderSurfaceStyle DependencyProperty changes. May be overridden in derived classes
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:SciChart.Charting3D.ISciChart3DRenderSurface">
            <summary>
            Defines the interface to a <see cref="T:SciChart.Charting3D.SciChart3DRenderSurface"/>, which hosts a DirectX enabled viewport which is used to render a 3D scene
            </summary>
            <seealso cref="T:SciChart.Charting3D.SciChart3DRenderSurface"/>
            <seealso cref="P:SciChart.Charting3D.ISciChart3DRenderSurface.Viewport3D"/>
        </member>
        <member name="P:SciChart.Charting3D.ISciChart3DRenderSurface.Viewport3D">
            <summary>
            Gets the 3D Viewport
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.ISciChart3DRenderSurface.AddSeries(System.Collections.Generic.IEnumerable{SciChart.Charting3D.RenderableSeries.IRenderableSeries3D})">
            <summary>
            Adds the collection of <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/> instances to the <see cref="T:SciChart.Charting3D.ISciChart3DRenderSurface"/>
            </summary>
            <param name="renderableSeries">The renderable series.</param>
            <remarks></remarks>
        </member>
        <member name="P:SciChart.Charting3D.ISciChart3DRenderSurface.ChildSeries">
            <summary>
            Gets the child RenderableSeries in this <see cref="T:SciChart.Charting3D.ISciChart3DRenderSurface" /> instance
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.ISciChart3DRenderSurface.ParentSurface">
            <summary>
            Gets or sets the Parent <see cref="T:SciChart.Charting3D.ISciChart3DSurface"/>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.ISciChart3DRenderSurface.ContainsSeries(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D)">
            <summary>
            Returns True if the <see cref="T:SciChart.Charting3D.ISciChart3DRenderSurface"/> contains the <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/> instance
            </summary>
            <param name="renderableSeries">the <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/> instance</param>
            <returns><c>true</c> if the specified renderable series contains series; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.ISciChart3DRenderSurface.AddSeries(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D)">
            <summary>
            Adds the <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/> instance to the <see cref="T:SciChart.Charting3D.ISciChart3DRenderSurface"/>
            </summary>
            <param name="renderableSeries">The renderable series.</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.ISciChart3DRenderSurface.RemoveSeries(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D)">
            <summary>
            Removes the <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/> from the <see cref="T:SciChart.Charting3D.ISciChart3DRenderSurface"/>
            </summary>
            <param name="renderableSeries">The renderable series.</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Charting3D.ISciChart3DRenderSurface.AttachCamera(SciChart.Charting3D.ICameraController)">
            <summary>
            Attaches the camera to the RenderSurface
            </summary>
            <param name="camera">The camera.</param>
        </member>
        <member name="T:SciChart.Charting3D.Math3D">
            <summary>
            Helper class to expose certain 3D math functions 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Math3D.Epsilon">
            <summary>
            Minimum precision for floating point values. 
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.Math3D.Epsilond">
            <summary>
            Minimum precision for double-precision values
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Math3D.RotateAroundPoint(SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3,System.Single,SciChart.Charting3D.Vector3)">
            <summary>
            Rotates a vector <paramref name="pointToRotate"/> around an arbitrary origin a certain number of degrees, with an arbitrary rotation axis
            </summary>
            <param name="originPoint">The origin point.</param>
            <param name="pointToRotate">The point to rotate.</param>
            <param name="rotationAngleDegrees">The rotation angle degrees.</param>
            <param name="rotationAxis">The rotation axis.</param>
            <returns>The rotated point</returns>
        </member>
        <member name="M:SciChart.Charting3D.Math3D.DirectionToPitchAndYaw(SciChart.Charting3D.Vector3,System.Single@,System.Single@)">
            <summary>
            Computation of Pitch and Yaw angles from forward vector
            </summary>
            <remarks>See original implementation here: http://www.jldoty.com/code/DirectX/YPRfromUF/YPRfromUF.html</remarks>
            <param name="direction">The forward vector.</param>
            <param name="pitch">The pitch.</param>
            <param name="yaw">The yaw.</param>
        </member>
        <member name="M:SciChart.Charting3D.Math3D.PitchAndYawToDirection(System.Single,System.Single,SciChart.Charting3D.Vector3@)">
            <summary>
            Computation of normalized direction vector from Target, Radius, Pitch and Yaw: http://stackoverflow.com/questions/10569659/camera-pitch-yaw-to-direction-vector
            </summary>
            <param name="pitch">The pitch in Degrees.</param>
            <param name="yaw">The yaw in Degrees.</param>
            <param name="direction">The computed direction.</param>
        </member>
        <member name="M:SciChart.Charting3D.Math3D.DegToRad(System.Single)">
            <summary>Converts Degrees to Radians with floating point accuracy.</summary>
        </member>
        <member name="M:SciChart.Charting3D.Math3D.RadToDeg(System.Single)">
            <summary>Converts Radians to Degrees with floating point accuracy.</summary>
        </member>
        <member name="M:SciChart.Charting3D.Math3D.DegToRad(System.Double)">
            <summary>Converts Degrees to Radians with double precision accuracy.</summary>
        </member>
        <member name="M:SciChart.Charting3D.Math3D.RadToDeg(System.Double)">
            <summary>Converts Radians to Degrees with double precision accuracy.</summary>
        </member>
        <member name="M:SciChart.Charting3D.Math3D.IsZero(System.Single)">
            <summary>Checks if a floating point value is close to zero.</summary>
        </member>
        <member name="M:SciChart.Charting3D.Math3D.IsZero(System.Double)">
            <summary>Checks if a floating point value is close to zero.</summary>
        </member>
        <member name="T:SciChart.Charting3D.ISciChart3DSurface">
            <summary>
            <para>Defines the interface to a <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>: a high performance DirectX powered 3D chart surface.</para>
            <para>Multiple multiple <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D">Renderable Series</see> are drawn over an Axis Cube, which contains the visual representation of X,Y and Z <see cref="T:SciChart.Charting3D.Axis.IAxis3D"/> instances.</para>
            <para>Each <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D">Renderable Series</see> has a <see cref="T:SciChart.Charting3D.Model.IDataSeries3D">Data Series</see>, which provides the data-source either in code or via MVVM bindings.</para>
            <para>The <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> supports one or more <see cref="T:SciChart.Charting3D.Modifiers.ChartModifierBase3D"/> derived types via the <see cref="P:SciChart.Charting3D.SciChart3DSurface.ChartModifier"/> property. These are used to 
            affect behaviour such as zooming, panning and tooltips.</para>
            <para>Finally, a <see cref="T:SciChart.Charting3D.ICameraController"/> instance is applied to the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> to define the view into the 3D scene</para>
            </summary>
            <seealso cref="T:SciChart.Charting3D.RenderableSeries.BaseRenderableSeries3D"/>
            <seealso cref="T:SciChart.Charting3D.Model.IDataSeries3D"/>
            <seealso cref="T:SciChart.Charting3D.Modifiers.ChartModifierBase3D"/>
            <seealso cref="P:SciChart.Charting3D.ISciChart3DSurface.Viewport3D"/>
            <seealso cref="T:SciChart.Charting3D.Axis.AxisBase3D"/>
        </member>
        <member name="P:SciChart.Charting3D.ISciChart3DSurface.RenderableSeries">
            <summary>
            Gets the collection of RenderableSeries that this SciChartSurface draws.        
            </summary>
            <remarks>A <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D"/> is bound to an <see cref="T:SciChart.Charting3D.Model.IDataSeries3D"/> derived type.
            If a RenderableSeries.IsEnabled=false, then this series is skipped when evaluating the series to draw</remarks>
        </member>
        <member name="P:SciChart.Charting3D.ISciChart3DSurface.Viewport3D">
            <summary>
            Gets the <see cref="T:SciChart.Charting3D.IViewport3D"/> which hosts the 3D Scene. This may be null if the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/> has not yet loaded or initialized
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.ISciChart3DSurface.RootGrid">
            <summary>
            Gets the Root Grid that hosts the SciChart3DSurface components all child controls
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.ISciChart3DSurface.ZAxis">
            <summary>
            Gets or sets the ZAxis on the <see cref="T:SciChart.Charting3D.ISciChart3DSurface"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.ISciChart3DSurface.YAxis">
            <summary>
            Gets or sets the YAxis on the <see cref="T:SciChart.Charting3D.ISciChart3DSurface"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.ISciChart3DSurface.XAxis">
            <summary>
            Gets or sets the XAxis on the <see cref="T:SciChart.Charting3D.ISciChart3DSurface"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.ISciChart3DSurface.ChartModifier">
            <summary>
            Gets or sets the ChartModifier on the <see cref="T:SciChart.Charting3D.ISciChart3DSurface"/>
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.ISciChart3DSurface.Camera">
            <summary>
            Gets or sets the Camera on the <see cref="T:SciChart.Charting3D.ISciChart3DSurface" />
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.ISciChart3DSurface.ViewportManager">
            <summary>
            Gets or sets the ViewportManager instance on the chart, which handles behavior of the viewport on render
            </summary>
            <value>The renderable series.</value>
            <remarks></remarks>
        </member>
        <member name="P:SciChart.Charting3D.ISciChart3DSurface.WorldDimensions">
            <summary>
            Gets or sets the World Dimensions as a <see cref="T:SciChart.Charting3D.Vector3"/>. 
            </summary>
            <remarks>
            The default is Z,Y,Z = 100,100,100.
            The extents of the X,Y,Z world ranges from -DimX/2 to +DimX/2, -DimY/2 to +DimY/2, -DimZ/2 to +DimZ/2
            </remarks>
        </member>
        <member name="M:SciChart.Charting3D.ISciChart3DSurface.OnArrangeSciChart">
            <summary>
            Preparations for a render pass, called internally, returns the viewport size
            </summary>
            <returns>The required Viewport Size</returns>
        </member>
        <member name="M:SciChart.Charting3D.ISciChart3DSurface.CaptureMouse">
            <summary>
            Captures the mouse in the WPF Context
            </summary>
            <returns>True, if mouse was captured</returns>
        </member>
        <member name="M:SciChart.Charting3D.ISciChart3DSurface.ReleaseMouseCapture">
            <summary>
            Releases the mouse capture.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.SciChart3DRenderSurface">
            <summary>
            Provides a <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase"/> implementation that uses a DirectX engine, capable of 3D rendering
            This requires DirectX10 hardware or later to run. Newer GPUs will have superior performance.
            </summary>
            <seealso cref="T:SciChart.Drawing.Common.RenderSurfaceBase"/>
            <seealso cref="T:SciChart.Drawing.Common.IRenderContext2D"/>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRenderSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.SciChart3DRenderSurface"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRenderSurface.RecreateSurface">
            <summary>
            this is called when window is created or resized
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRenderSurface.OnRenderSurfaceBaseLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> is loaded into the visual tree
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRenderSurface.GetRenderContext">
            <summary>
            When overridden in a derived class, returns a RenderContext valid for the current render pass
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">The SciChart3DRenderSurface does not support 2D drawing operations</exception>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRenderSurface.DisposeUnmanagedResources">
            <summary>
            Derived classes may override this method to be notified when to dispose of unmanaged resources. Called when the
            <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> is disposed
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DRenderSurface.Viewport3D">
            <summary>
            Gets the 3D Viewport
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRenderSurface.AddSeries(System.Collections.Generic.IEnumerable{SciChart.Charting3D.RenderableSeries.IRenderableSeries3D})">
            <summary>
            Adds the collection of <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D" /> instances to the <see cref="T:SciChart.Charting3D.ISciChart3DRenderSurface" />
            </summary>
            <param name="renderableSeries">The renderable series.</param>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRenderSurface.AddSeries(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D)">
            <summary>
            Adds the <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D" /> instance to the <see cref="T:SciChart.Charting3D.ISciChart3DRenderSurface" />
            </summary>
            <param name="renderableSeries">The renderable series.</param>
        </member>
        <member name="P:SciChart.Charting3D.SciChart3DRenderSurface.SciChart#Charting3D#ISciChart3DRenderSurface#ChildSeries">
            <summary>
            Gets the child RenderableSeries in this <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> instance
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRenderSurface.ContainsSeries(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D)">
            <summary>
            Returns True if the <see cref="T:SciChart.Charting3D.ISciChart3DRenderSurface" /> contains the <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D" /> instance
            </summary>
            <param name="renderableSeries">the <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D" /> instance</param>
            <returns>
              <c>true</c> if the specified renderable series contains series; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRenderSurface.RemoveSeries(SciChart.Charting3D.RenderableSeries.IRenderableSeries3D)">
            <summary>
            Removes the <see cref="T:SciChart.Charting3D.RenderableSeries.IRenderableSeries3D" /> from the <see cref="T:SciChart.Charting3D.ISciChart3DRenderSurface" />
            </summary>
            <param name="renderableSeries">The renderable series.</param>
        </member>
        <member name="M:SciChart.Charting3D.SciChart3DRenderSurface.AttachCamera(SciChart.Charting3D.ICameraController)">
            <summary>
            Attaches the camera to the RenderSurface
            </summary>
            <param name="camera">The camera.</param>
        </member>
        <member name="T:SciChart.Charting3D.VectorEditor">
            <summary>
            Provides a Templatable WPF Control which allows you to view, and edit <see cref="T:SciChart.Charting3D.Vector3"/> X,Y,Z components
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.VectorEditor.VectorProperty">
            <summary>
            The <see cref="P:SciChart.Charting3D.VectorEditor.Vector"/> DependencyProperty
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.VectorEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.VectorEditor"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.VectorEditor.Vector">
            <summary>
            Gets or sets the vector to edit.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.VectorEditor.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.VectorEditor.OnTextBoxLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a text box loses focus
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SciChart.Charting3D.VectorEditor.OnVectorChanged(SciChart.Charting3D.Vector3,SciChart.Charting3D.Vector3)">
            <summary>
            Called when the <see cref="P:SciChart.Charting3D.VectorEditor.Vector"/> DependencyProperty changes
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:SciChart.Charting3D.FullScreenAntiAliasingMode">
            <summary>
            Enumeration constants to define the Full Screen AntiAliasing mode on the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.FullScreenAntiAliasingMode.None">
            <summary>
            No Antialiasing
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.FullScreenAntiAliasingMode.MSAA2x">
            <summary>
            Enables Multi-Sample AntiAliasing x2
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.FullScreenAntiAliasingMode.MSAA4x">
            <summary>
            Enables Multi-Sample AntiAliasing x4
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.FullScreenAntiAliasingMode.MSAA8x">
            <summary>
            Enables Multi-Sample AntiAliasing x8
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.DirectXMode">
            <summary>
            Enumeration constants to define the usage of DirectX on the <see cref="T:SciChart.Charting3D.SciChart3DSurface"/>
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.DirectXMode.AutoDetect">
            <summary>
            Auto-detects DirectX mode for 3D Chart Rendering
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.DirectXMode.DirectX9c">
            <summary>
            Force using DirectX9c for 3D Chart Rendering
            </summary>
        </member>
        <member name="F:SciChart.Charting3D.DirectXMode.DirectX11">
            <summary>
            Force using DirectX11 for 3D Chart Rendering
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.IViewport3D">
            <summary>
            Defines the interface to a 3D Viewport, which wraps a C++/DirectX Engine and allows presentation of the 3D Scene in WPF
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.IViewport3D.IdProvider">
            <summary>Gets or sets the EntityId Provider. Defaults to the <see	cref="T:SciChart.Charting3D.Primitives.DefaultEntityIdProvider"/></summary>			
        </member>
        <member name="P:SciChart.Charting3D.IViewport3D.RootEntity">
            <summary>Gets or sets the Root Scene Entity which exists in the Viewport</summary>			
        </member>
        <member name="P:SciChart.Charting3D.IViewport3D.ViewportSize">
            <summary>Gets the current Viewport3D size in pixels</summary>			
        </member>
        <member name="P:SciChart.Charting3D.IViewport3D.Started">
            <summary>Gets whether DirectX is started on the Viewport3D</summary>			
        </member>
        <member name="P:SciChart.Charting3D.IViewport3D.SyncRoot">
            <summary>Gets the synchronization object for multi-threaded operations on the Viewport3D</summary>			
        </member>
        <member name="P:SciChart.Charting3D.IViewport3D.CameraController">
            <summary>
            Gets the current <see cref="T:SciChart.Charting3D.ICameraController"/> instance attached to the <see cref="T:SciChart.Charting3D.Viewport3D"/>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.IViewport3D.DrawFrame(SciChart.Charting3D.Primitives.ISceneDescriptor)">
            <summary>Forces a redraw to occur in the Viewport3D</summary>			
        </member>
        <member name="M:SciChart.Charting3D.IViewport3D.AttachCamera(SciChart.Charting3D.ICameraController)">
            <summary>Attaches a Camera to the Viewport3D</summary>			
        </member>
        <member name="M:SciChart.Charting3D.IViewport3D.OnViewportResized(System.Int32,System.Int32)">
            <summary>Tells the viewport the parent size has changed</summary>			
        </member>
        <member name="M:SciChart.Charting3D.IViewport3D.PickScene(System.Windows.Rect)">
            <summary>Performs a Pick operation on the scene, returning the unique Vertex ID that was picked, or zero for none</summary>			
        </member>
        <member name="M:SciChart.Charting3D.IViewport3D.PickScene(System.Windows.Point)">
            <summary>Performs a Pick operation on the scene, returning the list of unique vertex IDs that are inside the screen rect, or zero for none</summary>			
        </member>
        <member name="M:SciChart.Charting3D.IViewport3D.SetCoordinateSystem(SciChart.Charting3D.CoordinateSystem3D)">
            <summary>Sets the coordinate system (e.g. Left Handed or Right Handed) to use in the current Viewport instance</summary>			
        </member>
        <member name="M:SciChart.Charting3D.IViewport3D.GetWorld">
            <summary>
            Gets the 3D Scene World from the 3D engine
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.IViewport3D.BuildUpViewport(System.Collections.Generic.IList{SciChart.Charting3D.Interop.SCRTSceneEntity})">
            <summary>
            INTERNAL USE ONLY: After <see cref="M:SciChart.Charting3D.Viewport3D.Restart3DEngineWith(SciChart.Charting3D.DirectXMode,SciChart.Charting3D.FullScreenAntiAliasingMode,System.Boolean)"/>, this method is called internally to build up the viewport. We expose this only as public for unit tests.
            </summary>
            <param name="persistedEntities">The entities persisted from <see cref="M:SciChart.Charting3D.IViewport3D.TearDownViewport"/> which must now be restored</param>
        </member>
        <member name="M:SciChart.Charting3D.IViewport3D.TearDownViewport">
            <summary>
            INTERNAL USE ONLY: Before <see cref="M:SciChart.Charting3D.Viewport3D.Restart3DEngineWith(SciChart.Charting3D.DirectXMode,SciChart.Charting3D.FullScreenAntiAliasingMode,System.Boolean)"/>, this method is called internally to tear down the viewport. We expose this only as public for unit tests.
            </summary>
        </member>
        <member name="T:SciChart.Charting3D.Viewport3D">
            <summary>
            Defines a 3D Viewport, which wraps a C++/DirectX Engine and allows presentation of the 3D Scene in WPF
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Viewport3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting3D.Viewport3D"/> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Viewport3D.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:SciChart.Charting3D.Viewport3D"/> class.
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Viewport3D.RootEntity">
            <summary>
            Gets or sets the Root Scene Entity which exists in the Viewport
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Viewport3D.IdProvider">
            <summary>
            Gets or sets the EntityId Provider. Defaults to the <see cref="T:SciChart.Charting3D.Primitives.DefaultEntityIdProvider"/>
            </summary>			
        </member>
        <member name="P:SciChart.Charting3D.Viewport3D.Started">
            <summary>
            Gets whether DirectX is started on the Viewport3D
            </summary>			
        </member>
        <member name="P:SciChart.Charting3D.Viewport3D.SyncRoot">
            <summary>
            Gets the synchronization object for multi-threaded operations on the Viewport3D
            </summary>		
        </member>
        <member name="P:SciChart.Charting3D.Viewport3D.ViewportSize">
            <summary>
            Gets the current Viewport3D size in pixels
            </summary>		
        </member>
        <member name="M:SciChart.Charting3D.Viewport3D.Restart3DEngineWith(SciChart.Charting3D.DirectXMode,SciChart.Charting3D.FullScreenAntiAliasingMode,System.Boolean)">
            <summary>
            Restarts the 3D Engine for all Viewport3D instances in the application with the following flags. 
            <para>
            <see cref="T:SciChart.Charting3D.DirectXMode"/> specifies the DirectX version. Choose <see cref="F:SciChart.Charting3D.DirectXMode.AutoDetect"/> to auto detect. 
            </para>
            <para>
            <see cref="T:SciChart.Charting3D.FullScreenAntiAliasingMode"/> specifies the level of antialiasing, or oversampling. The default is <see cref="F:SciChart.Charting3D.FullScreenAntiAliasingMode.None"/>. Note that lines (Gridlines, Wireframes) are antialiased by default throughout the scene.
            </para>
            </summary>
            <param name="directXMode">specifies the DirectX version. Choose <see cref="F:SciChart.Charting3D.DirectXMode.AutoDetect"/> to auto detect. </param>
            <param name="antiAliasingMode">specifies the level of antialiasing, or oversampling. The default is <see cref="F:SciChart.Charting3D.FullScreenAntiAliasingMode.None"/>. Note that lines (Gridlines, Wireframes) are antialiased by default throughout the scene.</param>
            <param name="d3d11UseLowerFeaturesLevel"></param>
        </member>
        <member name="M:SciChart.Charting3D.Viewport3D.SetCoordinateSystem(SciChart.Charting3D.CoordinateSystem3D)">
            <summary>
            Sets the coordinate system (e.g. Left Handed or Right Handed) to use in the current Viewport instance
            </summary>
            <param name="coordinateSystem"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SciChart.Charting3D.Viewport3D.OnViewportResized(System.Int32,System.Int32)">
            <summary>
            Tells the viewport the parent size has changed
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:SciChart.Charting3D.Viewport3D.PickScene(System.Windows.Point)">
            <summary>
            Performs a Pick operation on the scene, returning the list of unique vertex IDs that are inside the screen rect, or zero for none
            </summary>
            <param name="mousePoint"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Viewport3D.PickScene(System.Windows.Rect)">
            <summary>
            Performs a Pick operation on the scene, returning the unique Vertex ID that was picked, or zero for none
            </summary>
            <param name="screenRect"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Charting3D.Viewport3D.DrawFrame(SciChart.Charting3D.Primitives.ISceneDescriptor)">
            <summary>
            Forces a redraw to occur in the Viewport3D
            </summary>
            <param name="sceneDescriptor">Parameters for the scene</param>
        </member>
        <member name="M:SciChart.Charting3D.Viewport3D.BuildUpViewport(System.Collections.Generic.IList{SciChart.Charting3D.Interop.SCRTSceneEntity})">
            <summary>
            INTERNAL USE ONLY: After <see cref="M:SciChart.Charting3D.Viewport3D.Restart3DEngineWith(SciChart.Charting3D.DirectXMode,SciChart.Charting3D.FullScreenAntiAliasingMode,System.Boolean)"/>, this method is called internally to build up the viewport. We expose this only as public for unit tests.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Viewport3D.TearDownViewport">
            <summary>
            INTERNAL USE ONLY: Before <see cref="M:SciChart.Charting3D.Viewport3D.Restart3DEngineWith(SciChart.Charting3D.DirectXMode,SciChart.Charting3D.FullScreenAntiAliasingMode,System.Boolean)"/>, this method is called internally to tear down the viewport. We expose this only as public for unit tests.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Viewport3D.AttachCamera(SciChart.Charting3D.ICameraController)">
            <summary>
            Attaches a Camera to the Viewport3D
            </summary>
            <param name="cameraController">The <see cref="T:SciChart.Charting3D.ICameraController"/> instance to attach</param>
        </member>
        <member name="P:SciChart.Charting3D.Viewport3D.CameraController">
            <summary>
            Gets the current <see cref="T:SciChart.Charting3D.ICameraController"/> instance attached to the <see cref="T:SciChart.Charting3D.Viewport3D"/>
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Viewport3D.GetWorld">
            <summary>
            Gets the 3D Scene World from the 3D engine
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Viewport3D.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SciChart.Charting3D.Viewport3D.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SciChart.Charting3D.Viewport3D.FillSourceRDP">
            <summary>
            Should be called to fill the WPF Image from the Direct3D Render Target at the end of drawing
            </summary>
            <remarks>
            Alternative method for filling a WriteableBitmap with directx content, avoiding D3DImage (does not work over RDP due to bug in .NET4.0 implementation of D3DImage)
            </remarks>
        </member>
        <member name="P:SciChart.Charting3D.Viewport3D.IsRemoteDesktop">
            <summary>
            Determines if the code is being run under Remote Desktop
            </summary>
        </member>
        <member name="P:SciChart.Charting3D.Viewport3D.UseAlternativeFillSource">
            <summary>
            When false (default), uses <see cref="T:System.Windows.Interop.D3DImage"/> for hardware accelerated texture sharing. 
            When true, uses software method to FillSource (avoiding use of D3DImage). This can help compatibility on certain systems
            </summary>       
            <example>
            To enable compatibility mode for SciChart3DSurface, set this property once, statically, in your application
            <code>        
            void Foo()
            {
               Direct3D11RenderSurface.UseAlternativeFillSource = true;
            }
            </code>
            </example>
        </member>
        <member name="P:SciChart.Charting3D.Viewport3D.ForceStallUntilGPUIsIdle">
            <summary>
            When false (default), there is no waiting for the gpu to finish rendering, and the frame buffer is copied immediately
            when true, we force the application to stall until the gpu is idle, this fixes flicker issues that can happen on older hardware
            </summary>       
            <example>
            To enable waiting for gpu to finish
            <code>        
            void Foo()
            {
               Viewport3D.ForceStallUntilGPUIsIdle = true;
            }
            </code>
            </example>
        </member>
    </members>
</doc>
